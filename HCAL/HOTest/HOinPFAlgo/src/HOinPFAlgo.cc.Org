/*
diff RecoJets/JetProducers/python/ak5CaloJets_cfi.py                          /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoJets/JetProducers/python/ak5CaloJets_cfi.py                         
diff RecoJets/JetProducers/python/ak5PFJets_cfi.py 			      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoJets/JetProducers/python/ak5PFJets_cfi.py                           
diff RecoJets/JetProducers/python/CaloTowerSchemeBWithHO_cfi.py 	      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoJets/JetProducers/python/CaloTowerSchemeBWithHO_cfi.py              
diff RecoMET/Configuration/python/RecoTCMET_cff.py 			      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoMET/Configuration/python/RecoTCMET_cff.py                           
diff RecoMET/Configuration/python/RecoPFMET_cff.py 			      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoMET/Configuration/python/RecoPFMET_cff.py                           
diff RecoMET/METProducers/python/CaloMET_cfi.py 			      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoMET/METProducers/python/CaloMET_cfi.py                              
diff RecoMET/METProducers/python/MetMuonCorrections_cff.py 		      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoMET/METProducers/python/MetMuonCorrections_cff.py                   
diff RecoMET/METProducers/python/MuonTCMETValueMapProducer_cff.py 	      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoMET/METProducers/python/MuonTCMETValueMapProducer_cff.py            
diff RecoMET/METProducers/python/MuonMETValueMapProducer_cff.py 	      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoMET/METProducers/python/MuonMETValueMapProducer_cff.py              
diff DataFormats/HcalCalibObjects/interface/star 			      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/DataFormats/HcalCalibObjects/interface/star                             
diff DataFormats/HcalCalibObjects/src/star 				      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/DataFormats/HcalCalibObjects/src/star                                   
diff DataFormats/HcalCalibObjects/src/classes.h 			      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/DataFormats/HcalCalibObjects/src/classes.h                              
diff RecoLocalCalo/CaloTowersCreator/python/calotowermaker_cfi.py 	      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/CaloTowersCreator/python/calotowermaker_cfi.py            
diff RecoLocalCalo/Configuration/python/hcalLocalReco_cff.py 		      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/Configuration/python/hcalLocalReco_cff.py                 
diff RecoLocalCalo/Configuration/python/hcalGlobalReco_cff.py 		      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/Configuration/python/hcalGlobalReco_cff.py                
diff RecoLocalCalo/HcalRecProducers/python/HcalHitReconstructor_hbhe_cfi.py   /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/HcalRecProducers/python/HcalHitReconstructor_hbhe_cfi.py  
diff RecoLocalCalo/HcalRecProducers/src/HcalHitReconstructor.cc 	      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/HcalRecProducers/src/HcalHitReconstructor.cc              
diff RecoLocalCalo/HcalRecProducers/src/HcalHitReconstructor.h 		      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/HcalRecProducers/src/HcalHitReconstructor.h               
diff RecoParticleFlow/Configuration/python/RecoParticleFlow_cff.py 	      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoParticleFlow/Configuration/python/RecoParticleFlow_cff.py           
diff RecoParticleFlow/PFClusterProducer/python/particleFlowCluster_cff.py     /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoParticleFlow/PFClusterProducer/python/particleFlowCluster_cff.py    
diff RecoParticleFlow/PFProducer/python/particleFlowBlock_cff.py 	      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoParticleFlow/PFProducer/python/particleFlowBlock_cff.py             
diff RecoParticleFlow/PFProducer/python/pfLinker_cff.py 		      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoParticleFlow/PFProducer/python/pfLinker_cff.py                      
diff RecoParticleFlow/PFProducer/python/particleFlow_cff.py 		      /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoParticleFlow/PFProducer/python/particleFlow_cff.py                  
diff RecoLocalCalo/HcalRecProducers/python/HcalHitReconstructor_hf_cfi.py     /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/HcalRecProducers/python/HcalHitReconstructor_hf_cfi.py    
diff RecoLocalCalo/HcalRecProducers/python/HcalHitReconstructor_ho_cfi.py     /afs/cern.ch/cms/slc5_amd64_gcc462/cms/cmssw/CMSSW_5_3_13/src/RecoLocalCalo/HcalRecProducers/python/HcalHitReconstructor_ho_cfi.py


cvs co -r CMSSW_5_3_11_patch3 RecoParticleFlow/PFClusterProducer

cvs co -r CMSSW_5_3_11_patch3 RecoParticleFlow/PFProducer

cvs co -r CMSSW_5_3_11_patch3 RecoJets/JetProducers

cvs co -r CMSSW_5_3_11_patch3 RecoMET/Configuration

cvs co -r CMSSW_5_3_11_patch3 RecoParticleFlow/Configuration

cvs co -r CMSSW_5_3_11_patch3 RecoMET/METAlgorithms

cvs co -r CMSSW_5_3_11_patch3 RecoMET/METProducers

cvs co -r CMSSW_5_3_11_patch3 RecoMET/Configuration

cvs co -r CMSSW_5_3_11_patch3 RecoLocalCalo/CaloTowersCreator
cvs co -r CMSSW_5_3_11_patch3 DataFormats/HcalCalibObjects



tar -cvf allx131214.tar  Test/HOinPFAlgo/BuildFile.xml Test/HOinPFAlgo/src/HOinPFAlgo.cc Test/HOinPFAlgo/test/hoinpf_534p2_0_1_1_cfg.py Test/HOinPFAlgo/test/crab_534p2_0_1_1.cfg Test/BarrelJetFilter/BuildFile.xml Test/BarrelJetFilter/src/BarrelJetFilter.cc RecoParticleFlow/PFClusterProducer/plugins/PFRecHitProducerHO.cc RecoParticleFlow/PFClusterProducer/plugins/PFRecHitProducerHO.h RecoParticleFlow/PFClusterProducer/python/particleFlowRecHitHO_cfi.py RecoParticleFlow/PFClusterProducer/python/particleFlowCluster_cff.py RecoParticleFlow/PFProducer/python/particleFlowBlock_cff.py RecoParticleFlow/PFProducer/python/particleFlow_cff.py RecoJets/JetProducers/python/ak5PFJets_cfi.py RecoMET/Configuration/python/RecoPFMET_cff.py RecoParticleFlow/PFProducer/python/pfLinker_cff.py RecoParticleFlow/Configuration/python/RecoParticleFlow_cff.py RecoMET/METAlgorithms/src/TCMETAlgo.cc RecoMET/METProducers/python/MetMuonCorrections_cff.py RecoMET/METProducers/python/MuonMETValueMapProducer_cff.py RecoMET/METProducers/python/MuonTCMETValueMapProducer_cff.py RecoMET/METProducers/python/TCMET_cfi.py RecoMET/Configuration/python/RecoTCMET_cff.py RecoJets/JetProducers/python/CaloTowerSchemeBWithHO_cfi.py RecoMET/METProducers/python/CaloMET_cfi.py RecoJets/JetProducers/python/ak5CaloJets_cfi.py RecoLocalCalo/CaloTowersCreator/src/CaloTowersCreationAlgo.cc RecoLocalCalo/CaloTowersCreator/interface/CaloTowersCreationAlgo.h RecoLocalCalo/CaloTowersCreator/src/CaloTowersCreator.cc RecoLocalCalo/CaloTowersCreator/test/howeight_allmu2011.inc

PGAlog.cc
PFProducer.h
PFProducer.cc

particleFlowCluster_cff.py  
particleFlow_cff.py

particleFlowTmp00 : No HO

particleFlowTmp01 : threshold 1

particleFlowTmp02 : threshold 2

particleFlowTmp03 : threshold 3

particleFlowTmp04 : threshold 4

5+6+7+8 : 1+2+3+4 + correction1
9+10+11+12 : 1+2+3+4 + correction2
13+14+15+16 : 1+2+3+4 + correction3




*/
// -*- C++ -*-
//
// Package:    HOinPFAlgo
// Class:      HOinPFAlgo
// 
/**\class HOinPFAlgo HOinPFAlgo.cc Test/HOinPFAlgo/src/HOinPFAlgo.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Gobinda Majumder,22 1-031,+41227679681,
//         Created:  Thu Dec  1 13:09:13 CET 2011
// $Id$
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "DataFormats/ParticleFlowCandidate/interface/PFCandidate.h"
#include "DataFormats/JetReco/interface/PFJet.h"
#include "DataFormats/JetReco/interface/CaloJet.h"
#include "DataFormats/JetReco/interface/CaloJetCollection.h"
#include "DataFormats/METReco/interface/PFMET.h"
#include "DataFormats/METReco/interface/PFMETCollection.h"
#include "DataFormats/METReco/interface/MET.h"
#include "DataFormats/METReco/interface/CaloMET.h"
#include "DataFormats/METReco/interface/METCollection.h"
#include "DataFormats/METReco/interface/CaloMETCollection.h"

#include "DataFormats/METReco/interface/GenMET.h"
#include "DataFormats/METReco/interface/GenMETFwd.h"

#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/JetReco/interface/GenJetCollection.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/HepMCCandidate/interface/GenParticleFwd.h"
#include "DataFormats/HcalRecHit/interface/HcalRecHitCollections.h"
#include "DataFormats/JetReco/interface/JetID.h"
#include "TFile.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TTree.h"
#include "CLHEP/Vector/LorentzVector.h"

#include "DataFormats/EgammaCandidates/interface/GsfElectron.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectronFwd.h"
#include "DataFormats/GsfTrackReco/interface/GsfTrack.h"
#include "DataFormats/MuonReco/interface/Muon.h"
#include "DataFormats/MuonReco/interface/MuonSelectors.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"

#include <string>

#include <iostream>
#include <fstream>

#include "DataFormats/EgammaCandidates/interface/Photon.h"
#include "DataFormats/EgammaCandidates/interface/PhotonFwd.h"

#include "DataFormats/HcalDigi/interface/HcalDigiCollections.h"
#include "DataFormats/HcalDetId/interface/HcalDetId.h"
#include "CalibFormats/HcalObjects/interface/HcalCoderDb.h"
#include "CalibFormats/HcalObjects/interface/HcalCalibrations.h"
//#include "CalibFormats/HcalObjects/interface/HcalCalibrationWidths.h"
#include "CalibFormats/HcalObjects/interface/HcalDbService.h"
#include "CalibFormats/HcalObjects/interface/HcalDbRecord.h"
//#include "CondFormats/HcalObjects/interface/HcalQIECoder.h"
//#include "CondFormats/HcalObjects/interface/HcalPedestal.h"
//#include "CondFormats/HcalObjects/interface/HcalPedestalWidth.h"
//#include "CondFormats/HcalObjects/interface/HcalElectronicsMap.h"
#include "FWCore/Framework/interface/ESHandle.h"

//#include "DataFormats/HcalCalibObjects/interface/HBHERecTime.h"
//#include "DataFormats/HcalCalibObjects/interface/HBHERecTimeCollection.h"

using namespace std;
using namespace edm;
using namespace reco;  
using namespace CLHEP;

const float mu_mass = 0.105658;
const float el_mass = 0.000511;
const float pival = acos(-1.);

const int nhbetamx=60;
const int nhbphimx=72;
const int nhbdepthmx=4;

const int netabin= 15;
const int netamx = 30;
const int nphimx = 72;
const int nchnmx = 10;
const int ncidmx = 5;
int gethbieta(int ij) { return (ij<nhbetamx/2) ? -nhbetamx/2 + ij : -nhbetamx/2 + ij + 1;}
int invert_hbieta(int ieta) { return (ieta<0) ? nhbetamx/2+ ieta : nhbetamx/2 +ieta - 1;}

int getieta(int ij) { 
  if (ij<netamx/2) { 
    return  -netamx/2 + ij;
  } else {
    return  -netamx/2 + ij + 1;
  }
}
int invert_ieta(int ieta) { 
  if (ieta<0) {
    return netamx/2 + ieta;
  } else {
    return netamx/2 + ieta - 1;
  }
}


static const int njtptbin =8;
double jtptbins[njtptbin+1]={30., 70., 120., 200., 400., 700., 1200., 2500., 5000.};
static const double etarng=3.0; //5.0;
static const double mnphi=-2.35; // iphi=45
static const double mxphi=-0.70; // iphi=64
//For histogrammes of time profile 
static const int nhbsigmx=8;
//double hbsigmxs[nhbsigmx+1]={-100.0, 0.0, 5.0, 10.0, 30.0, 100.0, 300.0, 1000.0, 2000.0};
double hbsigmxs[nhbsigmx+1]={0.2, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 300.0, 3000.0};

static const int ntimemx=50;

int getbinid(double val, int nbmx, double* array) {
  if (val<array[0]) return -2;
  for (int ix=0; ix<=nbmx; ix++) {
    if (val < array[ix]) return ix;
  }
  return -3;
}

int isitorbitgap(int ibr) {
  if (ibr>=3451 && ibr<= 3559) return 1;
  if (ibr>=3441 && ibr<= 3564) return 0;
  if (ibr<=5) return 0;
  if (ibr>=0) return -1;

  if (ibr>= 238 && ibr<=265) return 1; 
  if (ibr>= 508 && ibr<=535) return 1; 
  if (ibr>= 858 && ibr<=886) return 1; 
  if (ibr>= 1129 && ibr<=1156) return 1; 
  if (ibr>= 1399 && ibr<=1426) return 1; 
  if (ibr>= 1749 && ibr<=1777) return 1; 
  if (ibr>= 2020 && ibr<=2047) return 1; 
  if (ibr>= 2290 && ibr<=2317) return 1; 
  if (ibr>= 2640 && ibr<=2668) return 1; 
  if (ibr>= 2911 && ibr<=2938) return 1; 
  if (ibr>= 3181 && ibr<=3208) return 1; 
  if (ibr>= 3451 && ibr<=3559) return 1; 

  if (ibr>= 68 && ibr<=85) return 0; 
  if (ibr>= 148 && ibr<=165) return 0; 
  if (ibr>= 228 && ibr<=275) return 0; 
  if (ibr>= 338 && ibr<=355) return 0; 
  if (ibr>= 418 && ibr<=435) return 0; 
  if (ibr>= 498 && ibr<=545) return 0; 
  if (ibr>= 608 && ibr<=625) return 0; 
  if (ibr>= 688 && ibr<=705) return 0; 
  if (ibr>= 768 && ibr<=785) return 0; 
  if (ibr>= 848 && ibr<=896) return 0; 
  if (ibr>= 959 && ibr<=976) return 0; 
  if (ibr>= 1039 && ibr<=1056) return 0; 
  if (ibr>= 1119 && ibr<=1166) return 0; 
  if (ibr>= 1229 && ibr<=1246) return 0; 
  if (ibr>= 1309 && ibr<=1326) return 0; 
  if (ibr>= 1389 && ibr<=1436) return 0; 
  if (ibr>= 1499 && ibr<=1516) return 0; 
  if (ibr>= 1579 && ibr<=1596) return 0; 
  if (ibr>= 1659 && ibr<=1676) return 0; 
  if (ibr>= 1739 && ibr<=1787) return 0; 
  if (ibr>= 1850 && ibr<=1867) return 0; 
  if (ibr>= 1930 && ibr<=1947) return 0; 
  if (ibr>= 2010 && ibr<=2057) return 0; 
  if (ibr>= 2120 && ibr<=2137) return 0; 
  if (ibr>= 2200 && ibr<=2217) return 0; 
  if (ibr>= 2280 && ibr<=2327) return 0; 
  if (ibr>= 2390 && ibr<=2407) return 0; 
  if (ibr>= 2470 && ibr<=2487) return 0; 
  if (ibr>= 2550 && ibr<=2567) return 0; 
  if (ibr>= 2630 && ibr<=2678) return 0; 
  if (ibr>= 2741 && ibr<=2758) return 0; 
  if (ibr>= 2821 && ibr<=2838) return 0; 
  if (ibr>= 2901 && ibr<=2948) return 0; 
  if (ibr>= 3011 && ibr<=3028) return 0; 
  if (ibr>= 3091 && ibr<=3108) return 0; 
  if (ibr>= 3171 && ibr<=3218) return 0; 
  if (ibr>= 3281 && ibr<=3298) return 0; 
  if (ibr>= 3361 && ibr<=3378) return 0; 
  if (ibr>= 3441 && ibr<=3569) return 0; 

  return -1;
}
double theta_to_eta(double theta) { return -log(tan(theta/2.)); }

static const int nsetmx=21;
static const int iTagMx=21;

static const int netajtbin=4;
double etajtbins[netajtbin]={0.36, 0.90, 2.0, 3.0};
//static const int nlepton=3;
//const char* namelep[nlepton]={"mu-tag", "ele-tag", "others"};
static const int nlepton=2;
const char* namelep[nlepton]={"mu-tag", "others"};
static const int nmettype=3;
const char* metname[nmettype]={"Calo", "tc", "pf"};
static const int norbitgap=3;

  const int nlogmisptbin=60;
  
  double logmisptbins[nlogmisptbin+1]={0.0, 2.0, 4.1, 6.2, 8.3, 10.4, 12.5, 14.6, 16.7, 18.8, 20.9, 23.0, 25.1304, 27.2363, 29.4022, 31.641, 34.1665, 36.8935, 39.8382, 43.018, 46.4515, 50.1591, 54.1627, 58.4857, 63.1539, 68.1946, 73.6377, 79.5152, 85.8618, 92.715, 100.115, 108.106, 116.735, 126.052, 136.113, 146.977, 158.708, 171.376, 185.055, 199.825, 215.774, 232.997, 251.594, 271.675, 293.359, 316.774, 342.058, 369.36, 398.841, 430.675, 465.05, 502.169, 542.251, 585.531, 632.266, 682.732, 737.225, 796.068, 859.607, 928.218, 1002.31};

const int nlogpsig2=60;
double logpsig2s[nlogpsig2+1]={0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.114815, 0.134896, 0.158489, 0.186209, 0.218776, 0.25704, 0.301995, 0.354813, 0.416869, 0.489779, 0.57544, 0.676083, 0.794328, 0.933254, 1.09648, 1.28825, 1.51356, 1.77828, 2.0893, 2.45471, 2.88403, 3.38844, 3.98107, 4.67735, 5.49541, 6.45654, 7.58578, 8.91251, 10.4713, 12.3027, 14.4544, 16.9824, 19.9526, 23.4423, 27.5423, 32.3594, 38.0189, 44.6684, 52.4807, 61.6595, 72.4436, 85.1138, 100, 117.49, 138.038, 162.181, 190.546, 223.872, 263.027, 309.03};

double logpsig2jt[nlogpsig2+1]={2.99916, 3.36512, 3.77572, 4.23643, 4.75335, 5.33335, 5.98412, 6.71429, 7.53356, 8.45279, 9.48418, 10.6414, 11.9399, 13.3968, 15.0314, 16.8655, 18.9234, 21.2324, 23.8232, 26.7301, 29.9916, 33.6512, 37.7572, 42.3643, 47.5335, 53.3335, 59.8412, 67.1429, 75.3356, 84.5279, 94.8418, 106.414, 119.399, 133.968, 150.314, 168.655, 189.234, 212.324, 238.232, 267.301, 299.916, 336.512, 377.572, 423.643, 475.335, 533.335, 598.412, 671.429, 753.356, 845.279, 948.418, 1064.14, 1193.99, 1339.68, 1503.14, 1686.55, 1892.34, 2123.24, 2382.32, 2673.01, 2999.16};

const int nlogpsig2ss=80;
double logpsig2ss[nlogpsig2ss+1]={0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.10154, 1.21339, 1.3366, 1.47231, 1.62181, 1.78649, 1.96789, 2.1677, 2.38781, 2.63027, 2.89734, 3.19154, 3.5156, 3.87258, 4.2658, 4.69894, 5.17607, 5.70164, 6.28058, 6.91831, 7.62079, 8.3946, 9.24698, 10.1859, 11.2202, 12.3595, 13.6144, 14.9968, 16.5196, 18.197, 20.0447, 22.08, 24.322, 26.7917, 29.5121, 32.5087, 35.8096, 39.4457, 43.451, 47.863, 52.723, 58.0764, 63.9735, 70.4693, 77.6247, 85.5067, 94.189, 103.753, 114.288, 125.893, 138.676, 152.757, 168.267, 185.353, 204.174, 224.905, 247.742, 272.898, 300.608, 331.131, 364.754, 401.791, 442.588, 487.528, 537.032, 591.562, 651.628, 717.794, 790.679, 870.964};



//
// class declaration
//

class HOinPFAlgo : public edm::EDAnalyzer {
   public:
      explicit HOinPFAlgo(const edm::ParameterSet&);
      ~HOinPFAlgo();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() ;
      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;

      virtual void beginRun(edm::Run const&, edm::EventSetup const&);
      virtual void endRun(edm::Run const&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);

  void fillmetarray();

      // ----------member data ---------------------------
  int Nevt;
  bool isMC;
  bool isHistFill;
  std::string theRootFileName;
  int iTag;
  int iTagMET;
  int iTagHO;
  bool ReRECO;
  bool isOnlyDigi;
  double jtptthr;

  edm::ESHandle<HcalDbService> COND;
  const HcalQIEShape* m_shape;
  const HcalQIECoder* m_coder;
  HcalCalibrations calibped;
  //  HcalCalibrationWidths calibwidth;
  float pedestal[netamx][nphimx][ncidmx]; 

  TFile* theFile;

  TTree* T1;

  float misettc[nsetmx], misphitc[nsetmx];
  float misetcalo[nsetmx], misphicalo[nsetmx];
  float misetpf[nsetmx], misphipf[nsetmx], pfmtsign[nsetmx];

  //  float misetpfzz, misphipfzz, pfmtsignzz;

  //All Time profiles
  TH1F* h_hbdigi[4][nhbsigmx];
  TH1F* h_normhbdigi[4][nhbsigmx];

  TH2F* h_calojtptvseta[iTagMx]; 
  TH2F* h_pfjtptvseta[iTagMx]; 

  TH1F* h_hbtime[nhbetamx][nhbphimx][nhbdepthmx];
  TH2F* h_hbentime[nhbetamx][nhbphimx][nhbdepthmx];

  TH2F* h_hbentry[nhbdepthmx];
  TH2F* h_hbsig[nhbdepthmx];
  TH2F* h_hbsig2[nhbdepthmx];

  TH2F* h_metetphi[netajtbin][nlepton][nmettype][nsetmx];
  //  TH2F* h_gapmetetphi[norbitgap][nmettype][nsetmx];

  int irunold;
  int irun, ilumi, nphoton, nmuon, nelec, nprim, ibrnch;
  unsigned ievt;
  static const int nphmx=4;
  float enpho[nphmx], thepho[nphmx], phipho[nphmx], e1by9[nphmx], e9by25[nphmx], hadbyem[nphmx], photrkiso[nphmx], phoemiso[nphmx], phohadiso[nphmx], major[nphmx], minor[nphmx], etaieta[nphmx];
  
  static const int nmumx=10;
  int mundf[nmumx], icomp[nmumx], hitlay[nmumx], hitpat[nmumx]; //, trkqual[nmumx];
  float muonpt[nmumx], muthe[nmumx], muphi[nmumx],  mudrbm[nmumx], mudz[nmumx], muchi[nmumx],  muecal[nmumx], muhcal[nmumx], tkpt03[nmumx], tkpt05[nmumx],  emisol[nmumx], hadiso[nmumx], calcom[nmumx], mupter[nmumx];

  int ehitlay[nmumx], ehitpat[nmumx], eicomp[nmumx], elecndf[nmumx];
  float elecpt[nmumx], electhe[nmumx], elecphi[nmumx], elglbdr[nmumx], elecdrbm[nmumx], condst[nmumx], concot[nmumx], eoverp[nmumx], hovere[nmumx], eemisol[nmumx], ehadiso[nmumx], etkpt03[nmumx], etkpt04[nmumx], eietaeta[nmumx],  elecdz[nmumx], eqovrper[nmumx], elecchi[nmumx],  eedphi[nmumx], eedeta[nmumx];


  static const int njetmx = 100; 
  float misetcalost, misphicalost;
  float misetcalore, misphicalore;
  float misetcalo0a, misphicalo0a;
  float misetcalo1b, misphicalo1b;
  float misetcalo2c, misphicalo2c;
  float misetcalo3d, misphicalo3d;
  float misetcalo4e, misphicalo4e;
  float misetcalo5f, misphicalo5f;
  float misetcalo6g, misphicalo6g;
  float misetcalo7h, misphicalo7h;
  float misetcalo8i, misphicalo8i;
  float misetcalo9j, misphicalo9j;
  float misetcaloak, misphicaloak;
  float misetcalobl, misphicalobl;
  float misetcalocm, misphicalocm;
  float misetcalodn, misphicalodn;
  float misetcaloeo, misphicaloeo;
  float misetcalofp, misphicalofp;
  float misetcalogq, misphicalogq;
  float misetcalohr, misphicalohr;
  float misetcalois, misphicalois;


  float misettcst, misphitcst;
  int ncalojetsst;
  int calojetmulst[njetmx], calojetfhpdst[njetmx];
  float calojetmomst[njetmx], calojetthest[njetmx], calojetphist[njetmx], calojetenst[njetmx], calojetummst[njetmx], calojetemfst[njetmx],  calojethost[njetmx];
  
  float misettcre, misphitcre;
  int ncalojetsre;
  int calojetmulre[njetmx], calojetfhpdre[njetmx];
  float calojetmomre[njetmx], calojetthere[njetmx], calojetphire[njetmx], calojetenre[njetmx], calojetummre[njetmx], calojetemfre[njetmx], calojethore[njetmx];
  
 float misettc0a, misphitc0a;
  int ncalojets0a;
  int calojetmul0a[njetmx], calojetfhpd0a[njetmx];
  float calojetmom0a[njetmx], calojetthe0a[njetmx], calojetphi0a[njetmx], calojeten0a[njetmx], calojetumm0a[njetmx], calojetemf0a[njetmx], calojetho0a[njetmx];

 float misettc1b, misphitc1b;
  int ncalojets1b;
  int calojetmul1b[njetmx], calojetfhpd1b[njetmx];
  float calojetmom1b[njetmx], calojetthe1b[njetmx], calojetphi1b[njetmx], calojeten1b[njetmx], calojetumm1b[njetmx], calojetemf1b[njetmx], calojetho1b[njetmx];

 float misettc2c, misphitc2c;
  int ncalojets2c;
  int calojetmul2c[njetmx], calojetfhpd2c[njetmx];
  float calojetmom2c[njetmx], calojetthe2c[njetmx], calojetphi2c[njetmx], calojeten2c[njetmx], calojetumm2c[njetmx], calojetemf2c[njetmx], calojetho2c[njetmx];

 float misettc3d, misphitc3d;
  int ncalojets3d;
  int calojetmul3d[njetmx], calojetfhpd3d[njetmx];
  float calojetmom3d[njetmx], calojetthe3d[njetmx], calojetphi3d[njetmx], calojeten3d[njetmx], calojetumm3d[njetmx], calojetemf3d[njetmx], calojetho3d[njetmx];

 float misettc4e, misphitc4e;
  int ncalojets4e;
  int calojetmul4e[njetmx], calojetfhpd4e[njetmx];
  float calojetmom4e[njetmx], calojetthe4e[njetmx], calojetphi4e[njetmx], calojeten4e[njetmx], calojetumm4e[njetmx], calojetemf4e[njetmx], calojetho4e[njetmx];

 float misettc5f, misphitc5f;
  int ncalojets5f;
  int calojetmul5f[njetmx], calojetfhpd5f[njetmx];
  float calojetmom5f[njetmx], calojetthe5f[njetmx], calojetphi5f[njetmx], calojeten5f[njetmx], calojetumm5f[njetmx], calojetemf5f[njetmx], calojetho5f[njetmx];


 float misettc6g, misphitc6g;
  int ncalojets6g;
  int calojetmul6g[njetmx], calojetfhpd6g[njetmx];
  float calojetmom6g[njetmx], calojetthe6g[njetmx], calojetphi6g[njetmx], calojeten6g[njetmx], calojetumm6g[njetmx], calojetemf6g[njetmx], calojetho6g[njetmx];

 float misettc7h, misphitc7h;
  int ncalojets7h;
  int calojetmul7h[njetmx], calojetfhpd7h[njetmx];
  float calojetmom7h[njetmx], calojetthe7h[njetmx], calojetphi7h[njetmx], calojeten7h[njetmx], calojetumm7h[njetmx], calojetemf7h[njetmx], calojetho7h[njetmx];

 float misettc8i, misphitc8i;
  int ncalojets8i;
  int calojetmul8i[njetmx], calojetfhpd8i[njetmx];
  float calojetmom8i[njetmx], calojetthe8i[njetmx], calojetphi8i[njetmx], calojeten8i[njetmx], calojetumm8i[njetmx], calojetemf8i[njetmx], calojetho8i[njetmx];

 float misettc9j, misphitc9j;
  int ncalojets9j;
  int calojetmul9j[njetmx], calojetfhpd9j[njetmx];
  float calojetmom9j[njetmx], calojetthe9j[njetmx], calojetphi9j[njetmx], calojeten9j[njetmx], calojetumm9j[njetmx], calojetemf9j[njetmx], calojetho9j[njetmx];

 float misettcak, misphitcak;
  int ncalojetsak;
  int calojetmulak[njetmx], calojetfhpdak[njetmx];
  float calojetmomak[njetmx], calojettheak[njetmx], calojetphiak[njetmx], calojetenak[njetmx], calojetummak[njetmx], calojetemfak[njetmx], calojethoak[njetmx];

 float misettcbl, misphitcbl;
  int ncalojetsbl;
  int calojetmulbl[njetmx], calojetfhpdbl[njetmx];
  float calojetmombl[njetmx], calojetthebl[njetmx], calojetphibl[njetmx], calojetenbl[njetmx], calojetummbl[njetmx], calojetemfbl[njetmx], calojethobl[njetmx];


 float misettccm, misphitccm;
  int ncalojetscm;
  int calojetmulcm[njetmx], calojetfhpdcm[njetmx];
  float calojetmomcm[njetmx], calojetthecm[njetmx], calojetphicm[njetmx], calojetencm[njetmx], calojetummcm[njetmx], calojetemfcm[njetmx], calojethocm[njetmx];


 float misettcdn, misphitcdn;
  int ncalojetsdn;
  int calojetmuldn[njetmx], calojetfhpddn[njetmx];
  float calojetmomdn[njetmx], calojetthedn[njetmx], calojetphidn[njetmx], calojetendn[njetmx], calojetummdn[njetmx], calojetemfdn[njetmx], calojethodn[njetmx];

 float misettceo, misphitceo;
  int ncalojetseo;
  int calojetmuleo[njetmx], calojetfhpdeo[njetmx];
  float calojetmomeo[njetmx], calojettheeo[njetmx], calojetphieo[njetmx], calojeteneo[njetmx], calojetummeo[njetmx], calojetemfeo[njetmx], calojethoeo[njetmx];


 float misettcfp, misphitcfp;
  int ncalojetsfp;
  int calojetmulfp[njetmx], calojetfhpdfp[njetmx];
  float calojetmomfp[njetmx], calojetthefp[njetmx], calojetphifp[njetmx], calojetenfp[njetmx], calojetummfp[njetmx], calojetemffp[njetmx], calojethofp[njetmx];


 float misettcgq, misphitcgq;
  int ncalojetsgq;
  int calojetmulgq[njetmx], calojetfhpdgq[njetmx];
  float calojetmomgq[njetmx], calojetthegq[njetmx], calojetphigq[njetmx], calojetengq[njetmx], calojetummgq[njetmx], calojetemfgq[njetmx], calojethogq[njetmx];

 float misettchr, misphitchr;
  int ncalojetshr;
  int calojetmulhr[njetmx], calojetfhpdhr[njetmx];
  float calojetmomhr[njetmx], calojetthehr[njetmx], calojetphihr[njetmx], calojetenhr[njetmx], calojetummhr[njetmx], calojetemfhr[njetmx], calojethohr[njetmx];

 float misettcis, misphitcis;
  int ncalojetsis;
  int calojetmulis[njetmx], calojetfhpdis[njetmx];
  float calojetmomis[njetmx], calojettheis[njetmx], calojetphiis[njetmx], calojetenis[njetmx], calojetummis[njetmx], calojetemfis[njetmx], calojethois[njetmx];

  int njetsst;
  int jetmulst[njetmx];
  float jetenrst[njetmx], jetuncst[njetmx], jetummst[njetmx], jetmomst[njetmx], jetthest[njetmx], jetphist[njetmx], chghadst[njetmx], neuemfst[njetmx], neuhadst[njetmx];
  
  float misetpfst, misphipfst, pfmtsignst;

  int njetsre;
  int jetmulre[njetmx];
  float jetenrre[njetmx], jetuncre[njetmx], jetummre[njetmx], jetmomre[njetmx], jetthere[njetmx], jetphire[njetmx], chghadre[njetmx], neuemfre[njetmx], neuhadre[njetmx];
  
  float misetpfre, misphipfre, pfmtsignre;

  int njets0a;
  int jetmul0a[njetmx];
  float jetenr0a[njetmx], jetunc0a[njetmx], jetumm0a[njetmx], jetmom0a[njetmx], jetthe0a[njetmx], jetphi0a[njetmx], chghad0a[njetmx], neuemf0a[njetmx], neuhad0a[njetmx];
  
  float misetpf0a, misphipf0a, pfmtsign0a;

  int njets1b;
  int jetmul1b[njetmx];
  float jetenr1b[njetmx], jetunc1b[njetmx], jetumm1b[njetmx], jetmom1b[njetmx], jetthe1b[njetmx], jetphi1b[njetmx], chghad1b[njetmx], neuemf1b[njetmx], neuhad1b[njetmx];
  
  float misetpf1b, misphipf1b, pfmtsign1b;

  int njets2c;
  int jetmul2c[njetmx];
  float jetenr2c[njetmx], jetunc2c[njetmx], jetumm2c[njetmx], jetmom2c[njetmx], jetthe2c[njetmx], jetphi2c[njetmx], chghad2c[njetmx], neuemf2c[njetmx], neuhad2c[njetmx];
  
  float misetpf2c, misphipf2c, pfmtsign2c;

  int njets3d;
  int jetmul3d[njetmx];
  float jetenr3d[njetmx], jetunc3d[njetmx], jetumm3d[njetmx], jetmom3d[njetmx], jetthe3d[njetmx], jetphi3d[njetmx], chghad3d[njetmx], neuemf3d[njetmx], neuhad3d[njetmx];

  float misetpf3d, misphipf3d, pfmtsign3d;

  int njets4e;
  int jetmul4e[njetmx];
  float jetenr4e[njetmx], jetunc4e[njetmx], jetumm4e[njetmx], jetmom4e[njetmx], jetthe4e[njetmx], jetphi4e[njetmx], chghad4e[njetmx], neuemf4e[njetmx], neuhad4e[njetmx];
  
  float misetpf4e, misphipf4e, pfmtsign4e;

  int njets5f;
  int jetmul5f[njetmx];
  float jetenr5f[njetmx], jetunc5f[njetmx], jetumm5f[njetmx], jetmom5f[njetmx], jetthe5f[njetmx], jetphi5f[njetmx], chghad5f[njetmx], neuemf5f[njetmx], neuhad5f[njetmx];
  
  float misetpf5f, misphipf5f, pfmtsign5f;

  int njets6g;
  int jetmul6g[njetmx];
  float jetenr6g[njetmx], jetunc6g[njetmx], jetumm6g[njetmx], jetmom6g[njetmx], jetthe6g[njetmx], jetphi6g[njetmx], chghad6g[njetmx], neuemf6g[njetmx], neuhad6g[njetmx];
  
  float misetpf6g, misphipf6g, pfmtsign6g;


  int njets7h;
  int jetmul7h[njetmx];
  float jetenr7h[njetmx], jetunc7h[njetmx], jetumm7h[njetmx], jetmom7h[njetmx], jetthe7h[njetmx], jetphi7h[njetmx], chghad7h[njetmx], neuemf7h[njetmx], neuhad7h[njetmx];
  
  float misetpf7h, misphipf7h, pfmtsign7h;

  int njets8i;
  int jetmul8i[njetmx];
  float jetenr8i[njetmx], jetunc8i[njetmx], jetumm8i[njetmx], jetmom8i[njetmx], jetthe8i[njetmx], jetphi8i[njetmx], chghad8i[njetmx], neuemf8i[njetmx], neuhad8i[njetmx];
  
  float misetpf8i, misphipf8i, pfmtsign8i;

  int njets9j;
  int jetmul9j[njetmx];
  float jetenr9j[njetmx], jetunc9j[njetmx], jetumm9j[njetmx], jetmom9j[njetmx], jetthe9j[njetmx], jetphi9j[njetmx], chghad9j[njetmx], neuemf9j[njetmx], neuhad9j[njetmx];
  
  float misetpf9j, misphipf9j, pfmtsign9j;

  int njetsak;
  int jetmulak[njetmx];
  float jetenrak[njetmx], jetuncak[njetmx], jetummak[njetmx], jetmomak[njetmx], jettheak[njetmx], jetphiak[njetmx], chghadak[njetmx], neuemfak[njetmx], neuhadak[njetmx];
  
  float misetpfak, misphipfak, pfmtsignak;

  int njetsbl;
  int jetmulbl[njetmx];
  float jetenrbl[njetmx], jetuncbl[njetmx], jetummbl[njetmx], jetmombl[njetmx], jetthebl[njetmx], jetphibl[njetmx], chghadbl[njetmx], neuemfbl[njetmx], neuhadbl[njetmx];
  
  float misetpfbl, misphipfbl, pfmtsignbl;

  int njetscm;
  int jetmulcm[njetmx];
  float jetenrcm[njetmx], jetunccm[njetmx], jetummcm[njetmx], jetmomcm[njetmx], jetthecm[njetmx], jetphicm[njetmx], chghadcm[njetmx], neuemfcm[njetmx], neuhadcm[njetmx];
  
  float misetpfcm, misphipfcm, pfmtsigncm;

  int njetsdn;
  int jetmuldn[njetmx];
  float jetenrdn[njetmx], jetuncdn[njetmx], jetummdn[njetmx], jetmomdn[njetmx], jetthedn[njetmx], jetphidn[njetmx], chghaddn[njetmx], neuemfdn[njetmx], neuhaddn[njetmx];
  
  float misetpfdn, misphipfdn, pfmtsigndn;

  int njetseo;
  int jetmuleo[njetmx];
  float jetenreo[njetmx], jetunceo[njetmx], jetummeo[njetmx], jetmomeo[njetmx], jettheeo[njetmx], jetphieo[njetmx], chghadeo[njetmx], neuemfeo[njetmx], neuhadeo[njetmx];
  
  float misetpfeo, misphipfeo, pfmtsigneo;

  int njetsfp;
  int jetmulfp[njetmx];
  float jetenrfp[njetmx], jetuncfp[njetmx], jetummfp[njetmx], jetmomfp[njetmx], jetthefp[njetmx], jetphifp[njetmx], chghadfp[njetmx], neuemffp[njetmx], neuhadfp[njetmx];
  
  float misetpffp, misphipffp, pfmtsignfp;

  int njetsgq;
  int jetmulgq[njetmx];
  float jetenrgq[njetmx], jetuncgq[njetmx], jetummgq[njetmx], jetmomgq[njetmx], jetthegq[njetmx], jetphigq[njetmx], chghadgq[njetmx], neuemfgq[njetmx], neuhadgq[njetmx];
  
  float misetpfgq, misphipfgq, pfmtsigngq;

  int njetshr;
  int jetmulhr[njetmx];
  float jetenrhr[njetmx], jetunchr[njetmx], jetummhr[njetmx], jetmomhr[njetmx], jetthehr[njetmx], jetphihr[njetmx], chghadhr[njetmx], neuemfhr[njetmx], neuhadhr[njetmx];
  
  float misetpfhr, misphipfhr, pfmtsignhr;


  int njetsis;
  int jetmulis[njetmx];
  float jetenris[njetmx], jetuncis[njetmx], jetummis[njetmx], jetmomis[njetmx], jettheis[njetmx], jetphiis[njetmx], chghadis[njetmx], neuemfis[njetmx], neuhadis[njetmx];
  
  float misetpfis, misphipfis, pfmtsignis;
  
  int ngenlep;
  float genmet, genmetph;

  int ngennujt, ngenjt;
  int  ngenpar[njetmx]; //number of particle with E>1 GeV;
  float genjtmom[njetmx], genjtthe[njetmx], genjtphi[njetmx], genjtde[njetmx];

  int gennujtmul[njetmx];
  float gennujtmom[njetmx], gennujtthe[njetmx], gennujtphi[njetmx], gennujten[njetmx];   
  static const int nhocellmx =300; 
  int nhocell;

  static const int nhbtstmx=25; // Selected 25 (15 bad and 10 good) hb channels for comparison of window
  float hbhetime[nhbtstmx], hbhetime5[nhbtstmx], hbhetot[nhbtstmx], hbhetot5[nhbtstmx];

  float hbhesig0[nhbtstmx],hbhesig1[nhbtstmx],hbhesig2[nhbtstmx],hbhesig3[nhbtstmx],hbhesig4[nhbtstmx],hbhesig5[nhbtstmx],hbhesig6[nhbtstmx],hbhesig7[nhbtstmx], hbhesig8[nhbtstmx], hbhesig9[nhbtstmx];

  float hocellen[nhocellmx], hotime[nhocellmx]; 
  int   hocelleta[nhocellmx], hocellphi[nhocellmx], hocellid[nhocellmx];
  unsigned int hoflag[nhocellmx];

  float hosig0[nhocellmx],hosig1[nhocellmx],hosig2[nhocellmx],hosig3[nhocellmx],hosig4[nhocellmx],hosig5[nhocellmx],hosig6[nhocellmx],hosig7[nhocellmx], hosig8[nhocellmx], hosig9[nhocellmx];

  
  bool iscalojetho;
  bool iscalojeten;
  bool iscalojetumm;
  //  bool isjetenr;
  bool isjetunc;
  bool isjetumm;
  bool ismtsign;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
HOinPFAlgo::HOinPFAlgo(const edm::ParameterSet& pset)

{
   //now do what ever initialization is needed

  edm::Service<TFileService> fs;
  isMC      = pset.getUntrackedParameter<bool>("MonteCarlo", true);
  isHistFill = pset.getUntrackedParameter<bool>("HistFill", true); 
  iTag = pset.getUntrackedParameter<int>("Tagged");
  ReRECO = pset.getUntrackedParameter<bool>("ReRECO", true);
  isOnlyDigi = pset.getUntrackedParameter<bool>("OnlyDIGI", false);

  iTagHO = pset.getUntrackedParameter<int>("HOTagged", 1);
  jtptthr = pset.getUntrackedParameter<double>("Ptcut", 51.0);
  theRootFileName = pset.getUntrackedParameter<string>("RootFileName");
  
  if (iTag>iTagMx-2) iTag = iTagMx-2;
  iTagMET = iTag;

  iscalojetho=false;
  iscalojeten=false; 
  iscalojetumm=false; 
  //  isjetenr=false; 
  isjetunc=false; 
  isjetumm=false; 
  ismtsign=false;
  
  theFile = new TFile(theRootFileName.c_str(), "RECREATE");
  theFile->cd();
  
  T1 = new TTree("T1", "HOinPF"); 
  
  T1->Branch("irun", &irun, "irun/I");  
  T1->Branch("ilumi", &ilumi, "ilumi/I");  
 
  T1->Branch("ievt", &ievt, "ievt/i");
  T1->Branch("nprim", &nprim, "nprim/I");
 
  T1->Branch("nmuon", &nmuon, "nmuon/I"); 
  T1->Branch("muonpt", muonpt,"muonpt[nmuon]/F");
  T1->Branch("muthe", muthe,"muthe[nmuon]/F");
  T1->Branch("muphi", muphi,"muphi[nmuon]/F");
  T1->Branch("mudrbm", mudrbm,"mudrbm[nmuon]/F");
  T1->Branch("mudz", mudz,"mudz[nmuon]/F");
  T1->Branch("mupter", mupter,"mupter[nmuon]/F");
  T1->Branch("muchi", muchi,"muchi[nmuon]/F");
  T1->Branch("mundf", mundf,"mundf[nmuon]/I");
  T1->Branch("hitlay", hitlay,"hitlay[nmuon]/I");
  T1->Branch("hitpat", hitpat,"hitpat[nmuon]/I");
  T1->Branch("muecal", muecal,"muecal[nmuon]/F");
  T1->Branch("muhcal", muhcal,"muhcal[nmuon]/F");
  T1->Branch("emisol", emisol,"emisol[nmuon]/F");
  T1->Branch("hadiso", hadiso,"hadiso[nmuon]/F");
  T1->Branch("tkpt03", tkpt03,"tkpt03[nmuon]/F");
  T1->Branch("tkpt05", tkpt05,"tkpt05[nmuon]/F");
  T1->Branch("calcom", calcom,"calcom[nmuon]/F");
  T1->Branch("icomp", icomp,"icomp[nmuon]/I");
  

  T1->Branch("nelec", &nelec, "nelec/I");
//  T1->Branch("ehitlay", ehitlay, "ehitlay[nelec]/I");
  T1->Branch("ehitpat", ehitpat, "ehitpat[nelec]/I");
  T1->Branch("eicomp", eicomp, "eicomp[nelec]/I");
  T1->Branch("elecpt", elecpt, "elecpt[nelec]/F");
  T1->Branch("electhe", electhe, "electhe[nelec]/F");
  T1->Branch("elecphi", elecphi, "elecphi[nelec]/F");
  T1->Branch("elglbdr", elglbdr, "elglbdr[nelec]/F");
  T1->Branch("elecdrbm", elecdrbm, "elecdrbm[nelec]/F");
  T1->Branch("elecdz", elecdz, "elecdz[nelec]/F");
  T1->Branch("eqovrper", eqovrper, "eqovrper[nelec]/F");
  T1->Branch("elecchi", elecchi, "elecchi[nelec]/F");
  T1->Branch("elecndf", elecndf, "elecndf[nelec]/I");
  T1->Branch("eedphi", eedphi, "eedphi[nelec]/F");
  T1->Branch("eedeta", eedeta, "eedeta[nelec]/F");
  T1->Branch("condst", condst, "condst[nelec]/F");
  T1->Branch("concot", concot, "concot[nelec]/F");
  T1->Branch("eoverp", eoverp, "eoverp[nelec]/F");
  T1->Branch("hovere", hovere, "hovere[nelec]/F");
  T1->Branch("eemisol", eemisol, "eemisol[nelec]/F");
  T1->Branch("ehadiso", ehadiso, "ehadiso[nelec]/F");
  T1->Branch("etkpt03", etkpt03, "etkpt03[nelec]/F");
  T1->Branch("etkpt04", etkpt04, "etkpt04[nelec]/F");
  T1->Branch("eietaeta", eietaeta, "eietaeta[nelec]/F");

  T1->Branch("nphoton", &nphoton, "nphoton/I");  
  T1->Branch("enpho",enpho,"enpho[nphoton]/F"); 
  T1->Branch("thepho",thepho,"thepho[nphoton]/F"); 
  T1->Branch("phipho",phipho,"phipho[nphoton]/F"); 
  T1->Branch("e1by9",e1by9,"e1by9[nphoton]/F"); 
  T1->Branch("e9by25",e9by25,"e9by25[nphoton]/F"); 
  T1->Branch("hadbyem",hadbyem,"hadbyem[nphoton]/F"); 
  T1->Branch("photrkiso",photrkiso,"photrkiso[nphoton]/F"); 
  T1->Branch("phoemiso",phoemiso,"phoemiso[nphoton]/F"); 
  T1->Branch("phohadiso",phohadiso,"phohadiso[nphoton]/F"); 
  T1->Branch("etaieta",etaieta,"etaieta[nphoton]/F"); 

  T1->Branch("misetcalost",&misetcalost,"misetcalost/F"); 
  T1->Branch("misphicalost",&misphicalost,"misphicalost/F");

  if (ReRECO) {
    T1->Branch("misetcalore",&misetcalore,"misetcalore/F"); 
    T1->Branch("misphicalore",&misphicalore,"misphicalore/F");
    
    T1->Branch("misetcalo0a",&misetcalo0a,"misetcalo0a/F"); 
    T1->Branch("misphicalo0a",&misphicalo0a,"misphicalo0a/F");
  }
  
  if (!isOnlyDigi) { 
    T1->Branch("misettcst",&misettcst,"misettcst/F"); 
    T1->Branch("misphitcst",&misphitcst,"misphitcst/F");
    
    T1->Branch("ncalojetsst", &ncalojetsst, "ncalojetsst/I"); 
    T1->Branch("calojetmulst",calojetmulst,"calojetmulst[ncalojetsst]/I");
    T1->Branch("calojetfhpdst",calojetfhpdst,"calojetfhpdst[ncalojetsst]/I");
    T1->Branch("calojetmomst",calojetmomst,"calojetmomst[ncalojetsst]/F");
    T1->Branch("calojetthest",calojetthest,"calojetthest[ncalojetsst]/F");
    T1->Branch("calojetphist",calojetphist,"calojetphist[ncalojetsst]/F");
    if (iscalojeten) T1->Branch("calojetenst",calojetenst,"calojetenst[ncalojetsst]/F");
    if (iscalojetumm) T1->Branch("calojetummst",calojetummst,"calojetummst[ncalojetsst]/F");
    T1->Branch("calojetemfst",calojetemfst,"calojetemfst[ncalojetsst]/F");
    if (iscalojetho && iTagHO==0) T1->Branch("calojethost",calojethost,"calojethost[ncalojetsst]/F");
  }

  if (ReRECO) {
    
    T1->Branch("misettcre",&misettcre,"misettcre/F"); 
    T1->Branch("misphitcre",&misphitcre,"misphitcre/F");
    
    T1->Branch("ncalojetsre", &ncalojetsre, "ncalojetsre/I"); 
    T1->Branch("calojetmulre",calojetmulre,"calojetmulre[ncalojetsre]/I");
    //  T1->Branch("calojetfhpdre",calojetfhpdre,"calojetfhpdre[ncalojetsre]/I");
    T1->Branch("calojetmomre",calojetmomre,"calojetmomre[ncalojetsre]/F");
    T1->Branch("calojetthere",calojetthere,"calojetthere[ncalojetsre]/F");
    T1->Branch("calojetphire",calojetphire,"calojetphire[ncalojetsre]/F");
    if (iscalojeten) T1->Branch("calojetenre",calojetenre,"calojetenre[ncalojetsre]/F");
    if (iscalojetumm) T1->Branch("calojetummre",calojetummre,"calojetummre[ncalojetsre]/F");
    T1->Branch("calojetemfre",calojetemfre,"calojetemfre[ncalojetsre]/F");
    if (iscalojetho && iTagHO==0) T1->Branch("calojethore",calojethore,"calojethore[ncalojetsre]/F");
    
    T1->Branch("misettc0a",&misettc0a,"misettc0a/F"); 
    T1->Branch("misphitc0a",&misphitc0a,"misphitc0a/F");
    
    T1->Branch("ncalojets0a", &ncalojets0a, "ncalojets0a/I"); 
    T1->Branch("calojetmul0a",calojetmul0a,"calojetmul0a[ncalojets0a]/I");
    //  T1->Branch("calojetfhpd0a",calojetfhpd0a,"calojetfhpd0a[ncalojets0a]/I");
    T1->Branch("calojetmom0a",calojetmom0a,"calojetmom0a[ncalojets0a]/F");
    T1->Branch("calojetthe0a",calojetthe0a,"calojetthe0a[ncalojets0a]/F");
    T1->Branch("calojetphi0a",calojetphi0a,"calojetphi0a[ncalojets0a]/F");
    if (iscalojeten) T1->Branch("calojeten0a",calojeten0a,"calojeten0a[ncalojets0a]/F");
    if (iscalojetumm) T1->Branch("calojetumm0a",calojetumm0a,"calojetumm0a[ncalojets0a]/F");
    T1->Branch("calojetemf0a",calojetemf0a,"calojetemf0a[ncalojets0a]/F");
    if (iscalojetho && iTagHO==0) T1->Branch("calojetho0a",calojetho0a,"calojetho0a[ncalojets0a]/F");
    
    if (iTag>1) {
      T1->Branch("misetcalo1b",&misetcalo1b,"misetcalo1b/F"); 
      T1->Branch("misphicalo1b",&misphicalo1b,"misphicalo1b/F");
      
      T1->Branch("misettc1b",&misettc1b,"misettc1b/F"); 
      T1->Branch("misphitc1b",&misphitc1b,"misphitc1b/F");
      
      T1->Branch("ncalojets1b", &ncalojets1b, "ncalojets1b/I"); 
      T1->Branch("calojetmul1b",calojetmul1b,"calojetmul1b[ncalojets1b]/I");
      //    T1->Branch("calojetfhpd1b",calojetfhpd1b,"calojetfhpd1b[ncalojets1b]/I");
      T1->Branch("calojetmom1b",calojetmom1b,"calojetmom1b[ncalojets1b]/F");
      T1->Branch("calojetthe1b",calojetthe1b,"calojetthe1b[ncalojets1b]/F");
      T1->Branch("calojetphi1b",calojetphi1b,"calojetphi1b[ncalojets1b]/F");
      if (iscalojeten) T1->Branch("calojeten1b",calojeten1b,"calojeten1b[ncalojets1b]/F");
      if (iscalojetumm) T1->Branch("calojetumm1b",calojetumm1b,"calojetumm1b[ncalojets1b]/F");
      T1->Branch("calojetemf1b",calojetemf1b,"calojetemf1b[ncalojets1b]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho1b",calojetho1b,"calojetho1b[ncalojets1b]/F");
    }
    
    if (iTag>2) {
      T1->Branch("misetcalo2c",&misetcalo2c,"misetcalo2c/F"); 
      T1->Branch("misphicalo2c",&misphicalo2c,"misphicalo2c/F");
      
      T1->Branch("misettc2c",&misettc2c,"misettc2c/F"); 
      T1->Branch("misphitc2c",&misphitc2c,"misphitc2c/F");
      
      T1->Branch("ncalojets2c", &ncalojets2c, "ncalojets2c/I"); 
      T1->Branch("calojetmul2c",calojetmul2c,"calojetmul2c[ncalojets2c]/I");
      //    T1->Branch("calojetfhpd2c",calojetfhpd2c,"calojetfhpd2c[ncalojets2c]/I");
      T1->Branch("calojetmom2c",calojetmom2c,"calojetmom2c[ncalojets2c]/F");
      T1->Branch("calojetthe2c",calojetthe2c,"calojetthe2c[ncalojets2c]/F");
      T1->Branch("calojetphi2c",calojetphi2c,"calojetphi2c[ncalojets2c]/F");
      if (iscalojeten) T1->Branch("calojeten2c",calojeten2c,"calojeten2c[ncalojets2c]/F");
      if (iscalojetumm) T1->Branch("calojetumm2c",calojetumm2c,"calojetumm2c[ncalojets2c]/F");
      T1->Branch("calojetemf2c",calojetemf2c,"calojetemf2c[ncalojets2c]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho2c",calojetho2c,"calojetho2c[ncalojets2c]/F");
    }
    
    if (iTag>3) {
      T1->Branch("misetcalo3d",&misetcalo3d,"misetcalo3d/F"); 
      T1->Branch("misphicalo3d",&misphicalo3d,"misphicalo3d/F");
      
      T1->Branch("misettc3d",&misettc3d,"misettc3d/F"); 
      T1->Branch("misphitc3d",&misphitc3d,"misphitc3d/F");
      
      T1->Branch("ncalojets3d", &ncalojets3d, "ncalojets3d/I"); 
      T1->Branch("calojetmul3d",calojetmul3d,"calojetmul3d[ncalojets3d]/I");
      //    T1->Branch("calojetfhpd3d",calojetfhpd3d,"calojetfhpd3d[ncalojets3d]/I");
      T1->Branch("calojetmom3d",calojetmom3d,"calojetmom3d[ncalojets3d]/F");
      T1->Branch("calojetthe3d",calojetthe3d,"calojetthe3d[ncalojets3d]/F");
      T1->Branch("calojetphi3d",calojetphi3d,"calojetphi3d[ncalojets3d]/F");
      if (iscalojeten) T1->Branch("calojeten3d",calojeten3d,"calojeten3d[ncalojets3d]/F");
      if (iscalojetumm) T1->Branch("calojetumm3d",calojetumm3d,"calojetumm3d[ncalojets3d]/F");
      T1->Branch("calojetemf3d",calojetemf3d,"calojetemf3d[ncalojets3d]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho3d",calojetho3d,"calojetho3d[ncalojets3d]/F");
    }
    
    if (iTag>4) {
      T1->Branch("misetcalo4e",&misetcalo4e,"misetcalo4e/F"); 
      T1->Branch("misphicalo4e",&misphicalo4e,"misphicalo4e/F");
      
      T1->Branch("misettc4e",&misettc4e,"misettc4e/F"); 
      T1->Branch("misphitc4e",&misphitc4e,"misphitc4e/F");
      
      T1->Branch("ncalojets4e", &ncalojets4e, "ncalojets4e/I"); 
      T1->Branch("calojetmul4e",calojetmul4e,"calojetmul4e[ncalojets4e]/I");
      //    T1->Branch("calojetfhpd4e",calojetfhpd4e,"calojetfhpd4e[ncalojets4e]/I");
      T1->Branch("calojetmom4e",calojetmom4e,"calojetmom4e[ncalojets4e]/F");
      T1->Branch("calojetthe4e",calojetthe4e,"calojetthe4e[ncalojets4e]/F");
      T1->Branch("calojetphi4e",calojetphi4e,"calojetphi4e[ncalojets4e]/F");
      if (iscalojeten) T1->Branch("calojeten4e",calojeten4e,"calojeten4e[ncalojets4e]/F");
      if (iscalojetumm) T1->Branch("calojetumm4e",calojetumm4e,"calojetumm4e[ncalojets4e]/F");
      T1->Branch("calojetemf4e",calojetemf4e,"calojetemf4e[ncalojets4e]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho4e",calojetho4e,"calojetho4e[ncalojets4e]/F");
    }
    
    if (iTag>5) {
      T1->Branch("misetcalo5f",&misetcalo5f,"misetcalo5f/F"); 
      T1->Branch("misphicalo5f",&misphicalo5f,"misphicalo5f/F");
      
      T1->Branch("misettc5f",&misettc5f,"misettc5f/F"); 
      T1->Branch("misphitc5f",&misphitc5f,"misphitc5f/F");
      
      T1->Branch("ncalojets5f", &ncalojets5f, "ncalojets5f/I"); 
      T1->Branch("calojetmul5f",calojetmul5f,"calojetmul5f[ncalojets5f]/I");
      //    T1->Branch("calojetfhpd5f",calojetfhpd5f,"calojetfhpd5f[ncalojets5f]/I");
      T1->Branch("calojetmom5f",calojetmom5f,"calojetmom5f[ncalojets5f]/F");
      T1->Branch("calojetthe5f",calojetthe5f,"calojetthe5f[ncalojets5f]/F");
      T1->Branch("calojetphi5f",calojetphi5f,"calojetphi5f[ncalojets5f]/F");
      if (iscalojeten) T1->Branch("calojeten5f",calojeten5f,"calojeten5f[ncalojets5f]/F");
      if (iscalojetumm) T1->Branch("calojetumm5f",calojetumm5f,"calojetumm5f[ncalojets5f]/F");
      T1->Branch("calojetemf5f",calojetemf5f,"calojetemf5f[ncalojets5f]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho5f",calojetho5f,"calojetho5f[ncalojets5f]/F");
    }
    
    if (iTag>6) {
      
      T1->Branch("misetcalo6g",&misetcalo6g,"misetcalo6g/F"); 
      T1->Branch("misphicalo6g",&misphicalo6g,"misphicalo6g/F");
      
      T1->Branch("misettc6g",&misettc6g,"misettc6g/F"); 
      T1->Branch("misphitc6g",&misphitc6g,"misphitc6g/F");
      
      T1->Branch("ncalojets6g", &ncalojets6g, "ncalojets6g/I"); 
      T1->Branch("calojetmul6g",calojetmul6g,"calojetmul6g[ncalojets6g]/I");
      //    T1->Branch("calojetfhpd6g",calojetfhpd6g,"calojetfhpd6g[ncalojets6g]/I");
      T1->Branch("calojetmom6g",calojetmom6g,"calojetmom6g[ncalojets6g]/F");
      T1->Branch("calojetthe6g",calojetthe6g,"calojetthe6g[ncalojets6g]/F");
      T1->Branch("calojetphi6g",calojetphi6g,"calojetphi6g[ncalojets6g]/F");
      if (iscalojeten) T1->Branch("calojeten6g",calojeten6g,"calojeten6g[ncalojets6g]/F");
      if (iscalojetumm) T1->Branch("calojetumm6g",calojetumm6g,"calojetumm6g[ncalojets6g]/F");
      T1->Branch("calojetemf6g",calojetemf6g,"calojetemf6g[ncalojets6g]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho6g",calojetho6g,"calojetho6g[ncalojets6g]/F");
    }
    
    if (iTag>7) {
      T1->Branch("misetcalo7h",&misetcalo7h,"misetcalo7h/F"); 
      T1->Branch("misphicalo7h",&misphicalo7h,"misphicalo7h/F");
      
      T1->Branch("misettc7h",&misettc7h,"misettc7h/F"); 
      T1->Branch("misphitc7h",&misphitc7h,"misphitc7h/F");
      
      T1->Branch("ncalojets7h", &ncalojets7h, "ncalojets7h/I"); 
      T1->Branch("calojetmul7h",calojetmul7h,"calojetmul7h[ncalojets7h]/I");
      //    T1->Branch("calojetfhpd7h",calojetfhpd7h,"calojetfhpd7h[ncalojets7h]/I");
      T1->Branch("calojetmom7h",calojetmom7h,"calojetmom7h[ncalojets7h]/F");
      T1->Branch("calojetthe7h",calojetthe7h,"calojetthe7h[ncalojets7h]/F");
      T1->Branch("calojetphi7h",calojetphi7h,"calojetphi7h[ncalojets7h]/F");
      if (iscalojeten) T1->Branch("calojeten7h",calojeten7h,"calojeten7h[ncalojets7h]/F");
      if (iscalojetumm) T1->Branch("calojetumm7h",calojetumm7h,"calojetumm7h[ncalojets7h]/F");
      T1->Branch("calojetemf7h",calojetemf7h,"calojetemf7h[ncalojets7h]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho7h",calojetho7h,"calojetho7h[ncalojets7h]/F");
    }
    if (iTag>8) {
      T1->Branch("misetcalo8i",&misetcalo8i,"misetcalo8i/F"); 
      T1->Branch("misphicalo8i",&misphicalo8i,"misphicalo8i/F");
      
      T1->Branch("misettc8i",&misettc8i,"misettc8i/F"); 
      T1->Branch("misphitc8i",&misphitc8i,"misphitc8i/F");
      
      T1->Branch("ncalojets8i", &ncalojets8i, "ncalojets8i/I"); 
      T1->Branch("calojetmul8i",calojetmul8i,"calojetmul8i[ncalojets8i]/I");
      //    T1->Branch("calojetfhpd8i",calojetfhpd8i,"calojetfhpd8i[ncalojets8i]/I");
      T1->Branch("calojetmom8i",calojetmom8i,"calojetmom8i[ncalojets8i]/F");
      T1->Branch("calojetthe8i",calojetthe8i,"calojetthe8i[ncalojets8i]/F");
      T1->Branch("calojetphi8i",calojetphi8i,"calojetphi8i[ncalojets8i]/F");
      if (iscalojeten) T1->Branch("calojeten8i",calojeten8i,"calojeten8i[ncalojets8i]/F");
      if (iscalojetumm) T1->Branch("calojetumm8i",calojetumm8i,"calojetumm8i[ncalojets8i]/F");
      T1->Branch("calojetemf8i",calojetemf8i,"calojetemf8i[ncalojets8i]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho8i",calojetho8i,"calojetho8i[ncalojets8i]/F");
    }
    
    if (iTag>9) {
      T1->Branch("misetcalo9j",&misetcalo9j,"misetcalo9j/F"); 
      T1->Branch("misphicalo9j",&misphicalo9j,"misphicalo9j/F");
      
      T1->Branch("misettc9j",&misettc9j,"misettc9j/F"); 
      T1->Branch("misphitc9j",&misphitc9j,"misphitc9j/F");
      
      T1->Branch("ncalojets9j", &ncalojets9j, "ncalojets9j/I"); 
      T1->Branch("calojetmul9j",calojetmul9j,"calojetmul9j[ncalojets9j]/I");
      //    T1->Branch("calojetfhpd9j",calojetfhpd9j,"calojetfhpd9j[ncalojets9j]/I");
      T1->Branch("calojetmom9j",calojetmom9j,"calojetmom9j[ncalojets9j]/F");
      T1->Branch("calojetthe9j",calojetthe9j,"calojetthe9j[ncalojets9j]/F");
      T1->Branch("calojetphi9j",calojetphi9j,"calojetphi9j[ncalojets9j]/F");
      if (iscalojeten) T1->Branch("calojeten9j",calojeten9j,"calojeten9j[ncalojets9j]/F");
      if (iscalojetumm) T1->Branch("calojetumm9j",calojetumm9j,"calojetumm9j[ncalojets9j]/F");
      T1->Branch("calojetemf9j",calojetemf9j,"calojetemf9j[ncalojets9j]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojetho9j",calojetho9j,"calojetho9j[ncalojets9j]/F");
    }
    
    if (iTag>10) {
      T1->Branch("misetcaloak",&misetcaloak,"misetcaloak/F"); 
      T1->Branch("misphicaloak",&misphicaloak,"misphicaloak/F");
      
      T1->Branch("misettcak",&misettcak,"misettcak/F"); 
      T1->Branch("misphitcak",&misphitcak,"misphitcak/F");
      
      T1->Branch("ncalojetsak", &ncalojetsak, "ncalojetsak/I"); 
      T1->Branch("calojetmulak",calojetmulak,"calojetmulak[ncalojetsak]/I");
      //    T1->Branch("calojetfhpdak",calojetfhpdak,"calojetfhpdak[ncalojetsak]/I");
      T1->Branch("calojetmomak",calojetmomak,"calojetmomak[ncalojetsak]/F");
      T1->Branch("calojettheak",calojettheak,"calojettheak[ncalojetsak]/F");
      T1->Branch("calojetphiak",calojetphiak,"calojetphiak[ncalojetsak]/F");
      if (iscalojeten) T1->Branch("calojetenak",calojetenak,"calojetenak[ncalojetsak]/F");
      if (iscalojetumm) T1->Branch("calojetummak",calojetummak,"calojetummak[ncalojetsak]/F");
      T1->Branch("calojetemfak",calojetemfak,"calojetemfak[ncalojetsak]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethoak",calojethoak,"calojethoak[ncalojetsak]/F");
    }
    
    if (iTag>11) {
      T1->Branch("misetcalobl",&misetcalobl,"misetcalobl/F"); 
      T1->Branch("misphicalobl",&misphicalobl,"misphicalobl/F");
      
      T1->Branch("misettcbl",&misettcbl,"misettcbl/F"); 
      T1->Branch("misphitcbl",&misphitcbl,"misphitcbl/F");
      
      T1->Branch("ncalojetsbl", &ncalojetsbl, "ncalojetsbl/I"); 
      T1->Branch("calojetmulbl",calojetmulbl,"calojetmulbl[ncalojetsbl]/I");
      //    T1->Branch("calojetfhpdbl",calojetfhpdbl,"calojetfhpdbl[ncalojetsbl]/I");
      T1->Branch("calojetmombl",calojetmombl,"calojetmombl[ncalojetsbl]/F");
      T1->Branch("calojetthebl",calojetthebl,"calojetthebl[ncalojetsbl]/F");
      T1->Branch("calojetphibl",calojetphibl,"calojetphibl[ncalojetsbl]/F");
      if (iscalojeten) T1->Branch("calojetenbl",calojetenbl,"calojetenbl[ncalojetsbl]/F");
      if (iscalojetumm) T1->Branch("calojetummbl",calojetummbl,"calojetummbl[ncalojetsbl]/F");
      T1->Branch("calojetemfbl",calojetemfbl,"calojetemfbl[ncalojetsbl]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethobl",calojethobl,"calojethobl[ncalojetsbl]/F");
    }
    
    if (iTag>12) {
      T1->Branch("misetcalocm",&misetcalocm,"misetcalocm/F"); 
      T1->Branch("misphicalocm",&misphicalocm,"misphicalocm/F");
      
      T1->Branch("misettccm",&misettccm,"misettccm/F"); 
      T1->Branch("misphitccm",&misphitccm,"misphitccm/F");
      
      T1->Branch("ncalojetscm", &ncalojetscm, "ncalojetscm/I"); 
      T1->Branch("calojetmulcm",calojetmulcm,"calojetmulcm[ncalojetscm]/I");
      //    T1->Branch("calojetfhpdcm",calojetfhpdcm,"calojetfhpdcm[ncalojetscm]/I");
      T1->Branch("calojetmomcm",calojetmomcm,"calojetmomcm[ncalojetscm]/F");
      T1->Branch("calojetthecm",calojetthecm,"calojetthecm[ncalojetscm]/F");
      T1->Branch("calojetphicm",calojetphicm,"calojetphicm[ncalojetscm]/F");
      if (iscalojeten) T1->Branch("calojetencm",calojetencm,"calojetencm[ncalojetscm]/F");
      if (iscalojetumm) T1->Branch("calojetummcm",calojetummcm,"calojetummcm[ncalojetscm]/F");
      T1->Branch("calojetemfcm",calojetemfcm,"calojetemfcm[ncalojetscm]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethocm",calojethocm,"calojethocm[ncalojetscm]/F");
    }
    
    if (iTag>13) {
      T1->Branch("misetcalodn",&misetcalodn,"misetcalodn/F"); 
      T1->Branch("misphicalodn",&misphicalodn,"misphicalodn/F");
      
      T1->Branch("misettcdn",&misettcdn,"misettcdn/F"); 
      T1->Branch("misphitcdn",&misphitcdn,"misphitcdn/F");
      
      T1->Branch("ncalojetsdn", &ncalojetsdn, "ncalojetsdn/I"); 
      T1->Branch("calojetmuldn",calojetmuldn,"calojetmuldn[ncalojetsdn]/I");
      //    T1->Branch("calojetfhpddn",calojetfhpddn,"calojetfhpddn[ncalojetsdn]/I");
      T1->Branch("calojetmomdn",calojetmomdn,"calojetmomdn[ncalojetsdn]/F");
      T1->Branch("calojetthedn",calojetthedn,"calojetthedn[ncalojetsdn]/F");
      T1->Branch("calojetphidn",calojetphidn,"calojetphidn[ncalojetsdn]/F");
      if (iscalojeten) T1->Branch("calojetendn",calojetendn,"calojetendn[ncalojetsdn]/F");
      if (iscalojetumm) T1->Branch("calojetummdn",calojetummdn,"calojetummdn[ncalojetsdn]/F");
      T1->Branch("calojetemfdn",calojetemfdn,"calojetemfdn[ncalojetsdn]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethodn",calojethodn,"calojethodn[ncalojetsdn]/F");
    }
    if (iTag>14) {
      T1->Branch("misetcaloeo",&misetcaloeo,"misetcaloeo/F"); 
      T1->Branch("misphicaloeo",&misphicaloeo,"misphicaloeo/F");
      T1->Branch("misettceo",&misettceo,"misettceo/F"); 
      T1->Branch("misphitceo",&misphitceo,"misphitceo/F");
      
      T1->Branch("ncalojetseo", &ncalojetseo, "ncalojetseo/I"); 
      T1->Branch("calojetmuleo",calojetmuleo,"calojetmuleo[ncalojetseo]/I");
      //    T1->Branch("calojetfhpdeo",calojetfhpdeo,"calojetfhpdeo[ncalojetseo]/I");
      T1->Branch("calojetmomeo",calojetmomeo,"calojetmomeo[ncalojetseo]/F");
      T1->Branch("calojettheeo",calojettheeo,"calojettheeo[ncalojetseo]/F");
      T1->Branch("calojetphieo",calojetphieo,"calojetphieo[ncalojetseo]/F");
      if (iscalojeten) T1->Branch("calojeteneo",calojeteneo,"calojeteneo[ncalojetseo]/F");
      if (iscalojetumm) T1->Branch("calojetummeo",calojetummeo,"calojetummeo[ncalojetseo]/F");
      T1->Branch("calojetemfeo",calojetemfeo,"calojetemfeo[ncalojetseo]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethoeo",calojethoeo,"calojethoeo[ncalojetseo]/F");
    }
    
    if (iTag>15) {
      T1->Branch("misetcalofp",&misetcalofp,"misetcalofp/F"); 
      T1->Branch("misphicalofp",&misphicalofp,"misphicalofp/F");
      T1->Branch("misettcfp",&misettcfp,"misettcfp/F"); 
      T1->Branch("misphitcfp",&misphitcfp,"misphitcfp/F");
      
      T1->Branch("ncalojetsfp", &ncalojetsfp, "ncalojetsfp/I"); 
      T1->Branch("calojetmulfp",calojetmulfp,"calojetmulfp[ncalojetsfp]/I");
      //    T1->Branch("calojetfhpdfp",calojetfhpdfp,"calojetfhpdfp[ncalojetsfp]/I");
      T1->Branch("calojetmomfp",calojetmomfp,"calojetmomfp[ncalojetsfp]/F");
      T1->Branch("calojetthefp",calojetthefp,"calojetthefp[ncalojetsfp]/F");
      T1->Branch("calojetphifp",calojetphifp,"calojetphifp[ncalojetsfp]/F");
      if (iscalojeten) T1->Branch("calojetenfp",calojetenfp,"calojetenfp[ncalojetsfp]/F");
      if (iscalojetumm) T1->Branch("calojetummfp",calojetummfp,"calojetummfp[ncalojetsfp]/F");
      T1->Branch("calojetemffp",calojetemffp,"calojetemffp[ncalojetsfp]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethofp",calojethofp,"calojethofp[ncalojetsfp]/F");
    }
    
    if (iTag>16) {
      T1->Branch("misetcalogq",&misetcalogq,"misetcalogq/F"); 
      T1->Branch("misphicalogq",&misphicalogq,"misphicalogq/F");
      T1->Branch("misettcgq",&misettcgq,"misettcgq/F"); 
      T1->Branch("misphitcgq",&misphitcgq,"misphitcgq/F");
      
      T1->Branch("ncalojetsgq", &ncalojetsgq, "ncalojetsgq/I"); 
      T1->Branch("calojetmulgq",calojetmulgq,"calojetmulgq[ncalojetsgq]/I");
      //    T1->Branch("calojetfhpdgq",calojetfhpdgq,"calojetfhpdgq[ncalojetsgq]/I");
      T1->Branch("calojetmomgq",calojetmomgq,"calojetmomgq[ncalojetsgq]/F");
      T1->Branch("calojetthegq",calojetthegq,"calojetthegq[ncalojetsgq]/F");
      T1->Branch("calojetphigq",calojetphigq,"calojetphigq[ncalojetsgq]/F");
      if (iscalojeten) T1->Branch("calojetengq",calojetengq,"calojetengq[ncalojetsgq]/F");
      if (iscalojetumm) T1->Branch("calojetummgq",calojetummgq,"calojetummgq[ncalojetsgq]/F");
      T1->Branch("calojetemfgq",calojetemfgq,"calojetemfgq[ncalojetsgq]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethogq",calojethogq,"calojethogq[ncalojetsgq]/F");
    }
    
    if (iTag>17) {
      T1->Branch("misetcalohr",&misetcalohr,"misetcalohr/F"); 
      T1->Branch("misphicalohr",&misphicalohr,"misphicalohr/F");
      T1->Branch("misettchr",&misettchr,"misettchr/F"); 
      T1->Branch("misphitchr",&misphitchr,"misphitchr/F");
      
      T1->Branch("ncalojetshr", &ncalojetshr, "ncalojetshr/I"); 
      T1->Branch("calojetmulhr",calojetmulhr,"calojetmulhr[ncalojetshr]/I");
      //    T1->Branch("calojetfhpdhr",calojetfhpdhr,"calojetfhpdhr[ncalojetshr]/I");
      T1->Branch("calojetmomhr",calojetmomhr,"calojetmomhr[ncalojetshr]/F");
      T1->Branch("calojetthehr",calojetthehr,"calojetthehr[ncalojetshr]/F");
      T1->Branch("calojetphihr",calojetphihr,"calojetphihr[ncalojetshr]/F");
      if (iscalojeten) T1->Branch("calojetenhr",calojetenhr,"calojetenhr[ncalojetshr]/F");
      if (iscalojetumm) T1->Branch("calojetummhr",calojetummhr,"calojetummhr[ncalojetshr]/F");
      T1->Branch("calojetemfhr",calojetemfhr,"calojetemfhr[ncalojetshr]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethohr",calojethohr,"calojethohr[ncalojetshr]/F");
    }
    
    if (iTag>18) {
      T1->Branch("misetcalois",&misetcalois,"misetcalois/F"); 
      T1->Branch("misphicalois",&misphicalois,"misphicalois/F");
      T1->Branch("misettcis",&misettcis,"misettcis/F"); 
      T1->Branch("misphitcis",&misphitcis,"misphitcis/F");
      
      T1->Branch("ncalojetsis", &ncalojetsis, "ncalojetsis/I"); 
      T1->Branch("calojetmulis",calojetmulis,"calojetmulis[ncalojetsis]/I");
      //    T1->Branch("calojetfhpdis",calojetfhpdis,"calojetfhpdis[ncalojetsis]/I");
      T1->Branch("calojetmomis",calojetmomis,"calojetmomis[ncalojetsis]/F");
      T1->Branch("calojettheis",calojettheis,"calojettheis[ncalojetsis]/F");
      T1->Branch("calojetphiis",calojetphiis,"calojetphiis[ncalojetsis]/F");
      if (iscalojeten) T1->Branch("calojetenis",calojetenis,"calojetenis[ncalojetsis]/F");
      if (iscalojetumm) T1->Branch("calojetummis",calojetummis,"calojetummis[ncalojetsis]/F");
      T1->Branch("calojetemfis",calojetemfis,"calojetemfis[ncalojetsis]/F");
      if (iscalojetho && iTagHO==0) T1->Branch("calojethois",calojethois,"calojethois[ncalojetsis]/F");
    }
  }

    
  if (!isOnlyDigi) { 
    T1->Branch("misetpfst",&misetpfst,"misetpfst/F"); 
    T1->Branch("misphipfst",&misphipfst,"misphipfst/F");
    if (ismtsign) T1->Branch("pfmtsignst",&pfmtsignst,   "pfmtsignst/F");  
    
    T1->Branch("njetsst", &njetsst, "njetsst/I"); 
    if (isjetunc) T1->Branch("jetuncst",jetuncst,"jetuncst[njetsst]/F"); 
    if (isjetumm) T1->Branch("jetummst",jetummst,"jetummst[njetsst]/F"); 
    T1->Branch("jetmomst",jetmomst,"jetmomst[njetsst]/F"); 
    T1->Branch("jetthest",jetthest,"jetthest[njetsst]/F"); 
    T1->Branch("jetphist",jetphist,"jetphist[njetsst]/F"); 
    T1->Branch("chghadst",chghadst,"chghadst[njetsst]/F");
    T1->Branch("neuemfst",neuemfst,"neuemfst[njetsst]/F");
    T1->Branch("neuhadst",neuhadst,"neuhadst[njetsst]/F");
    T1->Branch("jetmulst",jetmulst,"jetmulst[njetsst]/I"); 
  }

  if (ReRECO) {
    
    T1->Branch("misetpfre",&misetpfre,"misetpfre/F"); 
    T1->Branch("misphipfre",&misphipfre,"misphipfre/F");
    if (ismtsign) T1->Branch("pfmtsignre",&pfmtsignre,   "pfmtsignre/F");  
    
    T1->Branch("njetsre", &njetsre, "njetsre/I"); 
    if (isjetunc) T1->Branch("jetuncre",jetuncre,"jetuncre[njetsre]/F"); 
    if (isjetumm) T1->Branch("jetummre",jetummre,"jetummre[njetsre]/F"); 
    T1->Branch("jetmomre",jetmomre,"jetmomre[njetsre]/F"); 
    T1->Branch("jetthere",jetthere,"jetthere[njetsre]/F"); 
    T1->Branch("jetphire",jetphire,"jetphire[njetsre]/F"); 
    T1->Branch("chghadre",chghadre,"chghadre[njetsre]/F");
    T1->Branch("neuemfre",neuemfre,"neuemfre[njetsre]/F");
    T1->Branch("neuhadre",neuhadre,"neuhadre[njetsre]/F");
    T1->Branch("jetmulre",jetmulre,"jetmulre[njetsre]/I"); 
    
    T1->Branch("misetpf0a",&misetpf0a,"misetpf0a/F"); 
    T1->Branch("misphipf0a",&misphipf0a,"misphipf0a/F");
    if (ismtsign)  T1->Branch("pfmtsign0a",&pfmtsign0a,   "pfmtsign0a/F");  
    
    T1->Branch("njets0a", &njets0a, "njets0a/I"); 
    if (isjetunc) T1->Branch("jetunc0a",jetunc0a,"jetunc0a[njets0a]/F"); 
    if (isjetumm) T1->Branch("jetumm0a",jetumm0a,"jetumm0a[njets0a]/F"); 
    T1->Branch("jetmom0a",jetmom0a,"jetmom0a[njets0a]/F"); 
    T1->Branch("jetthe0a",jetthe0a,"jetthe0a[njets0a]/F"); 
    T1->Branch("jetphi0a",jetphi0a,"jetphi0a[njets0a]/F"); 
    T1->Branch("chghad0a",chghad0a,"chghad0a[njets0a]/F");
    T1->Branch("neuemf0a",neuemf0a,"neuemf0a[njets0a]/F");
    T1->Branch("neuhad0a",neuhad0a,"neuhad0a[njets0a]/F");
    T1->Branch("jetmul0a",jetmul0a,"jetmul0a[njets0a]/I"); 
    
    if (iTag>1) {
      T1->Branch("misetpf1b",&misetpf1b,"misetpf1b/F"); 
      T1->Branch("misphipf1b",&misphipf1b,"misphipf1b/F");
      if (ismtsign)  T1->Branch("pfmtsign1b",&pfmtsign1b,   "pfmtsign1b/F");
      
      T1->Branch("njets1b", &njets1b, "njets1b/I"); 
      if (isjetunc) T1->Branch("jetunc1b",jetunc1b,"jetunc1b[njets1b]/F"); 
      if (isjetumm) T1->Branch("jetumm1b",jetumm1b,"jetumm1b[njets1b]/F"); 
      T1->Branch("jetmom1b",jetmom1b,"jetmom1b[njets1b]/F"); 
      T1->Branch("jetthe1b",jetthe1b,"jetthe1b[njets1b]/F"); 
      T1->Branch("jetphi1b",jetphi1b,"jetphi1b[njets1b]/F"); 
      T1->Branch("chghad1b",chghad1b,"chghad1b[njets1b]/F");
      T1->Branch("neuemf1b",neuemf1b,"neuemf1b[njets1b]/F");
      T1->Branch("neuhad1b",neuhad1b,"neuhad1b[njets1b]/F");
      T1->Branch("jetmul1b",jetmul1b,"jetmul1b[njets1b]/I"); 
    }
    
    if (iTag>2) {
      T1->Branch("misetpf2c",&misetpf2c,"misetpf2c/F"); 
      T1->Branch("misphipf2c",&misphipf2c,"misphipf2c/F");
      if (ismtsign) T1->Branch("pfmtsign2c",&pfmtsign2c,   "pfmtsign2c/F");  
      
      T1->Branch("njets2c", &njets2c, "njets2c/I"); 
      if (isjetunc) T1->Branch("jetunc2c",jetunc2c,"jetunc2c[njets2c]/F"); 
      if (isjetumm) T1->Branch("jetumm2c",jetumm2c,"jetumm2c[njets2c]/F"); 
      T1->Branch("jetmom2c",jetmom2c,"jetmom2c[njets2c]/F"); 
      T1->Branch("jetthe2c",jetthe2c,"jetthe2c[njets2c]/F"); 
      T1->Branch("jetphi2c",jetphi2c,"jetphi2c[njets2c]/F"); 
      T1->Branch("chghad2c",chghad2c,"chghad2c[njets2c]/F");
      T1->Branch("neuemf2c",neuemf2c,"neuemf2c[njets2c]/F");
      T1->Branch("neuhad2c",neuhad2c,"neuhad2c[njets2c]/F");
      T1->Branch("jetmul2c",jetmul2c,"jetmul2c[njets2c]/I"); 
    }
    
    if (iTag>3) {
      T1->Branch("misetpf3d",&misetpf3d,"misetpf3d/F"); 
      T1->Branch("misphipf3d",&misphipf3d,"misphipf3d/F");
      if (ismtsign) T1->Branch("pfmtsign3d",&pfmtsign3d,   "pfmtsign3d/F");  
      
      T1->Branch("njets3d", &njets3d, "njets3d/I"); 
      if (isjetunc) T1->Branch("jetunc3d",jetunc3d,"jetunc3d[njets3d]/F"); 
      if (isjetumm) T1->Branch("jetumm3d",jetumm3d,"jetumm3d[njets3d]/F"); 
      T1->Branch("jetmom3d",jetmom3d,"jetmom3d[njets3d]/F"); 
      T1->Branch("jetthe3d",jetthe3d,"jetthe3d[njets3d]/F"); 
      T1->Branch("jetphi3d",jetphi3d,"jetphi3d[njets3d]/F"); 
      T1->Branch("chghad3d",chghad3d,"chghad3d[njets3d]/F");
      T1->Branch("neuemf3d",neuemf3d,"neuemf3d[njets3d]/F");
      T1->Branch("neuhad3d",neuhad3d,"neuhad3d[njets3d]/F");
      T1->Branch("jetmul3d",jetmul3d,"jetmul3d[njets3d]/I"); 
    }
    
    if (iTag>4) {
      T1->Branch("misetpf4e",&misetpf4e,"misetpf4e/F"); 
      T1->Branch("misphipf4e",&misphipf4e,"misphipf4e/F");
      if (ismtsign) T1->Branch("pfmtsign4e",&pfmtsign4e,   "pfmtsign4e/F");  
      
      T1->Branch("njets4e", &njets4e, "njets4e/I"); 
      if (isjetunc) T1->Branch("jetunc4e",jetunc4e,"jetunc4e[njets4e]/F"); 
      if (isjetumm) T1->Branch("jetumm4e",jetumm4e,"jetumm4e[njets4e]/F"); 
      T1->Branch("jetmom4e",jetmom4e,"jetmom4e[njets4e]/F"); 
      T1->Branch("jetthe4e",jetthe4e,"jetthe4e[njets4e]/F"); 
      T1->Branch("jetphi4e",jetphi4e,"jetphi4e[njets4e]/F"); 
      T1->Branch("chghad4e",chghad4e,"chghad4e[njets4e]/F");
      T1->Branch("neuemf4e",neuemf4e,"neuemf4e[njets4e]/F");
      T1->Branch("neuhad4e",neuhad4e,"neuhad4e[njets4e]/F");
      T1->Branch("jetmul4e",jetmul4e,"jetmul4e[njets4e]/I"); 
    }
    
    if (iTag>5) {
      T1->Branch("misetpf5f",&misetpf5f,"misetpf5f/F"); 
      T1->Branch("misphipf5f",&misphipf5f,"misphipf5f/F");
      if (ismtsign) T1->Branch("pfmtsign5f",&pfmtsign5f,   "pfmtsign5f/F");  
      
      T1->Branch("njets5f", &njets5f, "njets5f/I"); 
      if (isjetunc) T1->Branch("jetunc5f",jetunc5f,"jetunc5f[njets5f]/F"); 
      if (isjetumm) T1->Branch("jetumm5f",jetumm5f,"jetumm5f[njets5f]/F"); 
      T1->Branch("jetmom5f",jetmom5f,"jetmom5f[njets5f]/F"); 
      T1->Branch("jetthe5f",jetthe5f,"jetthe5f[njets5f]/F"); 
      T1->Branch("jetphi5f",jetphi5f,"jetphi5f[njets5f]/F"); 
      T1->Branch("chghad5f",chghad5f,"chghad5f[njets5f]/F");
      T1->Branch("neuemf5f",neuemf5f,"neuemf5f[njets5f]/F");
      T1->Branch("neuhad5f",neuhad5f,"neuhad5f[njets5f]/F");
      T1->Branch("jetmul5f",jetmul5f,"jetmul5f[njets5f]/I"); 
    }
    
    if (iTag>6) {
      T1->Branch("misetpf6g",&misetpf6g,"misetpf6g/F"); 
      T1->Branch("misphipf6g",&misphipf6g,"misphipf6g/F");
      if (ismtsign) T1->Branch("pfmtsign6g",&pfmtsign6g,   "pfmtsign6g/F");  
      
      T1->Branch("njets6g", &njets6g, "njets6g/I"); 
      if (isjetunc) T1->Branch("jetunc6g",jetunc6g,"jetunc6g[njets6g]/F"); 
      if (isjetumm) T1->Branch("jetumm6g",jetumm6g,"jetumm6g[njets6g]/F"); 
      T1->Branch("jetmom6g",jetmom6g,"jetmom6g[njets6g]/F"); 
      T1->Branch("jetthe6g",jetthe6g,"jetthe6g[njets6g]/F"); 
      T1->Branch("jetphi6g",jetphi6g,"jetphi6g[njets6g]/F"); 
      T1->Branch("chghad6g",chghad6g,"chghad6g[njets6g]/F");
      T1->Branch("neuemf6g",neuemf6g,"neuemf6g[njets6g]/F");
      T1->Branch("neuhad6g",neuhad6g,"neuhad6g[njets6g]/F");
      T1->Branch("jetmul6g",jetmul6g,"jetmul6g[njets6g]/I"); 
    }
    
    if (iTag>7) {
      T1->Branch("misetpf7h",&misetpf7h,"misetpf7h/F"); 
      T1->Branch("misphipf7h",&misphipf7h,"misphipf7h/F");
      if (ismtsign) T1->Branch("pfmtsign7h",&pfmtsign7h,   "pfmtsign7h/F");  
      
      T1->Branch("njets7h", &njets7h, "njets7h/I"); 
      if (isjetunc) T1->Branch("jetunc7h",jetunc7h,"jetunc7h[njets7h]/F"); 
      if (isjetumm) T1->Branch("jetumm7h",jetumm7h,"jetumm7h[njets7h]/F"); 
      T1->Branch("jetmom7h",jetmom7h,"jetmom7h[njets7h]/F"); 
      T1->Branch("jetthe7h",jetthe7h,"jetthe7h[njets7h]/F"); 
      T1->Branch("jetphi7h",jetphi7h,"jetphi7h[njets7h]/F"); 
      T1->Branch("chghad7h",chghad7h,"chghad7h[njets7h]/F");
      T1->Branch("neuemf7h",neuemf7h,"neuemf7h[njets7h]/F");
      T1->Branch("neuhad7h",neuhad7h,"neuhad7h[njets7h]/F");
      T1->Branch("jetmul7h",jetmul7h,"jetmul7h[njets7h]/I"); 
    }
    
    if (iTag>8) {
      T1->Branch("misetpf8i",&misetpf8i,"misetpf8i/F"); 
      T1->Branch("misphipf8i",&misphipf8i,"misphipf8i/F");
      if (ismtsign) T1->Branch("pfmtsign8i",&pfmtsign8i,   "pfmtsign8i/F");  
      
      T1->Branch("njets8i", &njets8i, "njets8i/I"); 
      if (isjetunc) T1->Branch("jetunc8i",jetunc8i,"jetunc8i[njets8i]/F"); 
      if (isjetumm) T1->Branch("jetumm8i",jetumm8i,"jetumm8i[njets8i]/F"); 
      T1->Branch("jetmom8i",jetmom8i,"jetmom8i[njets8i]/F"); 
      T1->Branch("jetthe8i",jetthe8i,"jetthe8i[njets8i]/F"); 
      T1->Branch("jetphi8i",jetphi8i,"jetphi8i[njets8i]/F"); 
      T1->Branch("chghad8i",chghad8i,"chghad8i[njets8i]/F");
      T1->Branch("neuemf8i",neuemf8i,"neuemf8i[njets8i]/F");
      T1->Branch("neuhad8i",neuhad8i,"neuhad8i[njets8i]/F");
      T1->Branch("jetmul8i",jetmul8i,"jetmul8i[njets8i]/I"); 
    }
    
    if (iTag>9) {
      T1->Branch("misetpf9j",&misetpf9j,"misetpf9j/F"); 
      T1->Branch("misphipf9j",&misphipf9j,"misphipf9j/F");
      if (ismtsign) T1->Branch("pfmtsign9j",&pfmtsign9j,   "pfmtsign9j/F");  
      
      T1->Branch("njets9j", &njets9j, "njets9j/I"); 
      if (isjetunc) T1->Branch("jetunc9j",jetunc9j,"jetunc9j[njets9j]/F"); 
      if (isjetumm) T1->Branch("jetumm9j",jetumm9j,"jetumm9j[njets9j]/F"); 
      T1->Branch("jetmom9j",jetmom9j,"jetmom9j[njets9j]/F"); 
      T1->Branch("jetthe9j",jetthe9j,"jetthe9j[njets9j]/F"); 
      T1->Branch("jetphi9j",jetphi9j,"jetphi9j[njets9j]/F"); 
      T1->Branch("chghad9j",chghad9j,"chghad9j[njets9j]/F");
      T1->Branch("neuemf9j",neuemf9j,"neuemf9j[njets9j]/F");
      T1->Branch("neuhad9j",neuhad9j,"neuhad9j[njets9j]/F");
      T1->Branch("jetmul9j",jetmul9j,"jetmul9j[njets9j]/I"); 
    }
    
    if (iTag>10) {
      T1->Branch("misetpfak",&misetpfak,"misetpfak/F"); 
      T1->Branch("misphipfak",&misphipfak,"misphipfak/F");
      if (ismtsign) T1->Branch("pfmtsignak",&pfmtsignak,   "pfmtsignak/F");  
      
      T1->Branch("njetsak", &njetsak, "njetsak/I"); 
      if (isjetunc) T1->Branch("jetuncak",jetuncak,"jetuncak[njetsak]/F"); 
      if (isjetumm) T1->Branch("jetummak",jetummak,"jetummak[njetsak]/F"); 
      T1->Branch("jetmomak",jetmomak,"jetmomak[njetsak]/F"); 
      T1->Branch("jettheak",jettheak,"jettheak[njetsak]/F"); 
      T1->Branch("jetphiak",jetphiak,"jetphiak[njetsak]/F"); 
      T1->Branch("chghadak",chghadak,"chghadak[njetsak]/F");
      T1->Branch("neuemfak",neuemfak,"neuemfak[njetsak]/F");
      T1->Branch("neuhadak",neuhadak,"neuhadak[njetsak]/F");
      T1->Branch("jetmulak",jetmulak,"jetmulak[njetsak]/I"); 
    }
    
    if (iTag>11) {
      T1->Branch("misetpfbl",&misetpfbl,"misetpfbl/F"); 
      T1->Branch("misphipfbl",&misphipfbl,"misphipfbl/F");
      if (ismtsign) T1->Branch("pfmtsignbl",&pfmtsignbl,   "pfmtsignbl/F");  
      
      T1->Branch("njetsbl", &njetsbl, "njetsbl/I"); 
      if (isjetunc) T1->Branch("jetuncbl",jetuncbl,"jetuncbl[njetsbl]/F"); 
      if (isjetumm) T1->Branch("jetummbl",jetummbl,"jetummbl[njetsbl]/F"); 
      T1->Branch("jetmombl",jetmombl,"jetmombl[njetsbl]/F"); 
      T1->Branch("jetthebl",jetthebl,"jetthebl[njetsbl]/F"); 
      T1->Branch("jetphibl",jetphibl,"jetphibl[njetsbl]/F"); 
      T1->Branch("chghadbl",chghadbl,"chghadbl[njetsbl]/F");
      T1->Branch("neuemfbl",neuemfbl,"neuemfbl[njetsbl]/F");
      T1->Branch("neuhadbl",neuhadbl,"neuhadbl[njetsbl]/F");
      T1->Branch("jetmulbl",jetmulbl,"jetmulbl[njetsbl]/I"); 
    }
    
    if (iTag>12) {
      T1->Branch("misetpfcm",&misetpfcm,"misetpfcm/F"); 
      T1->Branch("misphipfcm",&misphipfcm,"misphipfcm/F");
      if (ismtsign) T1->Branch("pfmtsigncm",&pfmtsigncm,   "pfmtsigncm/F");  
      
      T1->Branch("njetscm", &njetscm, "njetscm/I"); 
      if (isjetunc) T1->Branch("jetunccm",jetunccm,"jetunccm[njetscm]/F"); 
      if (isjetumm) T1->Branch("jetummcm",jetummcm,"jetummcm[njetscm]/F"); 
      T1->Branch("jetmomcm",jetmomcm,"jetmomcm[njetscm]/F"); 
      T1->Branch("jetthecm",jetthecm,"jetthecm[njetscm]/F"); 
      T1->Branch("jetphicm",jetphicm,"jetphicm[njetscm]/F"); 
      T1->Branch("chghadcm",chghadcm,"chghadcm[njetscm]/F");
      T1->Branch("neuemfcm",neuemfcm,"neuemfcm[njetscm]/F");
      T1->Branch("neuhadcm",neuhadcm,"neuhadcm[njetscm]/F");
      T1->Branch("jetmulcm",jetmulcm,"jetmulcm[njetscm]/I"); 
    }
    
    if (iTag>13) {
      T1->Branch("misetpfdn",&misetpfdn,"misetpfdn/F"); 
      T1->Branch("misphipfdn",&misphipfdn,"misphipfdn/F");
      if (ismtsign) T1->Branch("pfmtsigndn",&pfmtsigndn,   "pfmtsigndn/F");  
      
      T1->Branch("njetsdn", &njetsdn, "njetsdn/I"); 
      if (isjetunc) T1->Branch("jetuncdn",jetuncdn,"jetuncdn[njetsdn]/F"); 
      if (isjetumm) T1->Branch("jetummdn",jetummdn,"jetummdn[njetsdn]/F"); 
      T1->Branch("jetmomdn",jetmomdn,"jetmomdn[njetsdn]/F"); 
      T1->Branch("jetthedn",jetthedn,"jetthedn[njetsdn]/F"); 
      T1->Branch("jetphidn",jetphidn,"jetphidn[njetsdn]/F"); 
      T1->Branch("chghaddn",chghaddn,"chghaddn[njetsdn]/F");
      T1->Branch("neuemfdn",neuemfdn,"neuemfdn[njetsdn]/F");
      T1->Branch("neuhaddn",neuhaddn,"neuhaddn[njetsdn]/F");
      T1->Branch("jetmuldn",jetmuldn,"jetmuldn[njetsdn]/I"); 
    }
    
    if (iTag>14) {
      T1->Branch("misetpfeo",&misetpfeo,"misetpfeo/F"); 
      T1->Branch("misphipfeo",&misphipfeo,"misphipfeo/F");
      if (ismtsign) T1->Branch("pfmtsigneo",&pfmtsigneo,   "pfmtsigneo/F");  
      
      T1->Branch("njetseo", &njetseo, "njetseo/I"); 
      if (isjetunc) T1->Branch("jetunceo",jetunceo,"jetunceo[njetseo]/F"); 
      if (isjetumm) T1->Branch("jetummeo",jetummeo,"jetummeo[njetseo]/F"); 
      T1->Branch("jetmomeo",jetmomeo,"jetmomeo[njetseo]/F"); 
      T1->Branch("jettheeo",jettheeo,"jettheeo[njetseo]/F"); 
      T1->Branch("jetphieo",jetphieo,"jetphieo[njetseo]/F"); 
      T1->Branch("chghadeo",chghadeo,"chghadeo[njetseo]/F");
      T1->Branch("neuemfeo",neuemfeo,"neuemfeo[njetseo]/F");
      T1->Branch("neuhadeo",neuhadeo,"neuhadeo[njetseo]/F");
      T1->Branch("jetmuleo",jetmuleo,"jetmuleo[njetseo]/I"); 
    }
    
    if (iTag>15) {
      T1->Branch("misetpffp",&misetpffp,"misetpffp/F"); 
      T1->Branch("misphipffp",&misphipffp,"misphipffp/F");
      if (ismtsign) T1->Branch("pfmtsignfp",&pfmtsignfp,   "pfmtsignfp/F");  
      
      T1->Branch("njetsfp", &njetsfp, "njetsfp/I"); 
      if (isjetunc) T1->Branch("jetuncfp",jetuncfp,"jetuncfp[njetsfp]/F"); 
      if (isjetumm) T1->Branch("jetummfp",jetummfp,"jetummfp[njetsfp]/F"); 
      T1->Branch("jetmomfp",jetmomfp,"jetmomfp[njetsfp]/F"); 
      T1->Branch("jetthefp",jetthefp,"jetthefp[njetsfp]/F"); 
      T1->Branch("jetphifp",jetphifp,"jetphifp[njetsfp]/F"); 
      T1->Branch("chghadfp",chghadfp,"chghadfp[njetsfp]/F");
      T1->Branch("neuemffp",neuemffp,"neuemffp[njetsfp]/F");
      T1->Branch("neuhadfp",neuhadfp,"neuhadfp[njetsfp]/F");
      T1->Branch("jetmulfp",jetmulfp,"jetmulfp[njetsfp]/I"); 
    }
    
    if (iTag>16) {
      T1->Branch("misetpfgq",&misetpfgq,"misetpfgq/F"); 
      T1->Branch("misphipfgq",&misphipfgq,"misphipfgq/F");
      if (ismtsign) T1->Branch("pfmtsigngq",&pfmtsigngq,   "pfmtsigngq/F");  
      
      T1->Branch("njetsgq", &njetsgq, "njetsgq/I"); 
      if (isjetunc) T1->Branch("jetuncgq",jetuncgq,"jetuncgq[njetsgq]/F"); 
      if (isjetumm) T1->Branch("jetummgq",jetummgq,"jetummgq[njetsgq]/F"); 
      T1->Branch("jetmomgq",jetmomgq,"jetmomgq[njetsgq]/F"); 
      T1->Branch("jetthegq",jetthegq,"jetthegq[njetsgq]/F"); 
      T1->Branch("jetphigq",jetphigq,"jetphigq[njetsgq]/F"); 
      T1->Branch("chghadgq",chghadgq,"chghadgq[njetsgq]/F");
      T1->Branch("neuemfgq",neuemfgq,"neuemfgq[njetsgq]/F");
      T1->Branch("neuhadgq",neuhadgq,"neuhadgq[njetsgq]/F");
       T1->Branch("jetmulgq",jetmulgq,"jetmulgq[njetsgq]/I"); 
    }
    
    if (iTag>17) {
      T1->Branch("misetpfhr",&misetpfhr,"misetpfhr/F"); 
      T1->Branch("misphipfhr",&misphipfhr,"misphipfhr/F");
      if (ismtsign) T1->Branch("pfmtsignhr",&pfmtsignhr,   "pfmtsignhr/F");  
      
      T1->Branch("njetshr", &njetshr, "njetshr/I"); 
      if (isjetunc) T1->Branch("jetunchr",jetunchr,"jetunchr[njetshr]/F"); 
      if (isjetumm) T1->Branch("jetummhr",jetummhr,"jetummhr[njetshr]/F"); 
      T1->Branch("jetmomhr",jetmomhr,"jetmomhr[njetshr]/F"); 
      T1->Branch("jetthehr",jetthehr,"jetthehr[njetshr]/F"); 
      T1->Branch("jetphihr",jetphihr,"jetphihr[njetshr]/F"); 
      T1->Branch("chghadhr",chghadhr,"chghadhr[njetshr]/F");
      T1->Branch("neuemfhr",neuemfhr,"neuemfhr[njetshr]/F");
      T1->Branch("neuhadhr",neuhadhr,"neuhadhr[njetshr]/F");
      T1->Branch("jetmulhr",jetmulhr,"jetmulhr[njetshr]/I"); 
    }
    
    if (iTag>18) {
      T1->Branch("misetpfis",&misetpfis,"misetpfis/F"); 
      T1->Branch("misphipfis",&misphipfis,"misphipfis/F");
      if (ismtsign) T1->Branch("pfmtsignis",&pfmtsignis,   "pfmtsignis/F");  
      
      T1->Branch("njetsis", &njetsis, "njetsis/I"); 
      if (isjetunc) T1->Branch("jetuncis",jetuncis,"jetuncis[njetsis]/F"); 
      if (isjetumm) T1->Branch("jetummis",jetummis,"jetummis[njetsis]/F"); 
      T1->Branch("jetmomis",jetmomis,"jetmomis[njetsis]/F"); 
      T1->Branch("jettheis",jettheis,"jettheis[njetsis]/F"); 
      T1->Branch("jetphiis",jetphiis,"jetphiis[njetsis]/F"); 
      T1->Branch("chghadis",chghadis,"chghadis[njetsis]/F");
      T1->Branch("neuemfis",neuemfis,"neuemfis[njetsis]/F");
      T1->Branch("neuhadis",neuhadis,"neuhadis[njetsis]/F");
      T1->Branch("jetmulis",jetmulis,"jetmulis[njetsis]/I"); 
    }
  }

  if (isMC) {
    T1->Branch("ngenjt", &ngenjt, "ngenjt/I"); 
    T1->Branch("genjtmom",genjtmom,"genjtmom[ngenjt]/F"); 
    T1->Branch("genjtthe",genjtthe,"genjtthe[ngenjt]/F"); 
    T1->Branch("genjtphi",genjtphi,"genjtphi[ngenjt]/F");   
    //    T1->Branch("genjtde",genjtde,"genjtde[ngenjt]/F"); 
    T1->Branch("ngenpar",ngenpar,"ngenpar[ngenjt]/I"); 
    
    T1->Branch("ngennujt", &ngennujt, "ngennujt/I"); 
    T1->Branch("gennujtmom",gennujtmom,"gennujtmom[ngennujt]/F"); 
    T1->Branch("gennujtthe",gennujtthe,"gennujtthe[ngennujt]/F"); 
    T1->Branch("gennujtphi",gennujtphi,"gennujtphi[ngennujt]/F"); 
    T1->Branch("gennujten",gennujten,"gennujten[ngennujt]/F"); 
    T1->Branch("gennujtmul",gennujtmul,"gennujtmul[ngennujt]/I");

    T1->Branch("genmet", &genmet, "genmet/F");
    T1->Branch("genmetph", &genmetph, "genmetph/F");
    T1->Branch("ngenlep", &ngenlep, "ngenlep/I"); 
    
  } else {
    T1->Branch("ibrnch", &ibrnch, "ibrnch/I"); 
  }
  
  if (iTagHO>0) {
    T1->Branch("nhocell", &nhocell, "nhocell/I"); 
    T1->Branch("hocellid",hocellid,"hocellid[nhocell]/I");
    T1->Branch("hocellen",hocellen,"hocellen[nhocell]/F");
    T1->Branch("hotime",hotime,"hotime[nhocell]/F");
    T1->Branch("hoflag",hoflag,"hoflag[nhocell]/i");
    if (iTagHO>1) {
      T1->Branch("hosig0", hosig0, "hosig0[nhocell]/F");
      T1->Branch("hosig1", hosig1, "hosig1[nhocell]/F");
      T1->Branch("hosig2", hosig2, "hosig2[nhocell]/F");
      T1->Branch("hosig3", hosig3, "hosig3[nhocell]/F");
      T1->Branch("hosig4", hosig4, "hosig4[nhocell]/F");
      T1->Branch("hosig5", hosig5, "hosig5[nhocell]/F");
      T1->Branch("hosig6", hosig6, "hosig6[nhocell]/F");
      T1->Branch("hosig7", hosig7, "hosig7[nhocell]/F");
      T1->Branch("hosig8", hosig8, "hosig8[nhocell]/F");
      T1->Branch("hosig9", hosig9, "hosig9[nhocell]/F");
    }
  }
  
  char name[100];
  char title[100];

  for (int ij=0; ij<iTag+2; ij++) {
    sprintf(name, "calojtptvseta_%i", ij);
    sprintf(title, "calojtptvseta (%i)", ij);
    h_calojtptvseta[ij] = fs->make<TH2F>(name, title, 120, -M_PI, M_PI, nlogpsig2, logpsig2jt);
    
    sprintf(name, "pfjtptvseta_%i", ij);
    sprintf(title, "pfjtptvseta (%i)", ij);
    h_pfjtptvseta[ij] = fs->make<TH2F>(name, title, 120, -M_PI, M_PI, nlogpsig2, logpsig2jt);
  }

  if (iTagHO>1) { 
    
    for (int ij=0; ij<nhbsigmx; ij++) { 
      for (int jk=0; jk<4; jk++) {
	if (iTagHO<=1 && jk==3) continue;

	sprintf(name, "hbnormdigi_%i_%i", jk, ij);
	sprintf(title, "Noml Depth(%i) [%i- %i]", jk+1, int(hbsigmxs[ij]), int(hbsigmxs[ij+1]));
	h_normhbdigi[jk][ij] = fs->make<TH1F>(name, title, 100000, -0.5, 99999.5);

	sprintf(name, "hbdigi_%i_%i", jk, ij);
	sprintf(title, "Signal Depth(%i) [%i- %i]", jk+1, int(hbsigmxs[ij]), int(hbsigmxs[ij+1]));
	h_hbdigi[jk][ij] = fs->make<TH1F>(name, title, 100000, -0.5, 99999.5);
      }
    }
  }
  
  for (int ij=0; ij<nhbetamx; ij++) {
    int ieta = gethbieta(ij);
    int abseta=abs(ieta);
    for (int jk=0; jk<nhbphimx; jk++) {
      for (int kl=0; kl<nhbdepthmx; kl++) {
	if (abseta <15) {
	  if (kl !=0 && kl!=3) continue;
	} else if (abseta==15) {
	  if (kl==2) continue; 
	} else if (abseta==16) {
	  if (kl==3) continue;
	} else if (abseta==17) {
	  if (kl>0) continue;
	} else if (abseta<=26) {
	  if (kl>1) continue;
	} else if (abseta<=28) {
	  if (kl==3) continue;
	} else if (abseta==29) {
	  if (kl>1) continue;
	} else {
	  continue;
	}
	

	sprintf(name, "hb_%i_%i_%i", ij, jk, kl);
	sprintf(title, "hb #eta%i #phi%i d%i", ieta, jk+1, kl+1);
	h_hbtime[ij][jk][kl] = fs->make<TH1F>(name, title, 60, -60., 90.);

	sprintf(name, "hben_%i_%i_%i", ij, jk, kl);
	sprintf(title, "hben #eta%i #phi%i d%i", ieta, jk+1, kl+1);
	h_hbentime[ij][jk][kl] = fs->make<TH2F>(name, title, 60, -60., 90., nlogpsig2, logpsig2s);

      }
    }
  }
  for (int kl=0; kl<nhbdepthmx; kl++) {
    sprintf(name, "hbentry_d%i", kl);
    sprintf(title, "hbentry d%i", kl+1);
    h_hbentry[kl] = fs->make<TH2F>(name, title, 59, -29.5, 29.5, 72, 0.5, 72.5);

    sprintf(name, "hbsig_d%i", kl);
    sprintf(title, "hbsig d%i", kl+1);
    h_hbsig[kl] = fs->make<TH2F>(name, title, 59, -29.5, 29.5, 72, 0.5, 72.5);

    sprintf(name, "hbsig2_d%i", kl);
    sprintf(title, "hbsig2 d%i", kl+1);
    h_hbsig2[kl] = fs->make<TH2F>(name, title, 59, -29.5, 29.5, 72, 0.5, 72.5);
  }

  for (int lm=0; lm<iTagMx; lm++) {
    if (isOnlyDigi && lm==0) continue;
    if (!ReRECO && lm>0) continue;
    if (lm>=iTagMET && lm<iTagMx-2) continue;  
    for (int ij=0; ij<netajtbin; ij++) {
      for (int jk=0; jk<nlepton; jk++) {
	for (int kl=0; kl<nmettype; kl++) {
	  sprintf(name, "metetphi_%i_%i_%i_%i", ij, jk, kl, lm);
	  sprintf(title, "metetphi_eta%g_%s_%s_%i", int(100*etajtbins[ij])/100., namelep[jk], metname[kl], lm);
	  h_metetphi[ij][jk][kl][lm] = fs->make<TH2F>(name, title, 60, -M_PI, M_PI, nlogmisptbin, logmisptbins);
	}
      }
    }
  }
  
  //  for (int ij=0; ij<norbitgap; ij++) {
  //    for (int jk=0; jk<nmettype; jk++) {
  //      for (int kl=0; kl<iTagMET+2; kl++) {
  //	sprintf(name, "gapmetetphi_%i_%i_%i", ij, jk, kl);
  //	sprintf(title, "gapmetetphi_%i_%s_%i", ij, metname[jk], kl);
  //	h_gapmetetphi[ij][jk][kl] = fs->make<TH2F>(name, title, 60, -M_PI, M_PI, nlogmisptbin, logmisptbins);
  //      }
  //    }
  //  }

  Nevt=0;
  irunold = -1;

  for (int i=0; i<netamx; i++) {
    for (int j=0; j<nphimx; j++) {
      for (int k=0; k<ncidmx; k++) {
	pedestal[i][j][k]=0.0;
      }
    }
  }




}


HOinPFAlgo::~HOinPFAlgo()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called for each event  ------------
void
HOinPFAlgo::analyze(const edm::Event& iEvent, const edm::EventSetup& pset)
{

  Nevt++;
  using namespace edm;

  if (Nevt%100==1) cout <<"HOinPFAlgo::analyze "<< Nevt<<" "<<iEvent.id().run()<<" "<<iEvent.id().event()<<" "<<iTag<<" "<<jtptthr<<endl;

  Handle<VertexCollection> primaryVertices;
  reco::TrackBase::Point beamPoint(0,0, 0);
  edm::Handle<reco::BeamSpot> beamSpotH;
  iEvent.getByLabel("offlineBeamSpot",beamSpotH);
  if (beamSpotH.isValid()){
    beamPoint = beamSpotH->position();
  }

  try {
    iEvent.getByLabel("offlinePrimaryVertices",primaryVertices);
  } catch ( cms::Exception &iEvent ) {;}
  if (primaryVertices.isValid()) {
    int ndofct=0;
    int nchict=0;
    int nvert = 0;
    for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
      nvert ++;
      if (vert->isValid() && !vert->isFake()) {
	if (vert->ndof()>7) { 
	  ndofct++;
	  if (vert->normalizedChi2()<5) nchict++;
	}
      }
    }
    nprim = min(99,nvert) + 100*min(99,ndofct) + 10000*min(99,nchict);
    
  } else { nprim = 0;}
    

  edm::Handle<edm::View<reco::Muon> > muons;

  bool isMuon = true;
  try {
    iEvent.getByLabel("muons",muons);
  } catch ( cms::Exception &iEvent ) { isMuon = false; } 
  
  nmuon = 0;
  if (isMuon && muons.isValid() && muons->size()>0) {
    edm::View<reco::Muon>::const_iterator muon1;
    for( muon1 = muons->begin(); muon1 < muons->end(); muon1++ ) {
      if ((!muon1->isTrackerMuon()) && (!muon1->isGlobalMuon()) && (!muon1->isStandAloneMuon())) continue;
      TrackRef trkglb =muon1->globalTrack();
      
      if ((!muon1->isGlobalMuon())) {
	if (muon1->isTrackerMuon()) {
	  trkglb =muon1->innerTrack();
	} else {
	  trkglb =muon1->outerTrack(); 
	}
      }
      
      TrackRef trktrk =muon1->innerTrack();
      
      if ((!muon1->isTrackerMuon())) {
	if (muon1->isGlobalMuon()) {
	  trktrk =muon1->globalTrack();
	} else {
	  trktrk =muon1->outerTrack(); 
	}
      }

      if (trktrk->pt()<3.0) continue;

      hitlay[nmuon] = min(99, trktrk->hitPattern().trackerLayersWithMeasurement());
      hitlay[nmuon] += 100*(min(99,(muon1->numberOfMatchedStations())));
      hitlay[nmuon] += 10000*(min(99,(muon1->numberOfMatches())));


      const reco::HitPattern& p1 = trkglb->hitPattern();
      if (muon1->isGlobalMuon()) { hitpat[nmuon] =  1000* min(99,p1.numberOfValidMuonHits());}
      const reco::HitPattern& p2 = trktrk->hitPattern();
      
      hitpat[nmuon] +=10* min(99,p1.numberOfValidStripHits()) 
	+                 min( 9,p1.numberOfValidPixelHits()) 
	+        1000000* min(99,p2.numberOfValidStripHits())
	+         100000* min( 9,p2.numberOfValidPixelHits());
      
      if (p1.numberOfValidStripHits()+p1.numberOfValidPixelHits() !=p1.numberOfValidTrackerHits()) cout<<"hits "<<p1.numberOfValidStripHits()<<" "<<p1.numberOfValidPixelHits()<<" "<<p1.numberOfValidTrackerHits()<<" "<<p1.numberOfValidHits()<<" "<<p1.numberOfValidMuonHits()<<" "<<p1.numberOfValidMuonHits()+p1.numberOfValidStripHits()+p1.numberOfValidPixelHits()-p1.numberOfValidHits()<<endl;
      
      if (!p1.hasValidHitInFirstPixelBarrel()) hitpat[nmuon] *=-1;
      
      MuonEnergy muonenr = muon1->calEnergy();
      MuonIsolation iso03 = muon1->isolationR03();
      MuonIsolation iso05 = muon1->isolationR05();
      
      muecal[nmuon] = muonenr.em;
      muhcal[nmuon] = muonenr.had;
      //      muho[nmuon]  = muonenr.ho;
      
      emisol[nmuon] = iso03.emEt; // + iso03.hadEt + iso03.hoEt;
      hadiso[nmuon] = iso03.hadEt;
      //      hoisol[nmuon] = iso03.hoEt;
      tkpt03[nmuon] = iso03.sumPt;
      tkpt05[nmuon] = iso05.sumPt;
      
      calcom[nmuon] = muon1->caloCompatibility();
      
      
      int compt= int(1000.*muon::segmentCompatibility(*muon1));
      compt<<=1;
      int cmp2d = muon::isGoodMuon(*muon1,muon::TMLastStationLoose);
      //      if (cmp2d==0 && isMC) continue;
      //      if (cmp2d==0) continue;
      compt += cmp2d; // muon::isGoodMuon(*muon1,muon::TMLastStationLoose);
      compt<<=1;
      compt += muon::isGoodMuon(*muon1,muon::TMLastStationTight);
      compt<<=1;
      compt += muon::isGoodMuon(*muon1,muon::TM2DCompatibilityLoose);
      compt<<=1;
      compt += muon::isGoodMuon(*muon1,muon::TM2DCompatibilityTight);
      
      compt<<=1;
      compt += muon1->isCaloMuon();
      compt<<=1;
      compt += muon1->isStandAloneMuon();
      compt<<=1;
      compt += muon1->isTrackerMuon();
      compt<<=1;
      compt += muon1->isGlobalMuon();
      
      compt<<=1;
      compt +=muon::isGoodMuon(*muon1,muon::GlobalMuonPromptTight);
      compt<<=1;
      compt +=muon::isGoodMuon(*muon1,muon::TMOneStationLoose);
      compt<<=1;
      compt +=muon::isGoodMuon(*muon1,muon::TMOneStationTight);
      compt<<=1;
      compt +=muon::isGoodMuon(*muon1,muon::TMLastStationOptimizedLowPtLoose);
      compt<<=1;
      compt +=muon::isGoodMuon(*muon1,muon::TMLastStationOptimizedLowPtTight);
      
      compt<<=3;
      compt += min(7,max(0,muon1->numberOfMatches()));
      compt<<=2;
      
      icomp[nmuon] = compt;
      
      muonpt[nmuon] = trktrk->charge()*trktrk->pt(); //trktrk = muon1->innerTrack()
      muthe[nmuon] = trktrk->theta();
      muphi[nmuon] = trktrk->phi();
      
      mudrbm[nmuon] = trktrk->dxy(beamPoint);
      
      float tmpdz = trktrk->dz();
      if (tmpdz >1000.0) tmpdz = 1000.0;
      if (tmpdz <-1000.0) tmpdz = -1000.0;
      mudz[nmuon] = 10000+tmpdz;
      mupter[nmuon] = trktrk->ptError();
      
      muchi[nmuon] = trkglb->chi2();   //trkglb = muon1->globalTrack()
      mundf[nmuon] = (int)trkglb->ndof();
      if (++nmuon>=nmumx) break;
    }
  }
  
  //  cout<<"nmuon "<<nmuon<<" "<<nelec<<endl;

  edm::Handle<GsfElectronCollection> electrons;
  bool isElectron = true;
  try {
    iEvent.getByLabel("gsfElectrons","",electrons); 
  } catch ( cms::Exception &iEvent ) { isElectron = false; } 

  nelec = 0;
  if (isElectron && electrons.isValid() && electrons->size()>0) {
    
    for( reco::GsfElectronCollection::const_iterator electron1 = electrons->begin(); electron1 != electrons->end(); electron1++ ) {
      
      GsfTrackRef gsftrk1 = electron1->gsfTrack();
      if (gsftrk1.isNull()) continue;
      TrackRef ctftrk = electron1->closestCtfTrackRef();
      HepLorentzVector tmpelectron1(electron1->px(),electron1->py(),electron1->pz(), sqrt(electron1->p()*electron1->p()+el_mass*el_mass));
      
      if (tmpelectron1.perp()<5.0) continue;
      
      if (gsftrk1->ndof() <9) continue;
      //      if (electron1->dr03TkSumPt() > 10 || electron1->dr03TkSumPt()/tmpelectron1.perp()>0.5) continue;
      const reco::HitPattern& p1 = gsftrk1->hitPattern();
      //      ehitlay[nelec] = -1;
      ehitpat[nelec] =  10* min(99,p1.numberOfValidStripHits())
	+ min( 9,p1.numberOfValidPixelHits());
      if (ctftrk.isNonnull()) {
	const reco::HitPattern& p2 = ctftrk->hitPattern();
	ehitpat[nelec] += 10000* min(99,p2.numberOfValidStripHits())
	  +         1000* min( 9,p2.numberOfValidPixelHits());
      }
      if (!p1.hasValidHitInFirstPixelBarrel()) ehitpat[nelec] *=-1;
      
      //      if (electron1->dr03TkSumPt() > 100) continue;
      
      condst[nelec] = electron1->convDist();
      concot[nelec] = electron1->convDcot();
      
      eoverp[nelec] = electron1->eSuperClusterOverP(); 
      hovere[nelec] = electron1->hcalOverEcal();
      
      eemisol[nelec] = electron1->dr03EcalRecHitSumEt();
      ehadiso[nelec] = electron1->dr03HcalDepth1TowerSumEt() + electron1->dr03HcalDepth2TowerSumEt();
      
      etkpt03[nelec] = electron1->dr03TkSumPt();
      etkpt04[nelec] = electron1->dr04TkSumPt();
      
      eietaeta[nelec] = electron1->sigmaIetaIeta();
      
      int compt= electron1->isEB();
      compt<<=1;
      compt += electron1->isEE();
      compt<<=1;
      compt += electron1->isGap();
      compt<<=1;
      compt += electron1->isEBEEGap();
      compt<<=1;
      compt += electron1->isEBGap();
      
      compt<<=1;
      compt += electron1->isEBEtaGap();
      compt<<=1;
      compt += electron1->isEBPhiGap();
      compt<<=1;
      compt += electron1->isEEGap();
      compt<<=1;
      compt += electron1->isEEDeeGap();
      
      compt<<=1;
      compt +=electron1->isEERingGap();

      compt<<=2;
      //4_2_x      compt +=electron1->mvaInput().earlyBrem+2;
      
      compt<<=2;
      //4_2_x      compt +=electron1->mvaInput().ateBrem+2;      

      compt<<=3;
      compt += min(7,electron1->numberOfBrems());
      
      compt<<=3;
      compt += min(7,electron1->classification()+1);      

      //      cout <<"bream "<<electron1->fbrem()<<" "<<electron1->numberOfBrems()<<" "<<electron1->classification()<<" "<<electron1->convDcot()<<" "<<electron1->convDist()<<" "<<electron1->convFlags()<<endl;

      eicomp[nelec] = compt;
      
      elecpt[nelec] = electron1->charge()*electron1->pt(); // trkglb->charge()*trkglb->pt();
      electhe[nelec] = electron1->theta(); // trkglb->theta();
      elecphi[nelec] = electron1->phi(); // trkglb->phi();      
      
      elglbdr[nelec]  = electron1->trackPositionAtVtx().Rho();
      elecdrbm[nelec] = gsftrk1->dxy(beamPoint);
      float tmpdz = gsftrk1->dz();
      if (tmpdz >1000.0) tmpdz = 1000.0;
      if (tmpdz <-1000.0) tmpdz = -1000.0;
      elecdz[nelec] = 10000+tmpdz;
      
      eqovrper[nelec] = gsftrk1->qoverpError();
      
      elecchi[nelec] = gsftrk1->chi2();
      elecndf[nelec] = (int)gsftrk1->ndof();
      
      eedphi[nelec] = electron1->deltaPhiSuperClusterTrackAtVtx(); //deltaPhiSeedClusterTrackAtCalo();
      eedeta[nelec] = electron1->deltaEtaSuperClusterTrackAtVtx(); //deltaEtaSeedClusterTrackAtCalo();
      
      if (++nelec>=nmumx) break;
    }
  }
  //  cout<<"nmuon1 "<<nmuon<<" "<<nelec<<endl;
  
  if (!isOnlyDigi) { 
    edm::Handle<CaloMETCollection> metsst;
    InputTag crmetLabel("corMetGlobalMuons","", "RECO");
    iEvent.getByLabel(crmetLabel, metsst);
    
    if (!metsst.isValid()) {
      InputTag crmetLabel2(crmetLabel.label(), crmetLabel.instance(), "HLT");
      iEvent.getByLabel(crmetLabel2, metsst);
    }
    
    misetcalost = misphicalost = -100;
    if (metsst.isValid()) {
      misetcalost = metsst->begin()->et();
      misphicalost = metsst->begin()->phi();
    }
  }

  if (ReRECO) {
    edm::Handle<CaloMETCollection> metsre;
    try {
      InputTag ccmetLabel("corMetGlobalMuons","", "Combined");
      iEvent.getByLabel(ccmetLabel, metsre);
    } catch ( cms::Exception &iEvent ) {; } 
  
    misetcalore = misphicalore = -100;
    if (metsre.isValid()) {
      misetcalore = metsre->begin()->et();
      misphicalore = metsre->begin()->phi();
    }

    edm::Handle<CaloMETCollection> mets0a;
    try {
      iEvent.getByLabel("corMetGlobalMuons00", mets0a);
    } catch ( cms::Exception &iEvent ) {; } 
  
    misetcalo0a = misphicalo0a = -100;
    if (mets0a.isValid()) {
      misetcalo0a = mets0a->begin()->et();
      misphicalo0a = mets0a->begin()->phi();
    }
    if (iTag>1) {
      edm::Handle<CaloMETCollection> mets1b;
      try {
        iEvent.getByLabel("corMetGlobalMuons01", mets1b);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo1b = misphicalo1b = -100;
      if (mets1b.isValid()) {
        misetcalo1b = mets1b->begin()->et();
        misphicalo1b = mets1b->begin()->phi();
      }
    }

    if (iTag>2) {
      edm::Handle<CaloMETCollection> mets2c;
      try {
        iEvent.getByLabel("corMetGlobalMuons02", mets2c);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo2c = misphicalo2c = -100;
      if (mets2c.isValid()) {
        misetcalo2c = mets2c->begin()->et();
        misphicalo2c = mets2c->begin()->phi();
      }
    }
    if (iTag>3) {
      edm::Handle<CaloMETCollection> mets3d;
      try {
        iEvent.getByLabel("corMetGlobalMuons03", mets3d);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo3d = misphicalo3d = -100;
      if (mets3d.isValid()) {
        misetcalo3d = mets3d->begin()->et();
        misphicalo3d = mets3d->begin()->phi();
      }
    }

    if (iTag>4) {
      edm::Handle<CaloMETCollection> mets4e;
      try {
        iEvent.getByLabel("corMetGlobalMuons04", mets4e);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo4e = misphicalo4e = -100;
      if (mets4e.isValid()) {
        misetcalo4e = mets4e->begin()->et();
        misphicalo4e = mets4e->begin()->phi();
      }
    }

    if (iTag>5) {
      edm::Handle<CaloMETCollection> mets5f;
      try {
        iEvent.getByLabel("corMetGlobalMuons05", mets5f);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo5f = misphicalo5f = -100;
      if (mets5f.isValid()) {
        misetcalo5f = mets5f->begin()->et();
        misphicalo5f = mets5f->begin()->phi();
      }
    }

    if (iTag>6) {
      edm::Handle<CaloMETCollection> mets6g;
      try {
        iEvent.getByLabel("corMetGlobalMuons06", mets6g);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo6g = misphicalo6g = -100;
      if (mets6g.isValid()) {
        misetcalo6g = mets6g->begin()->et();
        misphicalo6g = mets6g->begin()->phi();
      }
    }

    if (iTag>7) {
      edm::Handle<CaloMETCollection> mets7h;
      try {
        iEvent.getByLabel("corMetGlobalMuons07", mets7h);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo7h = misphicalo7h = -100;
      if (mets7h.isValid()) {
        misetcalo7h = mets7h->begin()->et();
        misphicalo7h = mets7h->begin()->phi();
      }
    }

    if (iTag>8) {
      edm::Handle<CaloMETCollection> mets8i;
      try {
        iEvent.getByLabel("corMetGlobalMuons08", mets8i);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo8i = misphicalo8i = -100;
      if (mets8i.isValid()) {
        misetcalo8i = mets8i->begin()->et();
        misphicalo8i = mets8i->begin()->phi();
      }
    }

    if (iTag>9) {
      edm::Handle<CaloMETCollection> mets9j;
      try {
        iEvent.getByLabel("corMetGlobalMuons09", mets9j);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalo9j = misphicalo9j = -100;
      if (mets9j.isValid()) {
        misetcalo9j = mets9j->begin()->et();
        misphicalo9j = mets9j->begin()->phi();
      }
    }

    if (iTag>10) {
      edm::Handle<CaloMETCollection> metsak;
      try {
        iEvent.getByLabel("corMetGlobalMuons10", metsak);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcaloak = misphicaloak = -100;
      if (metsak.isValid()) {
        misetcaloak = metsak->begin()->et();
        misphicaloak = metsak->begin()->phi();
      }
    }

    if (iTag>11) {
      edm::Handle<CaloMETCollection> metsbl;
      try {
        iEvent.getByLabel("corMetGlobalMuons11", metsbl);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalobl = misphicalobl = -100;
      if (metsbl.isValid()) {
        misetcalobl = metsbl->begin()->et();
        misphicalobl = metsbl->begin()->phi();
      }
    }

    if (iTag>12) {
      edm::Handle<CaloMETCollection> metscm;
      try {
        iEvent.getByLabel("corMetGlobalMuons12", metscm);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalocm = misphicalocm = -100;
      if (metscm.isValid()) {
        misetcalocm = metscm->begin()->et();
        misphicalocm = metscm->begin()->phi();
      }
    }

    if (iTag>13) {
      edm::Handle<CaloMETCollection> metsdn;
      try {
        iEvent.getByLabel("corMetGlobalMuons13", metsdn);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalodn = misphicalodn = -100;
      if (metsdn.isValid()) {
        misetcalodn = metsdn->begin()->et();
        misphicalodn = metsdn->begin()->phi();
      }
    }

    if (iTag>14) {
      edm::Handle<CaloMETCollection> metseo;
      try {
        iEvent.getByLabel("corMetGlobalMuons14", metseo);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcaloeo = misphicaloeo = -100;
      if (metseo.isValid()) {
        misetcaloeo = metseo->begin()->et();
        misphicaloeo = metseo->begin()->phi();
      }
    }

    if (iTag>15) {
      edm::Handle<CaloMETCollection> metsfp;
      try {
        iEvent.getByLabel("corMetGlobalMuons15", metsfp);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalofp = misphicalofp = -100;
      if (metsfp.isValid()) {
        misetcalofp = metsfp->begin()->et();
        misphicalofp = metsfp->begin()->phi();
      }
    }

    if (iTag>16) {
      edm::Handle<CaloMETCollection> metsgq;
      try {
        iEvent.getByLabel("corMetGlobalMuons16", metsgq);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalogq = misphicalogq = -100;
      if (metsgq.isValid()) {
        misetcalogq = metsgq->begin()->et();
        misphicalogq = metsgq->begin()->phi();
      }
    }

    if (iTag>17) {
      edm::Handle<CaloMETCollection> metshr;
      try {
        iEvent.getByLabel("corMetGlobalMuons17", metshr);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalohr = misphicalohr = -100;
      if (metshr.isValid()) {
        misetcalohr = metshr->begin()->et();
        misphicalohr = metshr->begin()->phi();
      }
    }

    if (iTag>18) {
      edm::Handle<CaloMETCollection> metsis;
      try {
        iEvent.getByLabel("corMetGlobalMuons18", metsis);
      } catch ( cms::Exception &iEvent ) {; } 
      
      misetcalois = misphicalois = -100;
      if (metsis.isValid()) {
        misetcalois = metsis->begin()->et();
        misphicalois = metsis->begin()->phi();
      }
    }
  } // if (ReRECO)
 
  if (!isOnlyDigi) { 
    edm::Handle<METCollection> tcmetsst;
    InputTag metLabel("tcMet","", "RECO");
    iEvent.getByLabel(metLabel, tcmetsst);     
    
    if (!tcmetsst.isValid()) {
      InputTag metLabel2(metLabel.label(), metLabel.instance(), "HLT");
      iEvent.getByLabel(metLabel2, tcmetsst); 
    }
    
    misettcst = misphitcst = -100;
    if (tcmetsst.isValid()) {
      misettcst = tcmetsst->begin()->et();
      misphitcst = tcmetsst->begin()->phi();
    }

    edm::Handle<edm::ValueMap<reco::JetID> > caloIds;
    iEvent.getByLabel("ak5JetID", caloIds);
    
    edm::Handle<reco::CaloJetCollection>calojetst; 
    InputTag jetLabel("ak5CaloJets","","RECO");
    iEvent.getByLabel(jetLabel, calojetst); 
    
    if (!calojetst.isValid()) {
      InputTag jetLabel2( jetLabel.label(), jetLabel.instance(), "HLT");
      iEvent.getByLabel(jetLabel2, calojetst);
    }
    
    ncalojetsst=0;
    if (calojetst.isValid()) {
      for (unsigned ijet = 0; ijet< calojetst->size(); ijet++) {
	
	if (abs((*calojetst)[ijet].eta())>etarng) continue;
	//      h_calojtptvseta[]->Fill((*calojet)[ijet].phi(), (*calojet)[ijet].pt());
	h_calojtptvseta[0]->Fill((*calojetst)[ijet].phi(), (*calojetst)[ijet].pt());
	
	if ((*calojetst)[ijet].pt()<jtptbins[0]) continue;
	
	//      if (((*calojet)[ijet].phi()<mnphi || (*calojet)[ijet].phi()>mxphi) && (*calojet)[ijet].pt()<jtptbins[1]) continue; 
	//      cout <<"ijetsst "<<ijet<<" "<<(*calojetst)[ijet].hadEnergyInHO()<<endl;
	int ipass = 1;
	if ((*calojetst)[ijet].nConstituents() <2) continue;
	if (abs((*calojetst)[ijet].eta())<2.6 && (*calojetst)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
	int ipasstight = ipass;
	if (abs((*calojetst)[ijet].eta())<2.6 && (*calojetst)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
	
	calojetfhpdst[ncalojetsst] =0.0;
	
	//commented out 2012D data
	//      reco::CaloJetRef calref(calojetst, ijet);
	//       reco::JetID jetid = (*caloIds)[calref];
	//       if (jetid.n90Hits <=1) ipass = 0; //continue;
	//       if (jetid.fHPD >0.98) ipass = 0; // continue;
	//       if (jetid.fHPD >0.95) ipasstight = 0;
	
	//       calojetfhpdst[ncalojetsst] = 1000*jetid.n90Hits + 499.0*min(2.,1+double(jetid.fHPD)); //min(0.999,double(jetid.fHPD));
	
	
	//      calojetfhpdst[ncalojetsst] =0.0;
	Hep3Vector tmp3v1((*calojetst)[ijet].px(), (*calojetst)[ijet].py(), (*calojetst)[ijet].pz());
	//      if (tmp3v1.perp()>jtptbins[1] && abs(tmp3v1.eta())<etabins[netabin]) nseljet++;
	
	calojetmomst[ncalojetsst] = tmp3v1.mag();
	calojetthest[ncalojetsst] = tmp3v1.theta();
	calojetphist[ncalojetsst] = tmp3v1.phi();
	calojetenst[ncalojetsst] = (2*ipass - 1)*(*calojetst)[ijet].energy();
	calojetmulst[ncalojetsst] = (*calojetst)[ijet].nConstituents();
	if (ipasstight==0) calojetmulst[ncalojetsst] = -calojetmulst[ncalojetsst];
	
	calojetemfst[ncalojetsst] = (*calojetst)[ijet].emEnergyFraction();
	calojethost[ncalojetsst] = (*calojetst)[ijet].hadEnergyInHO();
	
	double energy = 0;
	for (int ij=0; ij<(*calojetst)[ijet].nConstituents(); ij++) {
	  energy +=(*calojetst)[ijet].getCaloConstituent(ij)->p();
	}
	calojetummst[ncalojetsst] = energy;
	ncalojetsst++;
	if (ncalojetsst>=njetmx) break;
      }
    }
  }

  if (ReRECO) {
    edm::Handle<METCollection> tcmetsre;
    
    bool istcMetsre = true;
    try {
      InputTag metLabel("tcMet","", "Combined");
      iEvent.getByLabel(metLabel, tcmetsre);  
      //    iEvent.getByLabel("tcMet", tcmetsre);   
    } catch ( cms::Exception &iEvent ) { istcMetsre = false; } 
    
    misettcre = misphitcre = -100;
    if (istcMetsre && tcmetsre.isValid()) {
      misettcre = tcmetsre->begin()->et();
      misphitcre = tcmetsre->begin()->phi();
    }
    
    //  edm::Handle<edm::ValueMap<reco::JetID> > caloIds;
    //  iEvent.getByLabel("ak5JetID", caloIds);
    
    edm::Handle<reco::CaloJetCollection>calojetre; 
    try {
      InputTag jetLabel("ak5CaloJets","","Combined");
      iEvent.getByLabel(jetLabel, calojetre);
    } catch ( cms::Exception &iEvent ) { ;}
    
    ncalojetsre=0;
    if (calojetre.isValid()) {
      for (unsigned ijet = 0; ijet< calojetre->size(); ijet++) {
	if (abs((*calojetre)[ijet].eta())>etarng) continue;
	h_calojtptvseta[1]->Fill((*calojetre)[ijet].phi(), (*calojetre)[ijet].pt());
	if ((*calojetre)[ijet].pt()<jtptbins[0]) continue;
	//      cout <<"ijetsre "<<ijet<<" "<<(*calojetre)[ijet].hadEnergyInHO()<<endl;
	int ipass = 1;
	if ((*calojetre)[ijet].nConstituents() <2) continue;
	if (abs((*calojetre)[ijet].eta())<2.6 && (*calojetre)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
	int ipasstight = ipass;
	if (abs((*calojetre)[ijet].eta())<2.6 && (*calojetre)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
	
	//      reco::CaloJetRef calref(calojetre, ijet);
	//      reco::JetID jetid = (*caloIds)[calref];
	//      if (jetid.n90Hits <=1) ipass = 0; //continue;
	//      if (jetid.fHPD >0.98) ipass = 0; // continue;
	//      if (jetid.fHPD >0.95) ipasstight = 0;
	
	//      calojetfhpdre[ncalojetsre] = 0; //1000*jetid.n90Hits + 499.0*min(2.,1+double(jetid.fHPD)); //min(0.999,double(jetid.fHPD));
	
	Hep3Vector tmp3v1((*calojetre)[ijet].px(), (*calojetre)[ijet].py(), (*calojetre)[ijet].pz());
	//      if (tmp3v1.perp()>jtptbins[1] && abs(tmp3v1.eta())<etabins[netabin]) nseljet++;
	
	calojetmomre[ncalojetsre] = tmp3v1.mag();
	calojetthere[ncalojetsre] = tmp3v1.theta();
	calojetphire[ncalojetsre] = tmp3v1.phi();
	calojetenre[ncalojetsre] = (2*ipass - 1)*(*calojetre)[ijet].energy();
	calojetmulre[ncalojetsre] = (*calojetre)[ijet].nConstituents();
	if (ipasstight==0) calojetmulre[ncalojetsre] = -calojetmulre[ncalojetsre];
	
	calojetemfre[ncalojetsre] = (*calojetre)[ijet].emEnergyFraction();
	calojethore[ncalojetsre] = (*calojetre)[ijet].hadEnergyInHO();
	double energy = 0;
	for (int ij=0; ij<(*calojetre)[ijet].nConstituents(); ij++) {
	  energy +=(*calojetre)[ijet].getCaloConstituent(ij)->p();
	}
	calojetummre[ncalojetsre] = energy;
	ncalojetsre++;
	if (ncalojetsre>=njetmx) break;
      }
    }
    
    
    edm::Handle<METCollection> tcmets0a;
  
    bool istcMets0a = true;
    try {
      iEvent.getByLabel("tcMet00", tcmets0a);   
    } catch ( cms::Exception &iEvent ) { istcMets0a = false; } 
  
    misettc0a = misphitc0a = -100;
    if (istcMets0a && tcmets0a.isValid()) {
      misettc0a = tcmets0a->begin()->et();
      misphitc0a = tcmets0a->begin()->phi();
    }

    edm::Handle<reco::CaloJetCollection>calojet0a; 
    try {
      iEvent.getByLabel("ak5CaloJets00", calojet0a);
    } catch ( cms::Exception &iEvent ) { ;}

    ncalojets0a=0;

    if (calojet0a.isValid()) {
      for (unsigned ijet = 0; ijet< calojet0a->size(); ijet++) {
        if (abs((*calojet0a)[ijet].eta())>etarng) continue;
	h_calojtptvseta[2]->Fill((*calojet0a)[ijet].phi(), (*calojet0a)[ijet].pt());
        if ((*calojet0a)[ijet].pt()<jtptbins[0]) continue;
        //      cout <<"ijets0a "<<ijet<<" "<<(*calojet0a)[ijet].hadEnergyInHO()<<endl;
        int ipass = 1;
        if ((*calojet0a)[ijet].nConstituents() <2) continue;
        if (abs((*calojet0a)[ijet].eta())<2.6 && (*calojet0a)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
        int ipasstight = ipass;
        if (abs((*calojet0a)[ijet].eta())<2.6 && (*calojet0a)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;

        Hep3Vector tmp3v1((*calojet0a)[ijet].px(), (*calojet0a)[ijet].py(), (*calojet0a)[ijet].pz());
        
        calojetmom0a[ncalojets0a] = tmp3v1.mag();
        calojetthe0a[ncalojets0a] = tmp3v1.theta();
        calojetphi0a[ncalojets0a] = tmp3v1.phi();
        calojeten0a[ncalojets0a] = (2*ipass - 1)*(*calojet0a)[ijet].energy();
        calojetmul0a[ncalojets0a] = (*calojet0a)[ijet].nConstituents();
        if (ipasstight==0) calojetmul0a[ncalojets0a] = -calojetmul0a[ncalojets0a];
        
        calojetemf0a[ncalojets0a] = (*calojet0a)[ijet].emEnergyFraction();
        calojetho0a[ncalojets0a] = (*calojet0a)[ijet].hadEnergyInHO();
        double energy = 0;
        for (int ij=0; ij<(*calojet0a)[ijet].nConstituents(); ij++) {
          energy +=(*calojet0a)[ijet].getCaloConstituent(ij)->p();
        }
        calojetumm0a[ncalojets0a] = energy;
        ncalojets0a++;
        if (ncalojets0a>=njetmx) break;
      }
    }
  
    ncalojets1b = ncalojets2c = ncalojets3d = ncalojets4e = ncalojets5f = ncalojets6g = ncalojets7h = 0;
    ncalojets8i = ncalojets9j = ncalojetsak = ncalojetsbl = ncalojetscm = ncalojetsdn = ncalojetseo = ncalojetsfp = ncalojetsgq = ncalojetshr = ncalojetsis =0;

    if (iTag>1) {
      edm::Handle<METCollection> tcmets1b;
      
      bool istcMets1b = true;
      try {
        iEvent.getByLabel("tcMet01", tcmets1b);   
      } catch ( cms::Exception &iEvent ) { istcMets1b = false; } 
      
      misettc1b = misphitc1b = -100;
      if (istcMets1b && tcmets1b.isValid()) {
        misettc1b = tcmets1b->begin()->et();
        misphitc1b = tcmets1b->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet1b; 
      try {
        iEvent.getByLabel("ak5CaloJets01", calojet1b);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets1b=0;
      if (calojet1b.isValid()) {
        for (unsigned ijet = 0; ijet< calojet1b->size(); ijet++) {
          if (abs((*calojet1b)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[3]->Fill((*calojet1b)[ijet].phi(), (*calojet1b)[ijet].pt());
          if ((*calojet1b)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets1b "<<ijet<<" "<<(*calojet1b)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet1b)[ijet].nConstituents() <2) continue;
          if (abs((*calojet1b)[ijet].eta())<2.6 && (*calojet1b)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet1b)[ijet].eta())<2.6 && (*calojet1b)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet1b)[ijet].px(), (*calojet1b)[ijet].py(), (*calojet1b)[ijet].pz());
          
          calojetmom1b[ncalojets1b] = tmp3v1.mag();
          calojetthe1b[ncalojets1b] = tmp3v1.theta();
          calojetphi1b[ncalojets1b] = tmp3v1.phi();
          calojeten1b[ncalojets1b] = (2*ipass - 1)*(*calojet1b)[ijet].energy();
          calojetmul1b[ncalojets1b] = (*calojet1b)[ijet].nConstituents();
          if (ipasstight==0) calojetmul1b[ncalojets1b] = -calojetmul1b[ncalojets1b];
          
          calojetemf1b[ncalojets1b] = (*calojet1b)[ijet].emEnergyFraction();
          calojetho1b[ncalojets1b] = (*calojet1b)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet1b)[ijet].nConstituents(); ij++) {
            energy +=(*calojet1b)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm1b[ncalojets1b] = energy;
          ncalojets1b++;
          if (ncalojets1b>=njetmx) break;
        }
      }
    }


    if (iTag>2) {
      edm::Handle<METCollection> tcmets2c;
      
      bool istcMets2c = true;
      try {
        iEvent.getByLabel("tcMet02", tcmets2c);   
      } catch ( cms::Exception &iEvent ) { istcMets2c = false; } 
      
      misettc2c = misphitc2c = -100;
      if (istcMets2c && tcmets2c.isValid()) {
        misettc2c = tcmets2c->begin()->et();
        misphitc2c = tcmets2c->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet2c; 
      try {
        iEvent.getByLabel("ak5CaloJets02", calojet2c);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets2c=0;
      if (calojet2c.isValid()) {
        for (unsigned ijet = 0; ijet< calojet2c->size(); ijet++) {
          if (abs((*calojet2c)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[4]->Fill((*calojet2c)[ijet].phi(), (*calojet2c)[ijet].pt());
          if ((*calojet2c)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets2c "<<ijet<<" "<<(*calojet2c)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet2c)[ijet].nConstituents() <2) continue;
          if (abs((*calojet2c)[ijet].eta())<2.6 && (*calojet2c)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet2c)[ijet].eta())<2.6 && (*calojet2c)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet2c)[ijet].px(), (*calojet2c)[ijet].py(), (*calojet2c)[ijet].pz());
          
          calojetmom2c[ncalojets2c] = tmp3v1.mag();
          calojetthe2c[ncalojets2c] = tmp3v1.theta();
          calojetphi2c[ncalojets2c] = tmp3v1.phi();
          calojeten2c[ncalojets2c] = (2*ipass - 1)*(*calojet2c)[ijet].energy();
          calojetmul2c[ncalojets2c] = (*calojet2c)[ijet].nConstituents();
          if (ipasstight==0) calojetmul2c[ncalojets2c] = -calojetmul2c[ncalojets2c];
          
          calojetemf2c[ncalojets2c] = (*calojet2c)[ijet].emEnergyFraction();
          calojetho2c[ncalojets2c] = (*calojet2c)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet2c)[ijet].nConstituents(); ij++) {
            energy +=(*calojet2c)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm2c[ncalojets2c] = energy;
          ncalojets2c++;
          if (ncalojets2c>=njetmx) break;
        }
      }
    }


    if (iTag>3) {
      edm::Handle<METCollection> tcmets3d;
      
      bool istcMets3d = true;
      try {
        iEvent.getByLabel("tcMet03", tcmets3d);   
      } catch ( cms::Exception &iEvent ) { istcMets3d = false; } 
      
      misettc3d = misphitc3d = -100;
      if (istcMets3d && tcmets3d.isValid()) {
        misettc3d = tcmets3d->begin()->et();
        misphitc3d = tcmets3d->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet3d; 
      try {
        iEvent.getByLabel("ak5CaloJets03", calojet3d);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets3d=0;
      if (calojet3d.isValid()) {
        for (unsigned ijet = 0; ijet< calojet3d->size(); ijet++) {
          if (abs((*calojet3d)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[5]->Fill((*calojet3d)[ijet].phi(), (*calojet3d)[ijet].pt());
          if ((*calojet3d)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets3d "<<ijet<<" "<<(*calojet3d)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet3d)[ijet].nConstituents() <2) continue;
          if (abs((*calojet3d)[ijet].eta())<2.6 && (*calojet3d)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet3d)[ijet].eta())<2.6 && (*calojet3d)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet3d)[ijet].px(), (*calojet3d)[ijet].py(), (*calojet3d)[ijet].pz());
          
          calojetmom3d[ncalojets3d] = tmp3v1.mag();
          calojetthe3d[ncalojets3d] = tmp3v1.theta();
          calojetphi3d[ncalojets3d] = tmp3v1.phi();
          calojeten3d[ncalojets3d] = (2*ipass - 1)*(*calojet3d)[ijet].energy();
          calojetmul3d[ncalojets3d] = (*calojet3d)[ijet].nConstituents();
          if (ipasstight==0) calojetmul3d[ncalojets3d] = -calojetmul3d[ncalojets3d];
          
          calojetemf3d[ncalojets3d] = (*calojet3d)[ijet].emEnergyFraction();
          calojetho3d[ncalojets3d] = (*calojet3d)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet3d)[ijet].nConstituents(); ij++) {
            energy +=(*calojet3d)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm3d[ncalojets3d] = energy;
          ncalojets3d++;
          if (ncalojets3d>=njetmx) break;
        }
      }
    }


    if (iTag>4) {
      edm::Handle<METCollection> tcmets4e;
      
      bool istcMets4e = true;
      try {
        iEvent.getByLabel("tcMet04", tcmets4e);   
      } catch ( cms::Exception &iEvent ) { istcMets4e = false; } 
      
      misettc4e = misphitc4e = -100;
      if (istcMets4e && tcmets4e.isValid()) {
        misettc4e = tcmets4e->begin()->et();
        misphitc4e = tcmets4e->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet4e; 
      try {
        iEvent.getByLabel("ak5CaloJets04", calojet4e);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets4e=0;
      if (calojet4e.isValid()) {
        for (unsigned ijet = 0; ijet< calojet4e->size(); ijet++) {
          if (abs((*calojet4e)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[6]->Fill((*calojet4e)[ijet].phi(), (*calojet4e)[ijet].pt());
          if ((*calojet4e)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets4e "<<ijet<<" "<<(*calojet4e)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet4e)[ijet].nConstituents() <2) continue;
          if (abs((*calojet4e)[ijet].eta())<2.6 && (*calojet4e)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet4e)[ijet].eta())<2.6 && (*calojet4e)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet4e)[ijet].px(), (*calojet4e)[ijet].py(), (*calojet4e)[ijet].pz());
          
          calojetmom4e[ncalojets4e] = tmp3v1.mag();
          calojetthe4e[ncalojets4e] = tmp3v1.theta();
          calojetphi4e[ncalojets4e] = tmp3v1.phi();
          calojeten4e[ncalojets4e] = (2*ipass - 1)*(*calojet4e)[ijet].energy();
          calojetmul4e[ncalojets4e] = (*calojet4e)[ijet].nConstituents();
          if (ipasstight==0) calojetmul4e[ncalojets4e] = -calojetmul4e[ncalojets4e];
          
          calojetemf4e[ncalojets4e] = (*calojet4e)[ijet].emEnergyFraction();
          calojetho4e[ncalojets4e] = (*calojet4e)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet4e)[ijet].nConstituents(); ij++) {
            energy +=(*calojet4e)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm4e[ncalojets4e] = energy;
          ncalojets4e++;
          if (ncalojets4e>=njetmx) break;
        }
      }
    }


    if (iTag>5) {
      edm::Handle<METCollection> tcmets5f;
      
      bool istcMets5f = true;
      try {
        iEvent.getByLabel("tcMet05", tcmets5f);   
      } catch ( cms::Exception &iEvent ) { istcMets5f = false; } 
      
      misettc5f = misphitc5f = -100;
      if (istcMets5f && tcmets5f.isValid()) {
        misettc5f = tcmets5f->begin()->et();
        misphitc5f = tcmets5f->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet5f; 
      try {
        iEvent.getByLabel("ak5CaloJets05", calojet5f);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets5f=0;
      if (calojet5f.isValid()) {
        for (unsigned ijet = 0; ijet< calojet5f->size(); ijet++) {
          if (abs((*calojet5f)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[7]->Fill((*calojet5f)[ijet].phi(), (*calojet5f)[ijet].pt());
          if ((*calojet5f)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets5f "<<ijet<<" "<<(*calojet5f)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet5f)[ijet].nConstituents() <2) continue;
          if (abs((*calojet5f)[ijet].eta())<2.6 && (*calojet5f)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet5f)[ijet].eta())<2.6 && (*calojet5f)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet5f)[ijet].px(), (*calojet5f)[ijet].py(), (*calojet5f)[ijet].pz());
          
          calojetmom5f[ncalojets5f] = tmp3v1.mag();
          calojetthe5f[ncalojets5f] = tmp3v1.theta();
          calojetphi5f[ncalojets5f] = tmp3v1.phi();
          calojeten5f[ncalojets5f] = (2*ipass - 1)*(*calojet5f)[ijet].energy();
          calojetmul5f[ncalojets5f] = (*calojet5f)[ijet].nConstituents();
          if (ipasstight==0) calojetmul5f[ncalojets5f] = -calojetmul5f[ncalojets5f];
          
          calojetemf5f[ncalojets5f] = (*calojet5f)[ijet].emEnergyFraction();
          calojetho5f[ncalojets5f] = (*calojet5f)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet5f)[ijet].nConstituents(); ij++) {
            energy +=(*calojet5f)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm5f[ncalojets5f] = energy;
          ncalojets5f++;
          if (ncalojets5f>=njetmx) break;
        }
      }
    }


    if (iTag>6) {
      edm::Handle<METCollection> tcmets6g;
      
      bool istcMets6g = true;
      try {
        iEvent.getByLabel("tcMet06", tcmets6g);   
      } catch ( cms::Exception &iEvent ) { istcMets6g = false; } 
      
      misettc6g = misphitc6g = -100;
      if (istcMets6g && tcmets6g.isValid()) {
        misettc6g = tcmets6g->begin()->et();
        misphitc6g = tcmets6g->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet6g; 
      try {
        iEvent.getByLabel("ak5CaloJets06", calojet6g);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets6g=0;
      if (calojet6g.isValid()) {
        for (unsigned ijet = 0; ijet< calojet6g->size(); ijet++) {
          if (abs((*calojet6g)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[8]->Fill((*calojet6g)[ijet].phi(), (*calojet6g)[ijet].pt());
          if ((*calojet6g)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets6g "<<ijet<<" "<<(*calojet6g)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet6g)[ijet].nConstituents() <2) continue;
          if (abs((*calojet6g)[ijet].eta())<2.6 && (*calojet6g)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet6g)[ijet].eta())<2.6 && (*calojet6g)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet6g)[ijet].px(), (*calojet6g)[ijet].py(), (*calojet6g)[ijet].pz());
          
          calojetmom6g[ncalojets6g] = tmp3v1.mag();
          calojetthe6g[ncalojets6g] = tmp3v1.theta();
          calojetphi6g[ncalojets6g] = tmp3v1.phi();
          calojeten6g[ncalojets6g] = (2*ipass - 1)*(*calojet6g)[ijet].energy();
          calojetmul6g[ncalojets6g] = (*calojet6g)[ijet].nConstituents();
          if (ipasstight==0) calojetmul6g[ncalojets6g] = -calojetmul6g[ncalojets6g];
          
          calojetemf6g[ncalojets6g] = (*calojet6g)[ijet].emEnergyFraction();
          calojetho6g[ncalojets6g] = (*calojet6g)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet6g)[ijet].nConstituents(); ij++) {
            energy +=(*calojet6g)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm6g[ncalojets6g] = energy;
          ncalojets6g++;
          if (ncalojets6g>=njetmx) break;
        }
      }
    }


    if (iTag>7) {
      edm::Handle<METCollection> tcmets7h;
      
      bool istcMets7h = true;
      try {
        iEvent.getByLabel("tcMet07", tcmets7h);   
      } catch ( cms::Exception &iEvent ) { istcMets7h = false; } 
      
      misettc7h = misphitc7h = -100;
      if (istcMets7h && tcmets7h.isValid()) {
        misettc7h = tcmets7h->begin()->et();
        misphitc7h = tcmets7h->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet7h; 
      try {
        iEvent.getByLabel("ak5CaloJets07", calojet7h);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets7h=0;
      if (calojet7h.isValid()) {
        for (unsigned ijet = 0; ijet< calojet7h->size(); ijet++) {
          if (abs((*calojet7h)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[9]->Fill((*calojet7h)[ijet].phi(), (*calojet7h)[ijet].pt());
          if ((*calojet7h)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets7h "<<ijet<<" "<<(*calojet7h)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet7h)[ijet].nConstituents() <2) continue;
          if (abs((*calojet7h)[ijet].eta())<2.6 && (*calojet7h)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet7h)[ijet].eta())<2.6 && (*calojet7h)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet7h)[ijet].px(), (*calojet7h)[ijet].py(), (*calojet7h)[ijet].pz());
          
          calojetmom7h[ncalojets7h] = tmp3v1.mag();
          calojetthe7h[ncalojets7h] = tmp3v1.theta();
          calojetphi7h[ncalojets7h] = tmp3v1.phi();
          calojeten7h[ncalojets7h] = (2*ipass - 1)*(*calojet7h)[ijet].energy();
          calojetmul7h[ncalojets7h] = (*calojet7h)[ijet].nConstituents();
          if (ipasstight==0) calojetmul7h[ncalojets7h] = -calojetmul7h[ncalojets7h];
          
          calojetemf7h[ncalojets7h] = (*calojet7h)[ijet].emEnergyFraction();
          calojetho7h[ncalojets7h] = (*calojet7h)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet7h)[ijet].nConstituents(); ij++) {
            energy +=(*calojet7h)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm7h[ncalojets7h] = energy;
          ncalojets7h++;
          if (ncalojets7h>=njetmx) break;
        }
      }
    }


    if (iTag>8) {
      edm::Handle<METCollection> tcmets8i;
      
      bool istcMets8i = true;
      try {
        iEvent.getByLabel("tcMet08", tcmets8i);   
      } catch ( cms::Exception &iEvent ) { istcMets8i = false; } 
      
      misettc8i = misphitc8i = -100;
      if (istcMets8i && tcmets8i.isValid()) {
        misettc8i = tcmets8i->begin()->et();
        misphitc8i = tcmets8i->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet8i; 
      try {
        iEvent.getByLabel("ak5CaloJets08", calojet8i);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets8i=0;
      if (calojet8i.isValid()) {
        for (unsigned ijet = 0; ijet< calojet8i->size(); ijet++) {
          if (abs((*calojet8i)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[10]->Fill((*calojet8i)[ijet].phi(), (*calojet8i)[ijet].pt());
          if ((*calojet8i)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets8i "<<ijet<<" "<<(*calojet8i)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet8i)[ijet].nConstituents() <2) continue;
          if (abs((*calojet8i)[ijet].eta())<2.6 && (*calojet8i)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet8i)[ijet].eta())<2.6 && (*calojet8i)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet8i)[ijet].px(), (*calojet8i)[ijet].py(), (*calojet8i)[ijet].pz());
          
          calojetmom8i[ncalojets8i] = tmp3v1.mag();
          calojetthe8i[ncalojets8i] = tmp3v1.theta();
          calojetphi8i[ncalojets8i] = tmp3v1.phi();
          calojeten8i[ncalojets8i] = (2*ipass - 1)*(*calojet8i)[ijet].energy();
          calojetmul8i[ncalojets8i] = (*calojet8i)[ijet].nConstituents();
          if (ipasstight==0) calojetmul8i[ncalojets8i] = -calojetmul8i[ncalojets8i];
          
          calojetemf8i[ncalojets8i] = (*calojet8i)[ijet].emEnergyFraction();
          calojetho8i[ncalojets8i] = (*calojet8i)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet8i)[ijet].nConstituents(); ij++) {
            energy +=(*calojet8i)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm8i[ncalojets8i] = energy;
          ncalojets8i++;
          if (ncalojets8i>=njetmx) break;
        }
      }
    }


    if (iTag>9) {
      edm::Handle<METCollection> tcmets9j;
      
      bool istcMets9j = true;
      try {
        iEvent.getByLabel("tcMet09", tcmets9j);   
      } catch ( cms::Exception &iEvent ) { istcMets9j = false; } 
      
      misettc9j = misphitc9j = -100;
      if (istcMets9j && tcmets9j.isValid()) {
        misettc9j = tcmets9j->begin()->et();
        misphitc9j = tcmets9j->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojet9j; 
      try {
        iEvent.getByLabel("ak5CaloJets09", calojet9j);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojets9j=0;
      if (calojet9j.isValid()) {
        for (unsigned ijet = 0; ijet< calojet9j->size(); ijet++) {
          if (abs((*calojet9j)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[11]->Fill((*calojet9j)[ijet].phi(), (*calojet9j)[ijet].pt());
          if ((*calojet9j)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijets9j "<<ijet<<" "<<(*calojet9j)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojet9j)[ijet].nConstituents() <2) continue;
          if (abs((*calojet9j)[ijet].eta())<2.6 && (*calojet9j)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojet9j)[ijet].eta())<2.6 && (*calojet9j)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojet9j)[ijet].px(), (*calojet9j)[ijet].py(), (*calojet9j)[ijet].pz());
          
          calojetmom9j[ncalojets9j] = tmp3v1.mag();
          calojetthe9j[ncalojets9j] = tmp3v1.theta();
          calojetphi9j[ncalojets9j] = tmp3v1.phi();
          calojeten9j[ncalojets9j] = (2*ipass - 1)*(*calojet9j)[ijet].energy();
          calojetmul9j[ncalojets9j] = (*calojet9j)[ijet].nConstituents();
          if (ipasstight==0) calojetmul9j[ncalojets9j] = -calojetmul9j[ncalojets9j];
          
          calojetemf9j[ncalojets9j] = (*calojet9j)[ijet].emEnergyFraction();
          calojetho9j[ncalojets9j] = (*calojet9j)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojet9j)[ijet].nConstituents(); ij++) {
            energy +=(*calojet9j)[ijet].getCaloConstituent(ij)->p();
          }
          calojetumm9j[ncalojets9j] = energy;
          ncalojets9j++;
          if (ncalojets9j>=njetmx) break;
        }
      }
    }


    if (iTag>10) {
      edm::Handle<METCollection> tcmetsak;
      
      bool istcMetsak = true;
      try {
        iEvent.getByLabel("tcMet10", tcmetsak);   
      } catch ( cms::Exception &iEvent ) { istcMetsak = false; } 
      
      misettcak = misphitcak = -100;
      if (istcMetsak && tcmetsak.isValid()) {
        misettcak = tcmetsak->begin()->et();
        misphitcak = tcmetsak->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojetak; 
      try {
        iEvent.getByLabel("ak5CaloJets10", calojetak);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetsak=0;
      if (calojetak.isValid()) {
        for (unsigned ijet = 0; ijet< calojetak->size(); ijet++) {
          if (abs((*calojetak)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[12]->Fill((*calojetak)[ijet].phi(), (*calojetak)[ijet].pt());
          if ((*calojetak)[ijet].pt()<jtptbins[0]) continue;

          //	cout <<"ijetsak "<<ijet<<" "<<(*calojetak)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojetak)[ijet].nConstituents() <2) continue;
          if (abs((*calojetak)[ijet].eta())<2.6 && (*calojetak)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojetak)[ijet].eta())<2.6 && (*calojetak)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojetak)[ijet].px(), (*calojetak)[ijet].py(), (*calojetak)[ijet].pz());
          
          calojetmomak[ncalojetsak] = tmp3v1.mag();
          calojettheak[ncalojetsak] = tmp3v1.theta();
          calojetphiak[ncalojetsak] = tmp3v1.phi();
          calojetenak[ncalojetsak] = (2*ipass - 1)*(*calojetak)[ijet].energy();
          calojetmulak[ncalojetsak] = (*calojetak)[ijet].nConstituents();
          if (ipasstight==0) calojetmulak[ncalojetsak] = -calojetmulak[ncalojetsak];
          
          calojetemfak[ncalojetsak] = (*calojetak)[ijet].emEnergyFraction();
          calojethoak[ncalojetsak] = (*calojetak)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojetak)[ijet].nConstituents(); ij++) {
            energy +=(*calojetak)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummak[ncalojetsak] = energy;
          ncalojetsak++;
          if (ncalojetsak>=njetmx) break;
        }
      }
    }


    if (iTag>11) {
      edm::Handle<METCollection> tcmetsbl;
      
      bool istcMetsbl = true;
      try {
        iEvent.getByLabel("tcMet11", tcmetsbl);   
      } catch ( cms::Exception &iEvent ) { istcMetsbl = false; } 
      
      misettcbl = misphitcbl = -100;
      if (istcMetsbl && tcmetsbl.isValid()) {
        misettcbl = tcmetsbl->begin()->et();
        misphitcbl = tcmetsbl->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojetbl; 
      try {
        iEvent.getByLabel("ak5CaloJets11", calojetbl);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetsbl=0;
      if (calojetbl.isValid()) {
        for (unsigned ijet = 0; ijet< calojetbl->size(); ijet++) {
          if (abs((*calojetbl)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[13]->Fill((*calojetbl)[ijet].phi(), (*calojetbl)[ijet].pt());
          if ((*calojetbl)[ijet].pt()<jtptbins[0]) continue;
	  
          //	cout <<"ijetsbl "<<ijet<<" "<<(*calojetbl)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojetbl)[ijet].nConstituents() <2) continue;
          if (abs((*calojetbl)[ijet].eta())<2.6 && (*calojetbl)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojetbl)[ijet].eta())<2.6 && (*calojetbl)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojetbl)[ijet].px(), (*calojetbl)[ijet].py(), (*calojetbl)[ijet].pz());
          
          calojetmombl[ncalojetsbl] = tmp3v1.mag();
          calojetthebl[ncalojetsbl] = tmp3v1.theta();
          calojetphibl[ncalojetsbl] = tmp3v1.phi();
          calojetenbl[ncalojetsbl] = (2*ipass - 1)*(*calojetbl)[ijet].energy();
          calojetmulbl[ncalojetsbl] = (*calojetbl)[ijet].nConstituents();
          if (ipasstight==0) calojetmulbl[ncalojetsbl] = -calojetmulbl[ncalojetsbl];
          
          calojetemfbl[ncalojetsbl] = (*calojetbl)[ijet].emEnergyFraction();
          calojethobl[ncalojetsbl] = (*calojetbl)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojetbl)[ijet].nConstituents(); ij++) {
            energy +=(*calojetbl)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummbl[ncalojetsbl] = energy;
          ncalojetsbl++;
          if (ncalojetsbl>=njetmx) break;
        }
      }
    }


    if (iTag>12) {
      edm::Handle<METCollection> tcmetscm;
      
      bool istcMetscm = true;
      try {
        iEvent.getByLabel("tcMet12", tcmetscm);   
      } catch ( cms::Exception &iEvent ) { istcMetscm = false; } 
      
      misettccm = misphitccm = -100;
      if (istcMetscm && tcmetscm.isValid()) {
        misettccm = tcmetscm->begin()->et();
        misphitccm = tcmetscm->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojetcm; 
      try {
        iEvent.getByLabel("ak5CaloJets12", calojetcm);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetscm=0;
      if (calojetcm.isValid()) {
        for (unsigned ijet = 0; ijet< calojetcm->size(); ijet++) {
          if (abs((*calojetcm)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[14]->Fill((*calojetcm)[ijet].phi(), (*calojetcm)[ijet].pt());
          if ((*calojetcm)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijetscm "<<ijet<<" "<<(*calojetcm)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojetcm)[ijet].nConstituents() <2) continue;
          if (abs((*calojetcm)[ijet].eta())<2.6 && (*calojetcm)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojetcm)[ijet].eta())<2.6 && (*calojetcm)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojetcm)[ijet].px(), (*calojetcm)[ijet].py(), (*calojetcm)[ijet].pz());
          
          calojetmomcm[ncalojetscm] = tmp3v1.mag();
          calojetthecm[ncalojetscm] = tmp3v1.theta();
          calojetphicm[ncalojetscm] = tmp3v1.phi();
          calojetencm[ncalojetscm] = (2*ipass - 1)*(*calojetcm)[ijet].energy();
          calojetmulcm[ncalojetscm] = (*calojetcm)[ijet].nConstituents();
          if (ipasstight==0) calojetmulcm[ncalojetscm] = -calojetmulcm[ncalojetscm];
          
          calojetemfcm[ncalojetscm] = (*calojetcm)[ijet].emEnergyFraction();
          calojethocm[ncalojetscm] = (*calojetcm)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojetcm)[ijet].nConstituents(); ij++) {
            energy +=(*calojetcm)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummcm[ncalojetscm] = energy;
          ncalojetscm++;
          if (ncalojetscm>=njetmx) break;
        }
      }
    }


    if (iTag>13) {
      edm::Handle<METCollection> tcmetsdn;
      
      bool istcMetsdn = true;
      try {
        iEvent.getByLabel("tcMet13", tcmetsdn);   
      } catch ( cms::Exception &iEvent ) { istcMetsdn = false; } 
      
      misettcdn = misphitcdn = -100;
      if (istcMetsdn && tcmetsdn.isValid()) {
        misettcdn = tcmetsdn->begin()->et();
        misphitcdn = tcmetsdn->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojetdn; 
      try {
        iEvent.getByLabel("ak5CaloJets13", calojetdn);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetsdn=0;
      if (calojetdn.isValid()) {
        for (unsigned ijet = 0; ijet< calojetdn->size(); ijet++) {
          if (abs((*calojetdn)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[15]->Fill((*calojetdn)[ijet].phi(), (*calojetdn)[ijet].pt());
          if ((*calojetdn)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijetsdn "<<ijet<<" "<<(*calojetdn)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojetdn)[ijet].nConstituents() <2) continue;
          if (abs((*calojetdn)[ijet].eta())<2.6 && (*calojetdn)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojetdn)[ijet].eta())<2.6 && (*calojetdn)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojetdn)[ijet].px(), (*calojetdn)[ijet].py(), (*calojetdn)[ijet].pz());
          
          calojetmomdn[ncalojetsdn] = tmp3v1.mag();
          calojetthedn[ncalojetsdn] = tmp3v1.theta();
          calojetphidn[ncalojetsdn] = tmp3v1.phi();
          calojetendn[ncalojetsdn] = (2*ipass - 1)*(*calojetdn)[ijet].energy();
          calojetmuldn[ncalojetsdn] = (*calojetdn)[ijet].nConstituents();
          if (ipasstight==0) calojetmuldn[ncalojetsdn] = -calojetmuldn[ncalojetsdn];
          
          calojetemfdn[ncalojetsdn] = (*calojetdn)[ijet].emEnergyFraction();
          calojethodn[ncalojetsdn] = (*calojetdn)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojetdn)[ijet].nConstituents(); ij++) {
            energy +=(*calojetdn)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummdn[ncalojetsdn] = energy;
          ncalojetsdn++;
          if (ncalojetsdn>=njetmx) break;
        }
      }
    }


    if (iTag>14) {
      edm::Handle<METCollection> tcmetseo;
      
      bool istcMetseo = true;
      try {
        iEvent.getByLabel("tcMet14", tcmetseo);   
      } catch ( cms::Exception &iEvent ) { istcMetseo = false; } 
      
      misettceo = misphitceo = -100;
      if (istcMetseo && tcmetseo.isValid()) {
        misettceo = tcmetseo->begin()->et();
        misphitceo = tcmetseo->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojeteo; 
      try {
        iEvent.getByLabel("ak5CaloJets14", calojeteo);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetseo=0;
      if (calojeteo.isValid()) {
        for (unsigned ijet = 0; ijet< calojeteo->size(); ijet++) {
          if (abs((*calojeteo)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[16]->Fill((*calojeteo)[ijet].phi(), (*calojeteo)[ijet].pt());
          if ((*calojeteo)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijetseo "<<ijet<<" "<<(*calojeteo)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojeteo)[ijet].nConstituents() <2) continue;
          if (abs((*calojeteo)[ijet].eta())<2.6 && (*calojeteo)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojeteo)[ijet].eta())<2.6 && (*calojeteo)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojeteo)[ijet].px(), (*calojeteo)[ijet].py(), (*calojeteo)[ijet].pz());
          
          calojetmomeo[ncalojetseo] = tmp3v1.mag();
          calojettheeo[ncalojetseo] = tmp3v1.theta();
          calojetphieo[ncalojetseo] = tmp3v1.phi();
          calojeteneo[ncalojetseo] = (2*ipass - 1)*(*calojeteo)[ijet].energy();
          calojetmuleo[ncalojetseo] = (*calojeteo)[ijet].nConstituents();
          if (ipasstight==0) calojetmuleo[ncalojetseo] = -calojetmuleo[ncalojetseo];
          
          calojetemfeo[ncalojetseo] = (*calojeteo)[ijet].emEnergyFraction();
          calojethoeo[ncalojetseo] = (*calojeteo)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojeteo)[ijet].nConstituents(); ij++) {
            energy +=(*calojeteo)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummeo[ncalojetseo] = energy;
          ncalojetseo++;
          if (ncalojetseo>=njetmx) break;
        }
      }
    }

    if (iTag>15) {
      edm::Handle<METCollection> tcmetsfp;
      
      bool istcMetsfp = true;
      try {
        iEvent.getByLabel("tcMet15", tcmetsfp);   
      } catch ( cms::Exception &iEvent ) { istcMetsfp = false; } 
      
      misettcfp = misphitcfp = -100;
      if (istcMetsfp && tcmetsfp.isValid()) {
        misettcfp = tcmetsfp->begin()->et();
        misphitcfp = tcmetsfp->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojetfp; 
      try {
        iEvent.getByLabel("ak5CaloJets15", calojetfp);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetsfp=0;
      if (calojetfp.isValid()) {
        for (unsigned ijet = 0; ijet< calojetfp->size(); ijet++) {
          if (abs((*calojetfp)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[17]->Fill((*calojetfp)[ijet].phi(), (*calojetfp)[ijet].pt());
          if ((*calojetfp)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijetsfp "<<ijet<<" "<<(*calojetfp)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojetfp)[ijet].nConstituents() <2) continue;
          if (abs((*calojetfp)[ijet].eta())<2.6 && (*calojetfp)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojetfp)[ijet].eta())<2.6 && (*calojetfp)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojetfp)[ijet].px(), (*calojetfp)[ijet].py(), (*calojetfp)[ijet].pz());
          
          calojetmomfp[ncalojetsfp] = tmp3v1.mag();
          calojetthefp[ncalojetsfp] = tmp3v1.theta();
          calojetphifp[ncalojetsfp] = tmp3v1.phi();
          calojetenfp[ncalojetsfp] = (2*ipass - 1)*(*calojetfp)[ijet].energy();
          calojetmulfp[ncalojetsfp] = (*calojetfp)[ijet].nConstituents();
          if (ipasstight==0) calojetmulfp[ncalojetsfp] = -calojetmulfp[ncalojetsfp];
          
          calojetemffp[ncalojetsfp] = (*calojetfp)[ijet].emEnergyFraction();
          calojethofp[ncalojetsfp] = (*calojetfp)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojetfp)[ijet].nConstituents(); ij++) {
            energy +=(*calojetfp)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummfp[ncalojetsfp] = energy;
          ncalojetsfp++;
          if (ncalojetsfp>=njetmx) break;
        }
      }
    }

    if (iTag>16) {
      edm::Handle<METCollection> tcmetsgq;
      
      bool istcMetsgq = true;
      try {
        iEvent.getByLabel("tcMet16", tcmetsgq);   
      } catch ( cms::Exception &iEvent ) { istcMetsgq = false; } 
      
      misettcgq = misphitcgq = -100;
      if (istcMetsgq && tcmetsgq.isValid()) {
        misettcgq = tcmetsgq->begin()->et();
        misphitcgq = tcmetsgq->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojetgq; 
      try {
        iEvent.getByLabel("ak5CaloJets16", calojetgq);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetsgq=0;
      if (calojetgq.isValid()) {
        for (unsigned ijet = 0; ijet< calojetgq->size(); ijet++) {
          if (abs((*calojetgq)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[18]->Fill((*calojetgq)[ijet].phi(), (*calojetgq)[ijet].pt());
          if ((*calojetgq)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijetsgq "<<ijet<<" "<<(*calojetgq)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojetgq)[ijet].nConstituents() <2) continue;
          if (abs((*calojetgq)[ijet].eta())<2.6 && (*calojetgq)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojetgq)[ijet].eta())<2.6 && (*calojetgq)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojetgq)[ijet].px(), (*calojetgq)[ijet].py(), (*calojetgq)[ijet].pz());
          
          calojetmomgq[ncalojetsgq] = tmp3v1.mag();
          calojetthegq[ncalojetsgq] = tmp3v1.theta();
          calojetphigq[ncalojetsgq] = tmp3v1.phi();
          calojetengq[ncalojetsgq] = (2*ipass - 1)*(*calojetgq)[ijet].energy();
          calojetmulgq[ncalojetsgq] = (*calojetgq)[ijet].nConstituents();
          if (ipasstight==0) calojetmulgq[ncalojetsgq] = -calojetmulgq[ncalojetsgq];
          
          calojetemfgq[ncalojetsgq] = (*calojetgq)[ijet].emEnergyFraction();
          calojethogq[ncalojetsgq] = (*calojetgq)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojetgq)[ijet].nConstituents(); ij++) {
            energy +=(*calojetgq)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummgq[ncalojetsgq] = energy;
          ncalojetsgq++;
          if (ncalojetsfp>=njetmx) break;
        }
      }
    }

    if (iTag>17) {
      edm::Handle<METCollection> tcmetshr;
      
      bool istcMetshr = true;
      try {
        iEvent.getByLabel("tcMet17", tcmetshr);   
      } catch ( cms::Exception &iEvent ) { istcMetshr = false; } 
      
      misettchr = misphitchr = -100;
      if (istcMetshr && tcmetshr.isValid()) {
        misettchr = tcmetshr->begin()->et();
        misphitchr = tcmetshr->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojethr; 
      try {
        iEvent.getByLabel("ak5CaloJets17", calojethr);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetshr=0;
      if (calojethr.isValid()) {
        for (unsigned ijet = 0; ijet< calojethr->size(); ijet++) {
          if (abs((*calojethr)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[19]->Fill((*calojethr)[ijet].phi(), (*calojethr)[ijet].pt());
          if ((*calojethr)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijetshr "<<ijet<<" "<<(*calojethr)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojethr)[ijet].nConstituents() <2) continue;
          if (abs((*calojethr)[ijet].eta())<2.6 && (*calojethr)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojethr)[ijet].eta())<2.6 && (*calojethr)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojethr)[ijet].px(), (*calojethr)[ijet].py(), (*calojethr)[ijet].pz());
          
          calojetmomhr[ncalojetshr] = tmp3v1.mag();
          calojetthehr[ncalojetshr] = tmp3v1.theta();
          calojetphihr[ncalojetshr] = tmp3v1.phi();
          calojetenhr[ncalojetshr] = (2*ipass - 1)*(*calojethr)[ijet].energy();
          calojetmulhr[ncalojetshr] = (*calojethr)[ijet].nConstituents();
          if (ipasstight==0) calojetmulhr[ncalojetshr] = -calojetmulhr[ncalojetshr];
          
          calojetemfhr[ncalojetshr] = (*calojethr)[ijet].emEnergyFraction();
          calojethohr[ncalojetshr] = (*calojethr)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojethr)[ijet].nConstituents(); ij++) {
            energy +=(*calojethr)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummhr[ncalojetshr] = energy;
          ncalojetshr++;
          if (ncalojetshr>=njetmx) break;
        }
      }
    }


    if (iTag>18) {
      edm::Handle<METCollection> tcmetsis;
      
      bool istcMetsis = true;
      try {
        iEvent.getByLabel("tcMet18", tcmetsis);   
      } catch ( cms::Exception &iEvent ) { istcMetsis = false; } 
      
      misettcis = misphitcis = -100;
      if (istcMetsis && tcmetsis.isValid()) {
        misettcis = tcmetsis->begin()->et();
        misphitcis = tcmetsis->begin()->phi();
      }
      
      edm::Handle<reco::CaloJetCollection>calojetis; 
      try {
        iEvent.getByLabel("ak5CaloJets18", calojetis);
      } catch ( cms::Exception &iEvent ) { ;}
      
      ncalojetsis=0;
      if (calojetis.isValid()) {
        for (unsigned ijet = 0; ijet< calojetis->size(); ijet++) {
          if (abs((*calojetis)[ijet].eta())>etarng) continue;
	  h_calojtptvseta[20]->Fill((*calojetis)[ijet].phi(), (*calojetis)[ijet].pt());
          if ((*calojetis)[ijet].pt()<jtptbins[0]) continue;
          //	cout <<"ijetsis "<<ijet<<" "<<(*calojetis)[ijet].hadEnergyInHO()<<endl;
          int ipass = 1;
          if ((*calojetis)[ijet].nConstituents() <2) continue;
          if (abs((*calojetis)[ijet].eta())<2.6 && (*calojetis)[ijet].emEnergyFraction() <0.01) ipass = 0; //continue;
          int ipasstight = ipass;
          if (abs((*calojetis)[ijet].eta())<2.6 && (*calojetis)[ijet].emEnergyFraction() >=1.0) ipasstight = 0; //continue;
          
          Hep3Vector tmp3v1((*calojetis)[ijet].px(), (*calojetis)[ijet].py(), (*calojetis)[ijet].pz());
          
          calojetmomis[ncalojetsis] = tmp3v1.mag();
          calojettheis[ncalojetsis] = tmp3v1.theta();
          calojetphiis[ncalojetsis] = tmp3v1.phi();
          calojetenis[ncalojetsis] = (2*ipass - 1)*(*calojetis)[ijet].energy();
          calojetmulis[ncalojetsis] = (*calojetis)[ijet].nConstituents();
          if (ipasstight==0) calojetmulis[ncalojetsis] = -calojetmulis[ncalojetsis];
          
          calojetemfis[ncalojetsis] = (*calojetis)[ijet].emEnergyFraction();
          calojethois[ncalojetsis] = (*calojetis)[ijet].hadEnergyInHO();
          double energy = 0;
          for (int ij=0; ij<(*calojetis)[ijet].nConstituents(); ij++) {
            energy +=(*calojetis)[ijet].getCaloConstituent(ij)->p();
          }
          calojetummis[ncalojetsis] = energy;
          ncalojetsis++;
          if (ncalojetsis>=njetmx) break;
        }
      }
    }
  } // if (ReRECO) 
 
  if (!isOnlyDigi) { 
    edm::Handle<reco::PFJetCollection> PFJetsst;
    edm::Handle<PFMETCollection> pfmetsst;
    
    InputTag metLabelx("pfMet","", "RECO");
    iEvent.getByLabel(metLabelx, pfmetsst); 
    
    if (!pfmetsst.isValid()) {
      InputTag metLabel2(metLabelx.label(), metLabelx.instance(), "HLT");
      iEvent.getByLabel(metLabel2, pfmetsst); 
    }
    
    misetpfst = misphipfst = -100;
    if (pfmetsst.isValid()) {
      misetpfst = pfmetsst->begin()->et();
      misphipfst = pfmetsst->begin()->phi();
      pfmtsignst = pfmetsst->begin()->significance();
    }
    
    njetsst = 0;
    InputTag jetLabelx("ak5PFJets","","RECO");
    iEvent.getByLabel(jetLabelx, PFJetsst); 
    
    if (!PFJetsst.isValid()) {
      InputTag jetLabel2(jetLabelx.label(), jetLabelx.instance(), "HLT");
      iEvent.getByLabel(jetLabel2, PFJetsst);
    }
    
    if (PFJetsst.isValid()) {
      for (unsigned jet = 0; jet<PFJetsst->size(); jet++) {
	if (abs((*PFJetsst)[jet].eta())>etarng) continue;
	h_pfjtptvseta[0]->Fill((*PFJetsst)[jet].phi(), (*PFJetsst)[jet].pt());
	if ((*PFJetsst)[jet].pt()<jtptbins[0]) continue;
	HepLorentzVector jet4v((*PFJetsst)[jet].px(),(*PFJetsst)[jet].py(),(*PFJetsst)[jet].pz(), (*PFJetsst)[jet].p());
	
	
	jetuncst[njetsst] = 0.0;
	jetummst[njetsst] = 0.0;
	jetmomst[njetsst] = jet4v.rho();
	jetthest[njetsst] = jet4v.theta();
	jetphist[njetsst] = jet4v.phi();
	
	neuemfst[njetsst] = (*PFJetsst)[jet].neutralEmEnergyFraction();
	chghadst[njetsst] = (*PFJetsst)[jet].chargedHadronEnergyFraction();
	neuhadst[njetsst] = (*PFJetsst)[jet].neutralHadronEnergyFraction();
	//      cout <<"jetsst "<< jet4v<<" "<<misetpfst<<" "<<neuhadst[njetsst]<<endl;
	
	jetmulst[njetsst] = min(9,(*PFJetsst)[jet].muonMultiplicity()) 
	  + 10*min(99,(*PFJetsst)[jet].chargedHadronMultiplicity()) 
	  + 1000*min(99,(*PFJetsst)[jet].neutralHadronMultiplicity())
	  + 100000*min(99,(*PFJetsst)[jet].electronMultiplicity())
	  + 10000000*min(99,(*PFJetsst)[jet].photonMultiplicity ());
	
	HepLorentzVector const4v(0,0,0,0);
	for (int ix=0; ix<(*PFJetsst)[jet].nConstituents(); ix++) {
	  const reco::PFCandidatePtr pfcand = (*PFJetsst)[jet].getPFConstituent (ix);
	  
	  const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
	}
	jetuncst[njetsst] =const4v.e();
	jetummst[njetsst] =const4v.rho(); 
	
	if (++njetsst >=njetmx) break;
      }
    }
  }
 
  if (ReRECO) {

    edm::Handle<reco::PFJetCollection> PFJetsre;
    edm::Handle<PFMETCollection> pfmetsre;
    bool ispfMetsre = true;
    try {
      //    iEvent.getByLabel("pfMet", pfmetsre);  
      InputTag metLabel("pfMet","", "Combined");
      iEvent.getByLabel(metLabel, pfmetsre);  
    } catch ( cms::Exception &iEvent ) { ispfMetsre = false; } 
    misetpfre = misphipfre = -100;
    if (ispfMetsre && pfmetsre.isValid()) {
      misetpfre = pfmetsre->begin()->et();
      misphipfre = pfmetsre->begin()->phi();
      pfmtsignre = pfmetsre->begin()->significance();
    }

    njetsre = 0;
    bool isPFJetsre = true;
    try {
      InputTag jetLabel("ak5PFJets","","Combined");
      iEvent.getByLabel(jetLabel, PFJetsre);
      //    iEvent.getByLabel("ak5PFJets", PFJetsre); 
    } catch ( cms::Exception &iEvent ) { isPFJetsre = false; } 
    if (isPFJetsre && PFJetsre.isValid()) {
      for (unsigned jet = 0; jet<PFJetsre->size(); jet++) {
        if (abs((*PFJetsre)[jet].eta())>etarng) continue;
	h_pfjtptvseta[1]->Fill((*PFJetsre)[jet].phi(), (*PFJetsre)[jet].pt());
        if ((*PFJetsre)[jet].pt()<jtptbins[0]) continue;
        HepLorentzVector jet4v((*PFJetsre)[jet].px(),(*PFJetsre)[jet].py(),(*PFJetsre)[jet].pz(), (*PFJetsre)[jet].p());
        

        jetuncre[njetsre] = 0.0;
        jetummre[njetsre] = 0.0;
        jetmomre[njetsre] = jet4v.rho();
        jetthere[njetsre] = jet4v.theta();
        jetphire[njetsre] = jet4v.phi();
        
        neuemfre[njetsre] = (*PFJetsre)[jet].neutralEmEnergyFraction();
        chghadre[njetsre] = (*PFJetsre)[jet].chargedHadronEnergyFraction();
        neuhadre[njetsre] = (*PFJetsre)[jet].neutralHadronEnergyFraction();
        //      cout <<"jetsre "<< jet4v<<" "<<misetpfre<<" "<<neuhadre[njetsre]<<endl;
        
        jetmulre[njetsre] = min(9,(*PFJetsre)[jet].muonMultiplicity()) 
          + 10*min(99,(*PFJetsre)[jet].chargedHadronMultiplicity()) 
          + 1000*min(99,(*PFJetsre)[jet].neutralHadronMultiplicity())
          + 100000*min(99,(*PFJetsre)[jet].electronMultiplicity())
          + 10000000*min(99,(*PFJetsre)[jet].photonMultiplicity ());
        
        HepLorentzVector const4v(0,0,0,0);
        for (int ix=0; ix<(*PFJetsre)[jet].nConstituents(); ix++) {
          const reco::PFCandidatePtr pfcand = (*PFJetsre)[jet].getPFConstituent (ix);
          
          const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
        }
        jetuncre[njetsre] =const4v.e();
        jetummre[njetsre] =const4v.rho(); 
        
        if (++njetsre >=njetmx) break;
      }
    }




    edm::Handle<reco::PFJetCollection> PFJets0a;
    edm::Handle<PFMETCollection> pfmets0a;
    bool ispfMets0a = true;
    try {
      iEvent.getByLabel("recoPFMET00", pfmets0a);   
      //    InputTag metLabel("pfMet","", "Combined");
      //    iEvent.getByLabel(metLabel, pfmets0a);   
    } catch ( cms::Exception &iEvent ) { ispfMets0a = false; } 
    misetpf0a = misphipf0a = -100;
    if (ispfMets0a && pfmets0a.isValid()) {
      misetpf0a = pfmets0a->begin()->et();
      misphipf0a = pfmets0a->begin()->phi();
      pfmtsign0a = pfmets0a->begin()->significance();
    }

    njets0a = 0;
    bool isPFJets0a = true;

    try {
      //    InputTag jetLabel("ak5PFJets","", "Combined");
      //    iEvent.getByLabel(jetLabel, PFJets0a);
      iEvent.getByLabel("ak5PFJets00", PFJets0a); 
    } catch ( cms::Exception &iEvent ) { isPFJets0a = false; } 
    if (isPFJets0a && PFJets0a.isValid()) {
      for (unsigned jet = 0; jet<PFJets0a->size(); jet++) {
        if (abs((*PFJets0a)[jet].eta())>etarng) continue;
	h_pfjtptvseta[2]->Fill((*PFJets0a)[jet].phi(), (*PFJets0a)[jet].pt());
        if ((*PFJets0a)[jet].pt()<jtptbins[0]) continue;
        HepLorentzVector jet4v((*PFJets0a)[jet].px(),(*PFJets0a)[jet].py(),(*PFJets0a)[jet].pz(), (*PFJets0a)[jet].p());
        
        jetunc0a[njets0a] = 0.0;
        jetumm0a[njets0a] = 0.0;
        jetmom0a[njets0a] = jet4v.rho();
        jetthe0a[njets0a] = jet4v.theta();
        jetphi0a[njets0a] = jet4v.phi();
        
        neuemf0a[njets0a] = (*PFJets0a)[jet].neutralEmEnergyFraction();
        chghad0a[njets0a] = (*PFJets0a)[jet].chargedHadronEnergyFraction();
        neuhad0a[njets0a] = (*PFJets0a)[jet].neutralHadronEnergyFraction();
        //      cout <<"jets0a "<< jet4v<<" "<<misetpf0a<<" "<<neuhad0a[njets0a]<<endl;
        
        jetmul0a[njets0a] = min(9,(*PFJets0a)[jet].muonMultiplicity()) 
          + 10*min(99,(*PFJets0a)[jet].chargedHadronMultiplicity()) 
          + 1000*min(99,(*PFJets0a)[jet].neutralHadronMultiplicity())
          + 100000*min(99,(*PFJets0a)[jet].electronMultiplicity())
          + 10000000*min(99,(*PFJets0a)[jet].photonMultiplicity ());
        
        HepLorentzVector const4v(0,0,0,0);
        for (int ix=0; ix<(*PFJets0a)[jet].nConstituents(); ix++) {
          const reco::PFCandidatePtr pfcand = (*PFJets0a)[jet].getPFConstituent (ix);
          
          const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
        }
        jetunc0a[njets0a] =const4v.e();
        jetumm0a[njets0a] =const4v.rho(); 
        
        if (++njets0a >=njetmx) break;
      }
    }

    njets1b = njets2c = njets3d = njets4e = njets5f = njets6g = njets7h = 0;
    njets8i = njets9j = njetsak = njetsbl = njetscm = njetsdn = njetseo = njetsfp = njetsgq = njetshr = njetsis= 0;


    if (iTag>1) {
      edm::Handle<reco::PFJetCollection> PFJets1b;
      edm::Handle<PFMETCollection> pfmets1b;
      bool ispfMets1b = true;
      try {
        iEvent.getByLabel("recoPFMET01", pfmets1b);   
      } catch ( cms::Exception &iEvent ) { ispfMets1b = false; } 
      misetpf1b = misphipf1b = -100;
      if (ispfMets1b && pfmets1b.isValid()) {
        misetpf1b = pfmets1b->begin()->et();
        misphipf1b = pfmets1b->begin()->phi();
        pfmtsign1b = pfmets1b->begin()->significance();
      }
      
      bool isPFJets1b = true;
      
      try {
        iEvent.getByLabel("ak5PFJets01", PFJets1b); 
      } catch ( cms::Exception &iEvent ) { isPFJets1b = false; } 
      if (isPFJets1b && PFJets1b.isValid()) {
        for (unsigned jet = 0; jet<PFJets1b->size(); jet++) {
          if (abs((*PFJets1b)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[3]->Fill((*PFJets1b)[jet].phi(), (*PFJets1b)[jet].pt());
          if ((*PFJets1b)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets1b)[jet].px(),(*PFJets1b)[jet].py(),(*PFJets1b)[jet].pz(), (*PFJets1b)[jet].p());
          
          jetunc1b[njets1b] = 0.0;
          jetumm1b[njets1b] = 0.0;
          jetmom1b[njets1b] = jet4v.rho();
          jetthe1b[njets1b] = jet4v.theta();
          jetphi1b[njets1b] = jet4v.phi();
          
          neuemf1b[njets1b] = (*PFJets1b)[jet].neutralEmEnergyFraction();
          chghad1b[njets1b] = (*PFJets1b)[jet].chargedHadronEnergyFraction();
          neuhad1b[njets1b] = (*PFJets1b)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets1b "<< jet4v<<" "<<misetpf1b<<" "<<neuhad1b[njets1b]<<endl;
          
          jetmul1b[njets1b] = min(9,(*PFJets1b)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets1b)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets1b)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets1b)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets1b)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets1b)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets1b)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc1b[njets1b] =const4v.e();
          jetumm1b[njets1b] =const4v.rho(); 
          
          if (++njets1b >=njetmx) break;
        }
      }
    }

    if (iTag>2) {
      edm::Handle<reco::PFJetCollection> PFJets2c;
      edm::Handle<PFMETCollection> pfmets2c;
      bool ispfMets2c = true;
      try {
        iEvent.getByLabel("recoPFMET02", pfmets2c);   
      } catch ( cms::Exception &iEvent ) { ispfMets2c = false; } 
      misetpf2c = misphipf2c = -100;
      if (ispfMets2c && pfmets2c.isValid()) {
        misetpf2c = pfmets2c->begin()->et();
        misphipf2c = pfmets2c->begin()->phi();
        pfmtsign2c = pfmets2c->begin()->significance();
      }
      
      bool isPFJets2c = true;
      
      try {
        iEvent.getByLabel("ak5PFJets02", PFJets2c); 
      } catch ( cms::Exception &iEvent ) { isPFJets2c = false; } 
      if (isPFJets2c && PFJets2c.isValid()) {
        for (unsigned jet = 0; jet<PFJets2c->size(); jet++) {
          if (abs((*PFJets2c)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[4]->Fill((*PFJets2c)[jet].phi(), (*PFJets2c)[jet].pt());
          if ((*PFJets2c)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets2c)[jet].px(),(*PFJets2c)[jet].py(),(*PFJets2c)[jet].pz(), (*PFJets2c)[jet].p());
          
          jetunc2c[njets2c] = 0.0;
          jetumm2c[njets2c] = 0.0;
          jetmom2c[njets2c] = jet4v.rho();
          jetthe2c[njets2c] = jet4v.theta();
          jetphi2c[njets2c] = jet4v.phi();
          
          neuemf2c[njets2c] = (*PFJets2c)[jet].neutralEmEnergyFraction();
          chghad2c[njets2c] = (*PFJets2c)[jet].chargedHadronEnergyFraction();
          neuhad2c[njets2c] = (*PFJets2c)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets2c "<< jet4v<<" "<<misetpf2c<<" "<<neuhad2c[njets2c]<<endl;
          
          jetmul2c[njets2c] = min(9,(*PFJets2c)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets2c)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets2c)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets2c)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets2c)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets2c)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets2c)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc2c[njets2c] =const4v.e();
          jetumm2c[njets2c] =const4v.rho(); 
          
          if (++njets2c >=njetmx) break;
        }
      }
    }

    if (iTag>3) {
      edm::Handle<reco::PFJetCollection> PFJets3d;
      edm::Handle<PFMETCollection> pfmets3d;
      bool ispfMets3d = true;
      try {
        iEvent.getByLabel("recoPFMET03", pfmets3d);   
      } catch ( cms::Exception &iEvent ) { ispfMets3d = false; } 
      misetpf3d = misphipf3d = -100;
      if (ispfMets3d && pfmets3d.isValid()) {
        misetpf3d = pfmets3d->begin()->et();
        misphipf3d = pfmets3d->begin()->phi();
        pfmtsign3d = pfmets3d->begin()->significance();
      }
      
      bool isPFJets3d = true;
      
      try {
        iEvent.getByLabel("ak5PFJets03", PFJets3d); 
      } catch ( cms::Exception &iEvent ) { isPFJets3d = false; } 
      if (isPFJets3d && PFJets3d.isValid()) {
        for (unsigned jet = 0; jet<PFJets3d->size(); jet++) {
          if (abs((*PFJets3d)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[5]->Fill((*PFJets3d)[jet].phi(), (*PFJets3d)[jet].pt());
          if ((*PFJets3d)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets3d)[jet].px(),(*PFJets3d)[jet].py(),(*PFJets3d)[jet].pz(), (*PFJets3d)[jet].p());
          
          jetunc3d[njets3d] = 0.0;
          jetumm3d[njets3d] = 0.0;
          jetmom3d[njets3d] = jet4v.rho();
          jetthe3d[njets3d] = jet4v.theta();
          jetphi3d[njets3d] = jet4v.phi();
          
          neuemf3d[njets3d] = (*PFJets3d)[jet].neutralEmEnergyFraction();
          chghad3d[njets3d] = (*PFJets3d)[jet].chargedHadronEnergyFraction();
          neuhad3d[njets3d] = (*PFJets3d)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets3d "<< jet4v<<" "<<misetpf3d<<" "<<neuhad3d[njets3d]<<endl;
          
          jetmul3d[njets3d] = min(9,(*PFJets3d)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets3d)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets3d)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets3d)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets3d)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets3d)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets3d)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc3d[njets3d] =const4v.e();
          jetumm3d[njets3d] =const4v.rho(); 
          
          if (++njets3d >=njetmx) break;
        }
      }
    }


    if (iTag>4) {
      edm::Handle<reco::PFJetCollection> PFJets4e;
      edm::Handle<PFMETCollection> pfmets4e;
      bool ispfMets4e = true;
      try {
        iEvent.getByLabel("recoPFMET04", pfmets4e);   
      } catch ( cms::Exception &iEvent ) { ispfMets4e = false; } 
      misetpf4e = misphipf4e = -100;
      if (ispfMets4e && pfmets4e.isValid()) {
        misetpf4e = pfmets4e->begin()->et();
        misphipf4e = pfmets4e->begin()->phi();
        pfmtsign4e = pfmets4e->begin()->significance();
      }
      
      bool isPFJets4e = true;
      
      try {
        iEvent.getByLabel("ak5PFJets04", PFJets4e); 
      } catch ( cms::Exception &iEvent ) { isPFJets4e = false; } 
      if (isPFJets4e && PFJets4e.isValid()) {
        for (unsigned jet = 0; jet<PFJets4e->size(); jet++) {
          if (abs((*PFJets4e)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[6]->Fill((*PFJets4e)[jet].phi(), (*PFJets4e)[jet].pt());
          if ((*PFJets4e)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets4e)[jet].px(),(*PFJets4e)[jet].py(),(*PFJets4e)[jet].pz(), (*PFJets4e)[jet].p());
          
          jetunc4e[njets4e] = 0.0;
          jetumm4e[njets4e] = 0.0;
          jetmom4e[njets4e] = jet4v.rho();
          jetthe4e[njets4e] = jet4v.theta();
          jetphi4e[njets4e] = jet4v.phi();
          
          neuemf4e[njets4e] = (*PFJets4e)[jet].neutralEmEnergyFraction();
          chghad4e[njets4e] = (*PFJets4e)[jet].chargedHadronEnergyFraction();
          neuhad4e[njets4e] = (*PFJets4e)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets4e "<< jet4v<<" "<<misetpf4e<<" "<<neuhad4e[njets4e]<<endl;
          
          jetmul4e[njets4e] = min(9,(*PFJets4e)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets4e)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets4e)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets4e)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets4e)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets4e)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets4e)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc4e[njets4e] =const4v.e();
          jetumm4e[njets4e] =const4v.rho(); 
          
          if (++njets4e >=njetmx) break;
        }
      }
    }


    if (iTag>5) {
      edm::Handle<reco::PFJetCollection> PFJets5f;
      edm::Handle<PFMETCollection> pfmets5f;
      bool ispfMets5f = true;
      try {
        iEvent.getByLabel("recoPFMET05", pfmets5f);   
      } catch ( cms::Exception &iEvent ) { ispfMets5f = false; } 
      misetpf5f = misphipf5f = -100;
      if (ispfMets5f && pfmets5f.isValid()) {
        misetpf5f = pfmets5f->begin()->et();
        misphipf5f = pfmets5f->begin()->phi();
        pfmtsign5f = pfmets5f->begin()->significance();
      }
      
      bool isPFJets5f = true;
      
      try {
        iEvent.getByLabel("ak5PFJets05", PFJets5f); 
      } catch ( cms::Exception &iEvent ) { isPFJets5f = false; } 
      if (isPFJets5f && PFJets5f.isValid()) {
        for (unsigned jet = 0; jet<PFJets5f->size(); jet++) {
          if (abs((*PFJets5f)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[7]->Fill((*PFJets5f)[jet].phi(), (*PFJets5f)[jet].pt());
          if ((*PFJets5f)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets5f)[jet].px(),(*PFJets5f)[jet].py(),(*PFJets5f)[jet].pz(), (*PFJets5f)[jet].p());
          
          jetunc5f[njets5f] = 0.0;
          jetumm5f[njets5f] = 0.0;
          jetmom5f[njets5f] = jet4v.rho();
          jetthe5f[njets5f] = jet4v.theta();
          jetphi5f[njets5f] = jet4v.phi();
          
          neuemf5f[njets5f] = (*PFJets5f)[jet].neutralEmEnergyFraction();
          chghad5f[njets5f] = (*PFJets5f)[jet].chargedHadronEnergyFraction();
          neuhad5f[njets5f] = (*PFJets5f)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets5f "<< jet4v<<" "<<misetpf5f<<" "<<neuhad5f[njets5f]<<endl;
          
          jetmul5f[njets5f] = min(9,(*PFJets5f)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets5f)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets5f)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets5f)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets5f)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets5f)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets5f)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc5f[njets5f] =const4v.e();
          jetumm5f[njets5f] =const4v.rho(); 
          
          if (++njets5f >=njetmx) break;
        }
      }
    }


    if (iTag>6) {
      edm::Handle<reco::PFJetCollection> PFJets6g;
      edm::Handle<PFMETCollection> pfmets6g;
      bool ispfMets6g = true;
      try {
        iEvent.getByLabel("recoPFMET06", pfmets6g);   
      } catch ( cms::Exception &iEvent ) { ispfMets6g = false; } 
      misetpf6g = misphipf6g = -100;
      if (ispfMets6g && pfmets6g.isValid()) {
        misetpf6g = pfmets6g->begin()->et();
        misphipf6g = pfmets6g->begin()->phi();
        pfmtsign6g = pfmets6g->begin()->significance();
      }
      
      bool isPFJets6g = true;
      
      try {
        iEvent.getByLabel("ak5PFJets06", PFJets6g); 
      } catch ( cms::Exception &iEvent ) { isPFJets6g = false; } 
      if (isPFJets6g && PFJets6g.isValid()) {
        for (unsigned jet = 0; jet<PFJets6g->size(); jet++) {
          if (abs((*PFJets6g)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[8]->Fill((*PFJets6g)[jet].phi(), (*PFJets6g)[jet].pt());
          if ((*PFJets6g)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets6g)[jet].px(),(*PFJets6g)[jet].py(),(*PFJets6g)[jet].pz(), (*PFJets6g)[jet].p());
          
          jetunc6g[njets6g] = 0.0;
          jetumm6g[njets6g] = 0.0;
          jetmom6g[njets6g] = jet4v.rho();
          jetthe6g[njets6g] = jet4v.theta();
          jetphi6g[njets6g] = jet4v.phi();
          
          neuemf6g[njets6g] = (*PFJets6g)[jet].neutralEmEnergyFraction();
          chghad6g[njets6g] = (*PFJets6g)[jet].chargedHadronEnergyFraction();
          neuhad6g[njets6g] = (*PFJets6g)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets6g "<< jet4v<<" "<<misetpf6g<<" "<<neuhad6g[njets6g]<<endl;
          
          jetmul6g[njets6g] = min(9,(*PFJets6g)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets6g)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets6g)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets6g)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets6g)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets6g)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets6g)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc6g[njets6g] =const4v.e();
          jetumm6g[njets6g] =const4v.rho(); 
          
          if (++njets6g >=njetmx) break;
        }
      }
    }


    if (iTag>7) {
      edm::Handle<reco::PFJetCollection> PFJets7h;
      edm::Handle<PFMETCollection> pfmets7h;
      bool ispfMets7h = true;
      try {
        iEvent.getByLabel("recoPFMET07", pfmets7h);   
      } catch ( cms::Exception &iEvent ) { ispfMets7h = false; } 
      misetpf7h = misphipf7h = -100;
      if (ispfMets7h && pfmets7h.isValid()) {
        misetpf7h = pfmets7h->begin()->et();
        misphipf7h = pfmets7h->begin()->phi();
        pfmtsign7h = pfmets7h->begin()->significance();
      }
      
      bool isPFJets7h = true;
      
      try {
        iEvent.getByLabel("ak5PFJets07", PFJets7h); 
      } catch ( cms::Exception &iEvent ) { isPFJets7h = false; } 
      if (isPFJets7h && PFJets7h.isValid()) {
        for (unsigned jet = 0; jet<PFJets7h->size(); jet++) {
          if (abs((*PFJets7h)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[9]->Fill((*PFJets7h)[jet].phi(), (*PFJets7h)[jet].pt());
          if ((*PFJets7h)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets7h)[jet].px(),(*PFJets7h)[jet].py(),(*PFJets7h)[jet].pz(), (*PFJets7h)[jet].p());
          
          jetunc7h[njets7h] = 0.0;
          jetumm7h[njets7h] = 0.0;
          jetmom7h[njets7h] = jet4v.rho();
          jetthe7h[njets7h] = jet4v.theta();
          jetphi7h[njets7h] = jet4v.phi();
          
          neuemf7h[njets7h] = (*PFJets7h)[jet].neutralEmEnergyFraction();
          chghad7h[njets7h] = (*PFJets7h)[jet].chargedHadronEnergyFraction();
          neuhad7h[njets7h] = (*PFJets7h)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets7h "<< jet4v<<" "<<misetpf7h<<" "<<neuhad7h[njets7h]<<endl;
          
          jetmul7h[njets7h] = min(9,(*PFJets7h)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets7h)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets7h)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets7h)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets7h)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets7h)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets7h)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc7h[njets7h] =const4v.e();
          jetumm7h[njets7h] =const4v.rho(); 
          
          if (++njets7h >=njetmx) break;
        }
      }
    }


    if (iTag>8) {
      edm::Handle<reco::PFJetCollection> PFJets8i;
      edm::Handle<PFMETCollection> pfmets8i;
      bool ispfMets8i = true;
      try {
        iEvent.getByLabel("recoPFMET08", pfmets8i);   
      } catch ( cms::Exception &iEvent ) { ispfMets8i = false; } 
      misetpf8i = misphipf8i = -100;
      if (ispfMets8i && pfmets8i.isValid()) {
        misetpf8i = pfmets8i->begin()->et();
        misphipf8i = pfmets8i->begin()->phi();
        pfmtsign8i = pfmets8i->begin()->significance();
      }
      
      bool isPFJets8i = true;
      
      try {
        iEvent.getByLabel("ak5PFJets08", PFJets8i); 
      } catch ( cms::Exception &iEvent ) { isPFJets8i = false; } 
      if (isPFJets8i && PFJets8i.isValid()) {
        for (unsigned jet = 0; jet<PFJets8i->size(); jet++) {
          if (abs((*PFJets8i)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[10]->Fill((*PFJets8i)[jet].phi(), (*PFJets8i)[jet].pt());
          if ((*PFJets8i)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets8i)[jet].px(),(*PFJets8i)[jet].py(),(*PFJets8i)[jet].pz(), (*PFJets8i)[jet].p());
          
          jetunc8i[njets8i] = 0.0;
          jetumm8i[njets8i] = 0.0;
          jetmom8i[njets8i] = jet4v.rho();
          jetthe8i[njets8i] = jet4v.theta();
          jetphi8i[njets8i] = jet4v.phi();
          
          neuemf8i[njets8i] = (*PFJets8i)[jet].neutralEmEnergyFraction();
          chghad8i[njets8i] = (*PFJets8i)[jet].chargedHadronEnergyFraction();
          neuhad8i[njets8i] = (*PFJets8i)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets8i "<< jet4v<<" "<<misetpf8i<<" "<<neuhad8i[njets8i]<<endl;
          
          jetmul8i[njets8i] = min(9,(*PFJets8i)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets8i)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets8i)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets8i)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets8i)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets8i)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets8i)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc8i[njets8i] =const4v.e();
          jetumm8i[njets8i] =const4v.rho(); 
          
          if (++njets8i >=njetmx) break;
        }
      }
    }

    if (iTag>9) {
      edm::Handle<reco::PFJetCollection> PFJets9j;
      edm::Handle<PFMETCollection> pfmets9j;
      bool ispfMets9j = true;
      try {
        iEvent.getByLabel("recoPFMET09", pfmets9j);   
      } catch ( cms::Exception &iEvent ) { ispfMets9j = false; } 
      misetpf9j = misphipf9j = -100;
      if (ispfMets9j && pfmets9j.isValid()) {
        misetpf9j = pfmets9j->begin()->et();
        misphipf9j = pfmets9j->begin()->phi();
        pfmtsign9j = pfmets9j->begin()->significance();
      }
      
      bool isPFJets9j = true;
      
      try {
        iEvent.getByLabel("ak5PFJets09", PFJets9j); 
      } catch ( cms::Exception &iEvent ) { isPFJets9j = false; } 
      if (isPFJets9j && PFJets9j.isValid()) {
        for (unsigned jet = 0; jet<PFJets9j->size(); jet++) {
          if (abs((*PFJets9j)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[11]->Fill((*PFJets9j)[jet].phi(), (*PFJets9j)[jet].pt());
          if ((*PFJets9j)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJets9j)[jet].px(),(*PFJets9j)[jet].py(),(*PFJets9j)[jet].pz(), (*PFJets9j)[jet].p());
          
          jetunc9j[njets9j] = 0.0;
          jetumm9j[njets9j] = 0.0;
          jetmom9j[njets9j] = jet4v.rho();
          jetthe9j[njets9j] = jet4v.theta();
          jetphi9j[njets9j] = jet4v.phi();
          
          neuemf9j[njets9j] = (*PFJets9j)[jet].neutralEmEnergyFraction();
          chghad9j[njets9j] = (*PFJets9j)[jet].chargedHadronEnergyFraction();
          neuhad9j[njets9j] = (*PFJets9j)[jet].neutralHadronEnergyFraction();
          //	cout <<"jets9j "<< jet4v<<" "<<misetpf9j<<" "<<neuhad9j[njets9j]<<endl;
          
          jetmul9j[njets9j] = min(9,(*PFJets9j)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJets9j)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJets9j)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJets9j)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJets9j)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJets9j)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJets9j)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunc9j[njets9j] =const4v.e();
          jetumm9j[njets9j] =const4v.rho(); 
          
          if (++njets9j >=njetmx) break;
        }
      }
    }


    if (iTag>10) {
      edm::Handle<reco::PFJetCollection> PFJetsak;
      edm::Handle<PFMETCollection> pfmetsak;
      bool ispfMetsak = true;
      try {
        iEvent.getByLabel("recoPFMET10", pfmetsak);   
      } catch ( cms::Exception &iEvent ) { ispfMetsak = false; } 
      misetpfak = misphipfak = -100;
      if (ispfMetsak && pfmetsak.isValid()) {
        misetpfak = pfmetsak->begin()->et();
        misphipfak = pfmetsak->begin()->phi();
        pfmtsignak = pfmetsak->begin()->significance();
      }
      
      bool isPFJetsak = true;
      
      try {
        iEvent.getByLabel("ak5PFJets10", PFJetsak); 
      } catch ( cms::Exception &iEvent ) { isPFJetsak = false; } 
      if (isPFJetsak && PFJetsak.isValid()) {
        for (unsigned jet = 0; jet<PFJetsak->size(); jet++) {
          if (abs((*PFJetsak)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[12]->Fill((*PFJetsak)[jet].phi(), (*PFJetsak)[jet].pt());
          if ((*PFJetsak)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetsak)[jet].px(),(*PFJetsak)[jet].py(),(*PFJetsak)[jet].pz(), (*PFJetsak)[jet].p());
          
          jetuncak[njetsak] = 0.0;
          jetummak[njetsak] = 0.0;
          jetmomak[njetsak] = jet4v.rho();
          jettheak[njetsak] = jet4v.theta();
          jetphiak[njetsak] = jet4v.phi();
          
          neuemfak[njetsak] = (*PFJetsak)[jet].neutralEmEnergyFraction();
          chghadak[njetsak] = (*PFJetsak)[jet].chargedHadronEnergyFraction();
          neuhadak[njetsak] = (*PFJetsak)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetsak "<< jet4v<<" "<<misetpfak<<" "<<neuhadak[njetsak]<<endl;
          
          jetmulak[njetsak] = min(9,(*PFJetsak)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetsak)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetsak)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetsak)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetsak)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetsak)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetsak)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetuncak[njetsak] =const4v.e();
          jetummak[njetsak] =const4v.rho(); 
          
          if (++njetsak >=njetmx) break;
        }
      }
    }


    if (iTag>11) {
      edm::Handle<reco::PFJetCollection> PFJetsbl;
      edm::Handle<PFMETCollection> pfmetsbl;
      bool ispfMetsbl = true;
      try {
        iEvent.getByLabel("recoPFMET11", pfmetsbl);   
      } catch ( cms::Exception &iEvent ) { ispfMetsbl = false; } 
      misetpfbl = misphipfbl = -100;
      if (ispfMetsbl && pfmetsbl.isValid()) {
        misetpfbl = pfmetsbl->begin()->et();
        misphipfbl = pfmetsbl->begin()->phi();
        pfmtsignbl = pfmetsbl->begin()->significance();
      }
      
      bool isPFJetsbl = true;
      
      try {
        iEvent.getByLabel("ak5PFJets11", PFJetsbl); 
      } catch ( cms::Exception &iEvent ) { isPFJetsbl = false; } 
      if (isPFJetsbl && PFJetsbl.isValid()) {
        for (unsigned jet = 0; jet<PFJetsbl->size(); jet++) {
          if (abs((*PFJetsbl)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[13]->Fill((*PFJetsbl)[jet].phi(), (*PFJetsbl)[jet].pt());
          if ((*PFJetsbl)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetsbl)[jet].px(),(*PFJetsbl)[jet].py(),(*PFJetsbl)[jet].pz(), (*PFJetsbl)[jet].p());
          
          jetuncbl[njetsbl] = 0.0;
          jetummbl[njetsbl] = 0.0;
          jetmombl[njetsbl] = jet4v.rho();
          jetthebl[njetsbl] = jet4v.theta();
          jetphibl[njetsbl] = jet4v.phi();
          
          neuemfbl[njetsbl] = (*PFJetsbl)[jet].neutralEmEnergyFraction();
          chghadbl[njetsbl] = (*PFJetsbl)[jet].chargedHadronEnergyFraction();
          neuhadbl[njetsbl] = (*PFJetsbl)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetsbl "<< jet4v<<" "<<misetpfbl<<" "<<neuhadbl[njetsbl]<<endl;
          
          jetmulbl[njetsbl] = min(9,(*PFJetsbl)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetsbl)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetsbl)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetsbl)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetsbl)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetsbl)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetsbl)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetuncbl[njetsbl] =const4v.e();
          jetummbl[njetsbl] =const4v.rho(); 
          
          if (++njetsbl >=njetmx) break;
        }
      }
    }


    if (iTag>12) {
      edm::Handle<reco::PFJetCollection> PFJetscm;
      edm::Handle<PFMETCollection> pfmetscm;
      bool ispfMetscm = true;
      try {
        iEvent.getByLabel("recoPFMET12", pfmetscm);   
      } catch ( cms::Exception &iEvent ) { ispfMetscm = false; } 
      misetpfcm = misphipfcm = -100;
      if (ispfMetscm && pfmetscm.isValid()) {
        misetpfcm = pfmetscm->begin()->et();
        misphipfcm = pfmetscm->begin()->phi();
        pfmtsigncm = pfmetscm->begin()->significance();
      }
      
      bool isPFJetscm = true;
      
      try {
        iEvent.getByLabel("ak5PFJets12", PFJetscm); 
      } catch ( cms::Exception &iEvent ) { isPFJetscm = false; } 
      if (isPFJetscm && PFJetscm.isValid()) {
        for (unsigned jet = 0; jet<PFJetscm->size(); jet++) {
          if (abs((*PFJetscm)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[14]->Fill((*PFJetscm)[jet].phi(), (*PFJetscm)[jet].pt());
          if ((*PFJetscm)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetscm)[jet].px(),(*PFJetscm)[jet].py(),(*PFJetscm)[jet].pz(), (*PFJetscm)[jet].p());
          
          jetunccm[njetscm] = 0.0;
          jetummcm[njetscm] = 0.0;
          jetmomcm[njetscm] = jet4v.rho();
          jetthecm[njetscm] = jet4v.theta();
          jetphicm[njetscm] = jet4v.phi();
          
          neuemfcm[njetscm] = (*PFJetscm)[jet].neutralEmEnergyFraction();
          chghadcm[njetscm] = (*PFJetscm)[jet].chargedHadronEnergyFraction();
          neuhadcm[njetscm] = (*PFJetscm)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetscm "<< jet4v<<" "<<misetpfcm<<" "<<neuhadcm[njetscm]<<endl;
          
          jetmulcm[njetscm] = min(9,(*PFJetscm)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetscm)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetscm)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetscm)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetscm)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetscm)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetscm)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunccm[njetscm] =const4v.e();
          jetummcm[njetscm] =const4v.rho(); 
          
          if (++njetscm >=njetmx) break;
        }
      }
    }


    if (iTag>13) {
      edm::Handle<reco::PFJetCollection> PFJetsdn;
      edm::Handle<PFMETCollection> pfmetsdn;
      bool ispfMetsdn = true;
      try {
        iEvent.getByLabel("recoPFMET13", pfmetsdn);   
      } catch ( cms::Exception &iEvent ) { ispfMetsdn = false; } 
      misetpfdn = misphipfdn = -100;
      if (ispfMetsdn && pfmetsdn.isValid()) {
        misetpfdn = pfmetsdn->begin()->et();
        misphipfdn = pfmetsdn->begin()->phi();
        pfmtsigndn = pfmetsdn->begin()->significance();
      }
      
      bool isPFJetsdn = true;
      
      try {
        iEvent.getByLabel("ak5PFJets13", PFJetsdn); 
      } catch ( cms::Exception &iEvent ) { isPFJetsdn = false; } 
      if (isPFJetsdn && PFJetsdn.isValid()) {
        for (unsigned jet = 0; jet<PFJetsdn->size(); jet++) {
          if (abs((*PFJetsdn)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[15]->Fill((*PFJetsdn)[jet].phi(), (*PFJetsdn)[jet].pt());
          if ((*PFJetsdn)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetsdn)[jet].px(),(*PFJetsdn)[jet].py(),(*PFJetsdn)[jet].pz(), (*PFJetsdn)[jet].p());
          
          jetuncdn[njetsdn] = 0.0;
          jetummdn[njetsdn] = 0.0;
          jetmomdn[njetsdn] = jet4v.rho();
          jetthedn[njetsdn] = jet4v.theta();
          jetphidn[njetsdn] = jet4v.phi();
          
          neuemfdn[njetsdn] = (*PFJetsdn)[jet].neutralEmEnergyFraction();
          chghaddn[njetsdn] = (*PFJetsdn)[jet].chargedHadronEnergyFraction();
          neuhaddn[njetsdn] = (*PFJetsdn)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetsdn "<< jet4v<<" "<<misetpfdn<<" "<<neuhaddn[njetsdn]<<endl;
          
          jetmuldn[njetsdn] = min(9,(*PFJetsdn)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetsdn)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetsdn)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetsdn)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetsdn)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetsdn)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetsdn)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetuncdn[njetsdn] =const4v.e();
          jetummdn[njetsdn] =const4v.rho(); 
          
          if (++njetsdn >=njetmx) break;
        }
      }
    }


    if (iTag>14) {
      edm::Handle<reco::PFJetCollection> PFJetseo;
      edm::Handle<PFMETCollection> pfmetseo;
      bool ispfMetseo = true;
      try {
        iEvent.getByLabel("recoPFMET14", pfmetseo);   
      } catch ( cms::Exception &iEvent ) { ispfMetseo = false; } 
      misetpfeo = misphipfeo = -100;
      if (ispfMetseo && pfmetseo.isValid()) {
        misetpfeo = pfmetseo->begin()->et();
        misphipfeo = pfmetseo->begin()->phi();
        pfmtsigneo = pfmetseo->begin()->significance();
      }
      
      bool isPFJetseo = true;
      
      try {
        iEvent.getByLabel("ak5PFJets14", PFJetseo); 
      } catch ( cms::Exception &iEvent ) { isPFJetseo = false; } 
      if (isPFJetseo && PFJetseo.isValid()) {
        for (unsigned jet = 0; jet<PFJetseo->size(); jet++) {
          if (abs((*PFJetseo)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[16]->Fill((*PFJetseo)[jet].phi(), (*PFJetseo)[jet].pt());
          if ((*PFJetseo)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetseo)[jet].px(),(*PFJetseo)[jet].py(),(*PFJetseo)[jet].pz(), (*PFJetseo)[jet].p());
          
          jetunceo[njetseo] = 0.0;
          jetummeo[njetseo] = 0.0;
          jetmomeo[njetseo] = jet4v.rho();
          jettheeo[njetseo] = jet4v.theta();
          jetphieo[njetseo] = jet4v.phi();
          
          neuemfeo[njetseo] = (*PFJetseo)[jet].neutralEmEnergyFraction();
          chghadeo[njetseo] = (*PFJetseo)[jet].chargedHadronEnergyFraction();
          neuhadeo[njetseo] = (*PFJetseo)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetseo "<< jet4v<<" "<<misetpfeo<<" "<<neuhadeo[njetseo]<<endl;
          
          jetmuleo[njetseo] = min(9,(*PFJetseo)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetseo)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetseo)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetseo)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetseo)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetseo)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetseo)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunceo[njetseo] =const4v.e();
          jetummeo[njetseo] =const4v.rho(); 
          
          if (++njetseo >=njetmx) break;
        }
      }
    }


    if (iTag>15) {
      edm::Handle<reco::PFJetCollection> PFJetsfp;
      edm::Handle<PFMETCollection> pfmetsfp;
      bool ispfMetsfp = true;
      try {
        iEvent.getByLabel("recoPFMET15", pfmetsfp);   
      } catch ( cms::Exception &iEvent ) { ispfMetsfp = false; } 
      misetpffp = misphipffp = -100;
      if (ispfMetsfp && pfmetsfp.isValid()) {
        misetpffp = pfmetsfp->begin()->et();
        misphipffp = pfmetsfp->begin()->phi();
        pfmtsignfp = pfmetsfp->begin()->significance();
      }
      
      bool isPFJetsfp = true;
      
      try {
        iEvent.getByLabel("ak5PFJets15", PFJetsfp); 
      } catch ( cms::Exception &iEvent ) { isPFJetsfp = false; } 
      if (isPFJetsfp && PFJetsfp.isValid()) {
        for (unsigned jet = 0; jet<PFJetsfp->size(); jet++) {
          if (abs((*PFJetsfp)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[17]->Fill((*PFJetsfp)[jet].phi(), (*PFJetsfp)[jet].pt());
          if ((*PFJetsfp)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetsfp)[jet].px(),(*PFJetsfp)[jet].py(),(*PFJetsfp)[jet].pz(), (*PFJetsfp)[jet].p());
          
          jetuncfp[njetsfp] = 0.0;
          jetummfp[njetsfp] = 0.0;
          jetmomfp[njetsfp] = jet4v.rho();
          jetthefp[njetsfp] = jet4v.theta();
          jetphifp[njetsfp] = jet4v.phi();
          
          neuemffp[njetsfp] = (*PFJetsfp)[jet].neutralEmEnergyFraction();
          chghadfp[njetsfp] = (*PFJetsfp)[jet].chargedHadronEnergyFraction();
          neuhadfp[njetsfp] = (*PFJetsfp)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetsfp "<< jet4v<<" "<<misetpffp<<" "<<neuhadfp[njetsfp]<<endl;
          
          jetmulfp[njetsfp] = min(9,(*PFJetsfp)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetsfp)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetsfp)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetsfp)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetsfp)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetsfp)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetsfp)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetuncfp[njetsfp] =const4v.e();
          jetummfp[njetsfp] =const4v.rho(); 
          
          if (++njetsfp >=njetmx) break;
        }
      }
    }

    if (iTag>16) {
      edm::Handle<reco::PFJetCollection> PFJetsgq;
      edm::Handle<PFMETCollection> pfmetsgq;
      bool ispfMetsgq = true;
      try {
        iEvent.getByLabel("recoPFMET16", pfmetsgq);   
      } catch ( cms::Exception &iEvent ) { ispfMetsgq = false; } 
      misetpfgq = misphipfgq = -100;
      if (ispfMetsgq && pfmetsgq.isValid()) {
        misetpfgq = pfmetsgq->begin()->et();
        misphipfgq = pfmetsgq->begin()->phi();
        pfmtsigngq = pfmetsgq->begin()->significance();
      }
      
      bool isPFJetsgq = true;
      
      try {
        iEvent.getByLabel("ak5PFJets16", PFJetsgq); 
      } catch ( cms::Exception &iEvent ) { isPFJetsgq = false; } 
      if (isPFJetsgq && PFJetsgq.isValid()) {
        for (unsigned jet = 0; jet<PFJetsgq->size(); jet++) {
          if (abs((*PFJetsgq)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[18]->Fill((*PFJetsgq)[jet].phi(), (*PFJetsgq)[jet].pt());
          if ((*PFJetsgq)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetsgq)[jet].px(),(*PFJetsgq)[jet].py(),(*PFJetsgq)[jet].pz(), (*PFJetsgq)[jet].p());
          
          jetuncgq[njetsgq] = 0.0;
          jetummgq[njetsgq] = 0.0;
          jetmomgq[njetsgq] = jet4v.rho();
          jetthegq[njetsgq] = jet4v.theta();
          jetphigq[njetsgq] = jet4v.phi();
          
          neuemfgq[njetsgq] = (*PFJetsgq)[jet].neutralEmEnergyFraction();
          chghadgq[njetsgq] = (*PFJetsgq)[jet].chargedHadronEnergyFraction();
          neuhadgq[njetsgq] = (*PFJetsgq)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetsgq "<< jet4v<<" "<<misetpfgq<<" "<<neuhadgq[njetsgq]<<endl;
          
          jetmulgq[njetsgq] = min(9,(*PFJetsgq)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetsgq)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetsgq)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetsgq)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetsgq)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetsgq)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetsgq)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetuncgq[njetsgq] =const4v.e();
          jetummgq[njetsgq] =const4v.rho(); 
          
          if (++njetsgq >=njetmx) break;
        }
      }
    }

    if (iTag>17) {
      edm::Handle<reco::PFJetCollection> PFJetshr;
      edm::Handle<PFMETCollection> pfmetshr;
      bool ispfMetshr = true;
      try {
        iEvent.getByLabel("recoPFMET17", pfmetshr);   
      } catch ( cms::Exception &iEvent ) { ispfMetshr = false; } 
      misetpfhr = misphipfhr = -100;
      if (ispfMetshr && pfmetshr.isValid()) {
        misetpfhr = pfmetshr->begin()->et();
        misphipfhr = pfmetshr->begin()->phi();
        pfmtsignhr = pfmetshr->begin()->significance();
      }
      
      bool isPFJetshr = true;
      
      try {
        iEvent.getByLabel("ak5PFJets17", PFJetshr); 
      } catch ( cms::Exception &iEvent ) { isPFJetshr = false; } 
      if (isPFJetshr && PFJetshr.isValid()) {
        for (unsigned jet = 0; jet<PFJetshr->size(); jet++) {
          if (abs((*PFJetshr)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[19]->Fill((*PFJetshr)[jet].phi(), (*PFJetshr)[jet].pt());
          if ((*PFJetshr)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetshr)[jet].px(),(*PFJetshr)[jet].py(),(*PFJetshr)[jet].pz(), (*PFJetshr)[jet].p());
          
          jetunchr[njetshr] = 0.0;
          jetummhr[njetshr] = 0.0;
          jetmomhr[njetshr] = jet4v.rho();
          jetthehr[njetshr] = jet4v.theta();
          jetphihr[njetshr] = jet4v.phi();
          
          neuemfhr[njetshr] = (*PFJetshr)[jet].neutralEmEnergyFraction();
          chghadhr[njetshr] = (*PFJetshr)[jet].chargedHadronEnergyFraction();
          neuhadhr[njetshr] = (*PFJetshr)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetshr "<< jet4v<<" "<<misetpfhr<<" "<<neuhadhr[njetshr]<<endl;
          
          jetmulhr[njetshr] = min(9,(*PFJetshr)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetshr)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetshr)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetshr)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetshr)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetshr)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetshr)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetunchr[njetshr] =const4v.e();
          jetummhr[njetshr] =const4v.rho(); 
          
          if (++njetshr >=njetmx) break;
        }
      }
    }


    if (iTag>18) {
      edm::Handle<reco::PFJetCollection> PFJetsis;
      edm::Handle<PFMETCollection> pfmetsis;
      bool ispfMetsis = true;
      try {
        iEvent.getByLabel("recoPFMET18", pfmetsis);   
      } catch ( cms::Exception &iEvent ) { ispfMetsis = false; } 
      misetpfis = misphipfis = -100;
      if (ispfMetsis && pfmetsis.isValid()) {
        misetpfis = pfmetsis->begin()->et();
        misphipfis = pfmetsis->begin()->phi();
        pfmtsignis = pfmetsis->begin()->significance();
      }
      
      bool isPFJetsis = true;
      
      try {
        iEvent.getByLabel("ak5PFJets18", PFJetsis); 
      } catch ( cms::Exception &iEvent ) { isPFJetsis = false; } 
      if (isPFJetsis && PFJetsis.isValid()) {
        for (unsigned jet = 0; jet<PFJetsis->size(); jet++) {
          if (abs((*PFJetsis)[jet].eta())>etarng) continue;
	  h_pfjtptvseta[20]->Fill((*PFJetsis)[jet].phi(), (*PFJetsis)[jet].pt());
          if ((*PFJetsis)[jet].pt()<jtptbins[0]) continue;
          HepLorentzVector jet4v((*PFJetsis)[jet].px(),(*PFJetsis)[jet].py(),(*PFJetsis)[jet].pz(), (*PFJetsis)[jet].p());
          
          jetuncis[njetsis] = 0.0;
          jetummis[njetsis] = 0.0;
          jetmomis[njetsis] = jet4v.rho();
          jettheis[njetsis] = jet4v.theta();
          jetphiis[njetsis] = jet4v.phi();
          
          neuemfis[njetsis] = (*PFJetsis)[jet].neutralEmEnergyFraction();
          chghadis[njetsis] = (*PFJetsis)[jet].chargedHadronEnergyFraction();
          neuhadis[njetsis] = (*PFJetsis)[jet].neutralHadronEnergyFraction();
          //	cout <<"jetsis "<< jet4v<<" "<<misetpfis<<" "<<neuhadis[njetsis]<<endl;
          
          jetmulis[njetsis] = min(9,(*PFJetsis)[jet].muonMultiplicity()) 
            + 10*min(99,(*PFJetsis)[jet].chargedHadronMultiplicity()) 
            + 1000*min(99,(*PFJetsis)[jet].neutralHadronMultiplicity())
            + 100000*min(99,(*PFJetsis)[jet].electronMultiplicity())
            + 10000000*min(99,(*PFJetsis)[jet].photonMultiplicity ());
          
          HepLorentzVector const4v(0,0,0,0);
          for (int ix=0; ix<(*PFJetsis)[jet].nConstituents(); ix++) {
            const reco::PFCandidatePtr pfcand = (*PFJetsis)[jet].getPFConstituent (ix);
            
            const4v +=HepLorentzVector(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
          }
          jetuncis[njetsis] =const4v.e();
          jetummis[njetsis] =const4v.rho(); 
          
          if (++njetsis >=njetmx) break;
        }
      }
    }
  } //if (ReRECO)
 
  if (isMC) {
    ngenlep = 0;
    genmet = genmetph = -100;

    Handle <GenParticleCollection> EvtHandle1;
    iEvent.getByLabel("genParticles",EvtHandle1);
    if (EvtHandle1.isValid()) {
      for (GenParticleCollection::const_iterator cand = EvtHandle1->begin(); cand <EvtHandle1->end(); cand++) {
	if (cand->status()!=1) continue;
	if (cand->pt()<5) continue;
	int pdgid = abs(cand->pdgId())-11;
	if (pdgid<0 || pdgid>5) continue;
	ngenlep +=pow(10., pdgid);
      }
    }


    edm::Handle<GenMETCollection> genmetcol;
    iEvent.getByLabel("genMetCalo" , genmetcol);
    if (genmetcol.isValid()) {
      genmet = genmetcol->begin()->et();
      genmetph = genmetcol->begin()->phi();
    }
    
    //    cout <<"ngenlep "<<ngenlep<<" "<<genmet<<" "<<genmetph<<endl;

    Handle<reco::GenJetCollection> genit5jets;
    bool isgenJets = true;
    
    ngennujt=0;
    Handle<reco::GenJetCollection> gennujets;
    bool isgennuJets = true;
    try {
      iEvent.getByLabel("ak5GenJetsNoNu", gennujets); 
    } catch ( cms::Exception &iEvent ) { isgennuJets = false; } 
    
    if (isgennuJets && gennujets.isValid()) {
      for(GenJetCollection::const_iterator jet = gennujets->begin(); jet != gennujets->end(); jet++) {
	if (abs(jet->eta())>etarng) continue;
	Hep3Vector tmp3v(jet->px(),jet->py(),jet->pz());
	double jetpt=tmp3v.perp();
	if (jetpt <jtptbins[0] || jetpt>jtptbins[njtptbin]) continue;
	
	
	gennujtmom[ngennujt] = tmp3v.mag();
	gennujtthe[ngennujt] = tmp3v.theta();
	gennujtphi[ngennujt] = tmp3v.phi();
	gennujten[ngennujt] = jet->energy();
	gennujtmul[ngennujt] = jet->getGenConstituents().size();
	ngennujt++; 
	
	if (ngennujt>=njetmx) break;
      }
      //      if (isHistFill) { gennujt_hist->Fill(ngennujt, weight);}
    }

    try {
      //      InputTag genLabel("ak5GenJets"," ", "HLT");
      iEvent.getByLabel("ak5GenJets", genit5jets); //2008
    } catch ( cms::Exception &iEvent ) { isgenJets = false; } 
    
    ngenjt = 0;
    if (isgenJets && genit5jets.isValid()) {
      for(GenJetCollection::const_iterator jet = genit5jets->begin(); jet != genit5jets->end(); jet++) {
	if (abs(jet->eta())>etarng) continue;
	Hep3Vector tmp3v(jet->px(),jet->py(),jet->pz());
	double jetpt=tmp3v.perp();
	if (jetpt <jtptbins[0] || jetpt>jtptbins[njtptbin]) continue;

	genjtmom[ngenjt] = tmp3v.mag(); //jet->energy();
	genjtthe[ngenjt] = tmp3v.theta();
	genjtphi[ngenjt] = tmp3v.phi();
	ngenpar[ngenjt] = jet->getGenConstituents().size();
	
	if (++ngenjt >=njetmx) break;
      } // if (EvtHandle1.isValid())
    }
  }

  irun = iEvent.id().run();
  ilumi = iEvent.luminosityBlock();
  
  if ((iTagHO>1) && irun !=irunold) {
    
    pset.get<HcalDbRecord>().get(COND);
    //m_shape = (*COND).getHcalShape();
    m_shape = (*COND).getHcalShape( m_coder );
    
    for (int ij =-netabin; ij<=netabin; ij++) {
      if (ij==0) continue;
      int tmpeta1 = invert_ieta(ij);
      
      if (tmpeta1 <0 || tmpeta1 >netamx) continue;
      for (int jk=0; jk<nphimx; jk++) {
	
	HcalDetId id(HcalOuter, ij, jk+1, 4);
	//      calibwidth = COND->getHcalCalibrationWidths(id);
	calibped = COND->getHcalCalibrations(id);
	for (int kl =0; kl<ncidmx-1; kl++) {
	  pedestal[tmpeta1][jk][kl] = calibped.pedestal(kl); // pedm->getValue(kl);
	  pedestal[tmpeta1][jk][ncidmx-1] += (1./(ncidmx-1))*pedestal[tmpeta1][jk][kl];
	}
      }
    }
    irunold = irun;
  }
 
  if (!isMC) ibrnch = iEvent.bunchCrossing();
  //  int isorbitgap = isitorbitgap(ibrnch);
  ievt = iEvent.id().event();
  
  nphoton = 0;
    edm::Handle<edm::View<reco::Photon> > photons;
  
  bool isPhoton = true;
  try {
    iEvent.getByLabel("photons", photons);   
  } catch ( cms::Exception &iEvent ) { isPhoton = false; } 
  
  if (isPhoton && photons.isValid()) {
    //    if (isHistFill) {gamm_hist->Fill(photons->size(), weight);}
    edm::View<reco::Photon>::const_iterator gamma1;
    for( gamma1 = photons->begin(); gamma1 != photons->end(); gamma1++ ) {
      if (!gamma1->isPhoton() || gamma1->hadronicOverEm()>0.1) continue;
      //      if (isHistFill) {
	//	gamm_pt->Fill(log10(1+gamma1->pt()), weight);
	//	gamm_eta->Fill(gamma1->eta(), weight);
	//	gamm_phi->Fill(gamma1->phi(), weight);
	
	//	h_phohadiso->Fill(gamma1->hcalTowerSumEtConeDR04());
	//	h_phoemiso->Fill(gamma1->ecalRecHitSumEtConeDR04());
	//	h_photrkiso->Fill(gamma1->trkSumPtSolidConeDR04());
	//	h_etaieta->Fill(gamma1->sigmaIetaIeta());
	//	h_e1by9->Fill(gamma1->maxEnergyXtal()/max(float(1.),gamma1->e3x3()));
	//	h_e9by25->Fill(gamma1->r9());
	//	h_hadbyem->Fill(gamma1->hadronicOverEm());
	//      }
      
      if (nphoton <nphmx && gamma1->pt()>jtptbins[0] && 
	  abs(gamma1->eta())<2.0 && 
	  gamma1->hadronicOverEm() <0.4 && 
	  
	  gamma1->maxEnergyXtal()/max(float(1.),gamma1->e3x3()) <0.9) {
	enpho[nphoton] = gamma1->energy();
	thepho[nphoton] = gamma1->theta();
	phipho[nphoton] = gamma1->phi();
	e1by9[nphoton] = gamma1->maxEnergyXtal()/max(float(1.),gamma1->e3x3());
	//	if (e1by9[nphoton] >0.9) continue;
	if (gamma1->hasConversionTracks()) e1by9[nphoton] *=-1.;

	e9by25[nphoton] = gamma1->r9();
	hadbyem[nphoton] = gamma1->hadronicOverEm();
        photrkiso[nphoton] = gamma1->trkSumPtSolidConeDR04(); //IsolationVariables().trkSumPtHollowCone;
	
	phoemiso[nphoton] = gamma1->ecalRecHitSumEtConeDR04();
	phohadiso[nphoton] = gamma1->hcalTowerSumEtConeDR04();

	etaieta[nphoton] = gamma1->sigmaIetaIeta();
	nphoton++;
      }
    }
  }

  nhocell = 0;
  if (iTagHO >0) {
    edm::Handle<HORecHitCollection> hoht;
    iEvent.getByLabel("horeco","",hoht); //RECO
    //      iEvent.getByLabel("reducedHcalRecHits", "horeco",hoht); //AOD
    
    edm::Handle<HODigiCollection> hodigi; 
    if (iTagHO >1) {
      //iEvent.getByType(hodigi);
      iEvent.getByLabel("hodigi","",hodigi);
    }

    if (hoht.isValid()) {
      if ((*hoht).size()>0) {
	for (HORecHitCollection::const_iterator jk=(*hoht).begin(); jk!=(*hoht).end(); jk++){
	  
	  HcalDetId idreco =(*jk).id();
	  
	  double hoenr = (*jk).energy();
	  int ietaho = idreco.ieta();
	  int iphiho = idreco.iphi();
	  double time = (*jk).time();
	  int ihbeta = invert_hbieta(ietaho);
	  //	cout <<" ietaho "<<ietaho<<" "<<iphiho<<" "<<ihbeta<<" "<<hoenr<<" "<<time<<endl;
	  h_hbentime[ihbeta][iphiho-1][3]->Fill(time, hoenr);
	  
	  h_hbentry[3]->Fill(ietaho, iphiho);
	  h_hbsig[3]->Fill(ietaho, iphiho, hoenr);
	  h_hbsig2[3]->Fill(ietaho, iphiho, hoenr*hoenr);
	  
	  if (abs(ietaho)<=4) {
	    if (hoenr<1) continue;
	  } else {
	    if (hoenr<3) continue;
	  }

	  h_hbtime[ihbeta][iphiho-1][3]->Fill(time);
	  
	  
	  //	  if (ietaho== 5 && (iphiho==18 || iphiho==19)) continue;
	  //	  if (ietaho==-5 && (iphiho>=11 && iphiho<=14)) continue;
	  
	  //	  if ((ietaho<-10) || (ietaho>10 && (iphiho<59 || iphiho>70))) continue;

	  hocellen[nhocell]= hoenr;
	  hotime[nhocell] = (*jk).time();
	  hoflag[nhocell] = (*jk).flags();
	  hocellid[nhocell]=100*abs(ietaho+50)+iphiho;
	  
	  if (iTagHO>1 && hodigi.isValid()) {
	    for (HODigiCollection::const_iterator kl=(*hodigi).begin(); kl!=(*hodigi).end(); kl++) {
	      const HODataFrame digi = (const HODataFrame)(*kl);
	      HcalDetId iddigi =digi.id();
	      int tmpeta= iddigi.ieta();
	      int tmpphi= iddigi.iphi();
	      if (ietaho !=tmpeta || iphiho !=tmpphi) continue;
	      int tmpeta1 = invert_ieta(tmpeta);
	      m_coder = (*COND).getHcalCoder(iddigi);
	      //	      calibped = COND->getHcalCalibrations(iddigi);
	      //	      calibwidth = COND->getHcalCalibrationWidths(iddigi);
	      int ienbin=getbinid(hoenr, nhbsigmx, hbsigmxs);
	      for (int ix=0; ix<digi.size() && ix<nchnmx; ix++) {
		double tmpdata = m_coder->charge(*m_shape,digi.sample(ix).adc(),digi.sample(ix).capid());
		
		if (ienbin>=0 && ienbin<nhbsigmx) {
		  h_normhbdigi[3][ienbin]->Fill(1000*(ietaho+50)+10*iphiho+ix, 1.0);
		  h_hbdigi[3][ienbin]->Fill(1000*(ietaho+50)+10*iphiho+ix, tmpdata);
		}

		tmpdata -=pedestal[tmpeta1][tmpphi-1][digi.sample(ix).capid()]; 
		
		switch(ix) { 
		case 0 : hosig0[nhocell] = tmpdata; break;
		case 1 : hosig1[nhocell] = tmpdata; break;
		case 2 : hosig2[nhocell] = tmpdata; break;
		case 3 : hosig3[nhocell] = tmpdata; break;
		case 4 : hosig4[nhocell] = tmpdata; break;
		case 5 : hosig5[nhocell] = tmpdata; break;
		case 6 : hosig6[nhocell] = tmpdata; break;
		case 7 : hosig7[nhocell] = tmpdata; break;
		case 8 : hosig8[nhocell] = tmpdata; break;
		case 9 : hosig9[nhocell] = tmpdata; break;
		default : break;
		}
	      } // for (int ix=0; ix<digi.size() && ix<nchnmx; ix++)
	      break;
	    } //for (HODigiCollection::const_iterator kl=(*hodigi).begin(); kl!=(*hodigi).end(); kl++)
	  } else {
	    hosig0[nhocell] = hosig1[nhocell] = hosig2[nhocell] = hosig3[nhocell] = hosig4[nhocell] = hosig5[nhocell] = hosig6[nhocell] = hosig7[nhocell] = hosig8[nhocell] = hosig9[nhocell] = -100.0;
	  }
	  //	cout <<"irun "<<irun<<" "<<ievt<<" "<<nhocell<<" "<<hocellid[nhocell]<<" "<<hoenr<<" "<<hotime[nhocell]<<" "<<hoflag[nhocell]<<endl;
	  if (++nhocell>=nhocellmx) { cout <<"cellmxlimt "<<irun<<" "<<ievt<<endl; break;}
	}
      }
    }
  }

 
  /*
  edm::Handle<HBHERecHitCollection> hbhehtst;
  InputTag hbLabel("hbhereco","", "Combined");
  iEvent.getByLabel(hbLabel,hbhehtst);

  edm::Handle<HBHERecHitCollection> hbhehtre;
  hbLabel = InputTag("hbherecoHCAL00","", "Combined");
  iEvent.getByLabel(hbLabel,hbhehtre);

  edm::Handle<HBHERecHitCollection> hbheht0a;
  hbLabel = InputTag("hbherecoHCAL01","", "Combined");
  iEvent.getByLabel(hbLabel,hbheht0a);

  cout <<"size "<< hbheht0a->size()<<" "<<hbhehtre->size()<<" "<<hbhehtst->size()<<" "<<hbheht->size()<<" "<<" "<<hoht->size()<<endl;

  for ( unsigned ij=0; ij<hbhehtst->size(); ij++) {
    for (unsigned int jk=0; jk<hbheht->size(); jk++) {
      if ( ((*hbheht)[jk].id().ieta() ==(*hbhehtst)[ij].id().ieta()) &&
	   ((*hbheht)[jk].id().iphi() ==(*hbhehtst)[ij].id().iphi()) &&
           ((*hbheht)[jk].id().depth() ==(*hbhehtst)[ij].id().depth()) &&
	   abs((*hbheht)[jk].energy() -(*hbhehtst)[ij].energy())>0.01) {
	cout <<"ij "<<jk<<" "<<ij<<" "<<(*hbheht)[jk].id().ieta() <<" "<<(*hbhehtst)[ij].id().ieta()<<" "
	     <<(*hbheht)[jk].id().iphi()<<" "<<(*hbhehtst)[ij].id().iphi()<<" "
	     <<(*hbheht)[jk].id().depth()<<" "<<(*hbhehtst)[ij].id().depth()<<" "
	     <<(*hbheht)[jk].energy()<<" "<<(*hbhehtst)[ij].energy()<<endl;
      }
    }
  }
 
  edm::Handle<CaloTowerCollection> towerst;
  InputTag towLabel("towerMaker","", "RECO");
  iEvent.getByLabel(towLabel,towerst);

  edm::Handle<CaloTowerCollection> towerre;
  towLabel=InputTag("towerMaker","", "Combined");
  iEvent.getByLabel(towLabel,towerre);

  edm::Handle<CaloTowerCollection> tower0a;
  towLabel=InputTag("towerMakerWithHCAL00","", "Combined");
  iEvent.getByLabel(towLabel,tower0a);

  edm::Handle<CaloTowerCollection> tower1b;
  towLabel=InputTag("towerMakerWithHCAL01","", "Combined");
  iEvent.getByLabel(towLabel,tower1b);

  cout <<"tower "<< towerst->size()<<" "<<towerre->size()<<" "<<tower0a->size()<<" "<<tower1b->size()<<endl;

  for (unsigned int ij=0; ij<towerst->size(); ij++) {
    for (unsigned int jk=0; jk<towerre->size(); jk++) {
      if (((*towerst)[ij].ieta() == (*towerre)[jk].ieta()) &&
	  ((*towerst)[ij].iphi() == (*towerre)[jk].iphi()) &&
	  abs((*towerst)[ij].energy()-(*towerre)[jk].energy())>0.01) {
	cout <<"tow "<< ij<<" "<<jk<<" "
	     <<(*towerst)[ij].ieta()<<" "<<(*towerre)[jk].ieta()<<" "
	     <<(*towerst)[ij].iphi()<<" "<<(*towerre)[jk].iphi()<<" "
	     <<(*towerst)[ij].emEnergy()<<" "<<(*towerre)[jk].emEnergy()<<" "
	     <<(*towerst)[ij].hadEnergy()<<" "<<(*towerre)[jk].hadEnergy()<<endl;
      }
    }
  }
  */
 
  T1->Fill();

  fillmetarray();

  int ijteta=1000;
  for (int jk=0; jk<njetsst; jk++) {
    if (jetmomst[jk]*sin(jetthest[jk]) <jtptthr) continue;
    for (int kl=0; kl<netajtbin; kl++) {
      if (abs(theta_to_eta(jetthest[jk])) <etajtbins[kl] && kl<ijteta) {
	ijteta = kl;
	if (ijteta==0) break;
      }
    }
  }
  
  if (ijteta>=0 && ijteta<netajtbin) {
    //    int nemu=2;
    //    if (nelec>0) nemu=1;
    int nemu=1;
    if (nmuon>0) nemu=0;
    
    for (int jk=0; jk<iTagMx; jk++) {
      if (isOnlyDigi && jk==0) continue;
      if (!ReRECO && jk>0) continue;
      if (jk>=iTagMET && jk<iTagMx-2) continue;
      
      h_metetphi[ijteta][nemu][0][jk]->Fill(misphipf[jk], misetpf[jk]);
      h_metetphi[ijteta][nemu][1][jk]->Fill(misphitc[jk], misettc[jk]);
      h_metetphi[ijteta][nemu][2][jk]->Fill(misphicalo[jk], misetcalo[jk]);
    }
  }
}


// ------------ method called once each job just before starting event loop  ------------
void 
HOinPFAlgo::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
HOinPFAlgo::endJob() 
{
  theFile->cd();
  theFile->Write();
  theFile->Close();
  cout<<"End of HOinPFAlgo with event "<<Nevt<<endl;
}

// ------------ method called when starting to processes a run  ------------
void 
HOinPFAlgo::beginRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
HOinPFAlgo::endRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
HOinPFAlgo::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
HOinPFAlgo::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
HOinPFAlgo::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}


void HOinPFAlgo::fillmetarray() { // int ix, float* hoarray) {

  misettc[iTagMx-2] = misettcst;
  misphitc[iTagMx-2] = misphitcst;

  misettc[iTagMx-1] = misettcre;
  misphitc[iTagMx-1] = misphitcre;

  misettc[0] = misettc0a;
  misphitc[0] = misphitc0a;

  misetcalo[iTagMx-2] = misetcalost;
  misphicalo[iTagMx-2] = misphicalost;

  misetcalo[iTagMx-1] = misetcalore;
  misphicalo[iTagMx-1] = misphicalore;

  misetcalo[0] = misetcalo0a;
  misphicalo[0] = misphicalo0a;


  if (iTagMET>1) {
    misettc[1] = misettc1b;
    misphitc[1] = misphitc1b;

    misetcalo[1] = misetcalo1b;
    misphicalo[1] = misphicalo1b;

  }
  if (iTagMET>2) {
    misettc[2] = misettc2c;
    misphitc[2] = misphitc2c;

    misetcalo[2] = misetcalo2c;
    misphicalo[2] = misphicalo2c;
  }
  if (iTagMET>3) {
    misettc[3] = misettc3d;
    misphitc[3] = misphitc3d;

   misetcalo[3] = misetcalo3d;
    misphicalo[3] = misphicalo3d;
  }
  if (iTagMET>4) {
    misettc[4] = misettc4e;
    misphitc[4] = misphitc4e;

    misetcalo[4] = misetcalo4e;
    misphicalo[4] = misphicalo4e;
  }
  if (iTagMET>5) {
    misettc[5] = misettc5f;
    misphitc[5] = misphitc5f;

    misetcalo[5] = misetcalo5f;
    misphicalo[5] = misphicalo5f;
  }
  if (iTagMET>6) {
    misettc[6] = misettc6g;
    misphitc[6] = misphitc6g;

    misetcalo[6] = misetcalo6g;
    misphicalo[6] = misphicalo6g;
  }

  if (iTagMET>7) {
    misettc[7] = misettc7h;
    misphitc[7] = misphitc7h;

    misetcalo[7] = misetcalo7h;
    misphicalo[7] = misphicalo7h;
  }
  if (iTagMET>8) {
    misettc[8] = misettc8i;
    misphitc[8] = misphitc8i;

    misetcalo[8] = misetcalo8i;
    misphicalo[8] = misphicalo8i;
  }

  if (iTagMET>9) {
    misettc[9] = misettc9j;
    misphitc[9] = misphitc9j;

    misetcalo[9] = misetcalo9j;
    misphicalo[9] = misphicalo9j;
  }

  if (iTagMET>10) {
    misettc[10] = misettcak;
    misphitc[10] = misphitcak;

    misetcalo[10] = misetcaloak;
    misphicalo[10] = misphicaloak;
  }

  if (iTagMET>11) {
    misettc[11] = misettcbl;
    misphitc[11] = misphitcbl;

    misetcalo[11] = misetcalobl;
    misphicalo[11] = misphicalobl;
  }
  if (iTagMET>12) {
    misettc[12] = misettccm;
    misphitc[12] = misphitccm;

    misetcalo[12] = misetcalocm;
    misphicalo[12] = misphicalocm;
  }
  if (iTagMET>13) {
    misettc[13] = misettcdn;
    misphitc[13] = misphitcdn;

    misetcalo[13] = misetcalodn;
    misphicalo[13] = misphicalodn;

  }

  if (iTagMET>14) {
    misettc[14] = misettceo;
    misphitc[14] = misphitceo;

    misetcalo[14] = misetcaloeo;
    misphicalo[14] = misphicaloeo;
  }

  if (iTagMET>15) {
    misettc[15] = misettcfp;
    misphitc[15] = misphitcfp;

    misetcalo[15] = misetcalofp;
    misphicalo[15] = misphicalofp;
  }

 if (iTagMET>16) {
    misettc[16] = misettcgq;
    misphitc[16] = misphitcgq;

    misetcalo[16] = misetcalogq;
    misphicalo[16] = misphicalogq;
  }

 if (iTagMET>17) {
    misettc[17] = misettchr;
    misphitc[17] = misphitchr;

    misetcalo[17] = misetcalohr;
    misphicalo[17] = misphicalohr;
  }

 if (iTagMET>18) {
    misettc[18] = misettcis;
    misphitc[18] = misphitcis;

    misetcalo[18] = misetcalois;
    misphicalo[18] = misphicalois;
  }



  misetpf[iTagMx-2] = misetpfst;
  misphipf[iTagMx-2] = misphipfst;
  pfmtsign[iTagMx-2] = pfmtsignst;

  misetpf[iTagMx-1] = misetpfre;
  misphipf[iTagMx-1] = misphipfre;
  pfmtsign[iTagMx-1] = pfmtsignre;

  misetpf[0] = misetpf0a;
  misphipf[0] = misphipf0a;
  pfmtsign[0] = pfmtsign0a;

  if (iTagMET>1) {
    misetpf[1] = misetpf1b;
    misphipf[1] = misphipf1b;
    pfmtsign[1] = pfmtsign1b;
  }
  if (iTagMET>2) {
    misetpf[2] = misetpf2c;
    misphipf[2] = misphipf2c;
    pfmtsign[2] = pfmtsign2c;
  }
  if (iTagMET>3) {
    misetpf[3] = misetpf3d;
    misphipf[3] = misphipf3d;
    pfmtsign[3] = pfmtsign3d;
  }
  if (iTagMET>4) {
    misetpf[4] = misetpf4e;
    misphipf[4] = misphipf4e;
    pfmtsign[4] = pfmtsign4e;
  }
  if (iTagMET>5) {
    misetpf[5] = misetpf5f;
    misphipf[5] = misphipf5f;
    pfmtsign[5] = pfmtsign5f;
  }
  if (iTagMET>6) {
    misetpf[6] = misetpf6g;
    misphipf[6] = misphipf6g;
    pfmtsign[6] = pfmtsign6g;
  }

  if (iTagMET>7) {
    misetpf[7] = misetpf7h;
    misphipf[7] = misphipf7h;
    pfmtsign[7] = pfmtsign7h;
  }
  if (iTagMET>8) {
    misetpf[8] = misetpf8i;
    misphipf[8] = misphipf8i;
    pfmtsign[8] = pfmtsign8i;
  }

  if (iTagMET>9) {
    misetpf[9] = misetpf9j;
    misphipf[9] = misphipf9j;
    pfmtsign[9] = pfmtsign9j;
  }

  if (iTagMET>10) {
    misetpf[10] = misetpfak;
    misphipf[10] = misphipfak;
    pfmtsign[10] = pfmtsignak;
  }

  if (iTagMET>11) {
    misetpf[11] = misetpfbl;
    misphipf[11] = misphipfbl;
    pfmtsign[11] = pfmtsignbl;
  }
  if (iTagMET>12) {
    misetpf[12] = misetpfcm;
    misphipf[12] = misphipfcm;
    pfmtsign[12] = pfmtsigncm;
  }
  if (iTagMET>13) {
    misetpf[13] = misetpfdn;
    misphipf[13] = misphipfdn;
    pfmtsign[13] = pfmtsigndn;
  }

  if (iTagMET>14) {
    misetpf[14] = misetpfeo;
    misphipf[14] = misphipfeo;
    pfmtsign[14] = pfmtsigneo;
  }

  if (iTagMET>15) {
    misetpf[15] = misetpffp;
    misphipf[15] = misphipffp;
    pfmtsign[15] = pfmtsignfp;
  }

  if (iTagMET>16) {
    misetpf[16] = misetpfgq;
    misphipf[16] = misphipfgq;
    pfmtsign[16] = pfmtsigngq;
  }

  if (iTagMET>17) {
    misetpf[17] = misetpfhr;
    misphipf[17] = misphipfhr;
    pfmtsign[17] = pfmtsignhr;
  }

  if (iTagMET>18) {
    misetpf[18] = misetpfis;
    misphipf[18] = misphipfis;
    pfmtsign[18] = pfmtsignis;
  }

}

//define this as a plug-in
DEFINE_FWK_MODULE(HOinPFAlgo);
/*
  T1->Draw("(hbhesig0+hbhesig1+hbhesig2+hbhesig3+hbhesig4+hbhesig5+hbhesig6+hbhesig7+ hbhesig8+hbhesig9)/hbhetot");
/uscms_data/d2/majumder/anal/CMSSW_5_3_4_patch2/src/Test/HOinPFAlgo/test

*/

































